* Binance API
A Haskell client library for the [[https://www.binance.com/][Binance]] cryptocurrency exchange API. The [[https://www.binance.com/en/binance-api][Binance API]] is documented here: [[https://binance-docs.github.io/apidocs/spot/en][Binance API documentation]]. The [[https://www.openapis.org/][OpenAPI]] ([[https://swagger.io/][Swagger]]) here: [[https://binance.github.io/binance-api-swagger/][binance.github.io/binance-api-swagger]].

* Generated code
This code is auto-generated by [[https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator][Haskell-OpenAPI-Client-Code-Generator]] available on [[https://hackage.haskell.org/package/openapi3-code-generator][Hackage]].

The generator was run as follows:

#+BEGIN_SRC sh
openapi3-code-generator-exe --use-numbered-variant-constructors --convert-to-camel-case --package-name binance-api --module-name Binance --generate-nix-files spot_api.yaml
#+END_SRC

Where =spot_apy.yml= is the file containing the downloaded Binance OpenAPI specification (link is at the top of the [[https://binance.github.io/binance-api-swagger/][binance.github.io/binance-api-swagger]] page).

* Manual changes were required
The generated Haskell code needed some minor manual changing to make it compile.

In the generated Haskell source code I have replaced every first =aggTradeM= (the ones for capital 'M') with =aggTradeMM= in the =src/Binance/Types/AggTrade.hs= file, so that it now looks like this:

#+BEGIN_SRC haskell
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AggTrade
module Binance.Types.AggTrade where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.aggTrade@ in the specification.
data AggTrade = AggTrade
  { -- | M: Was the trade the best price match?
    aggTradeMM :: GHC.Types.Bool,
    -- | T: Timestamp
    aggTradeT :: GHC.Types.Bool,
    -- | a: Aggregate tradeId
    aggTradeA :: GHC.Int.Int64,
    -- | f: First tradeId
    aggTradeF :: GHC.Int.Int64,
    -- | l: Last tradeId
    aggTradeL :: GHC.Int.Int64,
    -- | m: Was the buyer the maker?
    aggTradeM :: GHC.Types.Bool,
    -- | p: Price
    aggTradeP :: Data.Text.Internal.Text,
    -- | q: Quantity
    aggTradeQ :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AggTrade where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["M" Data.Aeson.Types.ToJSON..= aggTradeMM obj] : ["T" Data.Aeson.Types.ToJSON..= aggTradeT obj] : ["a" Data.Aeson.Types.ToJSON..= aggTradeA obj] : ["f" Data.Aeson.Types.ToJSON..= aggTradeF obj] : ["l" Data.Aeson.Types.ToJSON..= aggTradeL obj] : ["m" Data.Aeson.Types.ToJSON..= aggTradeM obj] : ["p" Data.Aeson.Types.ToJSON..= aggTradeP obj] : ["q" Data.Aeson.Types.ToJSON..= aggTradeQ obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["M" Data.Aeson.Types.ToJSON..= aggTradeMM obj] : ["T" Data.Aeson.Types.ToJSON..= aggTradeT obj] : ["a" Data.Aeson.Types.ToJSON..= aggTradeA obj] : ["f" Data.Aeson.Types.ToJSON..= aggTradeF obj] : ["l" Data.Aeson.Types.ToJSON..= aggTradeL obj] : ["m" Data.Aeson.Types.ToJSON..= aggTradeM obj] : ["p" Data.Aeson.Types.ToJSON..= aggTradeP obj] : ["q" Data.Aeson.Types.ToJSON..= aggTradeQ obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AggTrade where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AggTrade" (\obj -> (((((((GHC.Base.pure AggTrade GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "M")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "T")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "a")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "f")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "l")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "m")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "p")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "q"))

-- | Create a new 'AggTrade' with all required fields.
mkAggTrade ::
  -- | 'aggTradeMM'
  GHC.Types.Bool ->
  -- | 'aggTradeT'
  GHC.Types.Bool ->
  -- | 'aggTradeA'
  GHC.Int.Int64 ->
  -- | 'aggTradeF'
  GHC.Int.Int64 ->
  -- | 'aggTradeL'
  GHC.Int.Int64 ->
  -- | 'aggTradeM'
  GHC.Types.Bool ->
  -- | 'aggTradeP'
  Data.Text.Internal.Text ->
  -- | 'aggTradeQ'
  Data.Text.Internal.Text ->
  AggTrade
mkAggTrade aggTradeMM aggTradeT aggTradeA aggTradeF aggTradeL aggTradeM aggTradeP aggTradeQ =
  AggTrade
    { aggTradeMM = aggTradeMM,
      aggTradeT = aggTradeT,
      aggTradeA = aggTradeA,
      aggTradeF = aggTradeF,
      aggTradeL = aggTradeL,
      aggTradeM = aggTradeM,
      aggTradeP = aggTradeP,
      aggTradeQ = aggTradeQ
    }
#+END_SRC

* Usage examples
** getSapiV1SystemStatus

#+BEGIN_SRC haskell
{-# LANGUAGE OverloadedStrings #-}

module Example1 where

import qualified Binance
import Control.Monad (when)
import qualified Data.Text as T
import qualified Network.HTTP.Simple as HS

trade :: Bool -> IO ()
trade verbose = do
  ss <- getSystemStatus
  putStrLn $ "Binance API system status: " <> ss
  where
    getSystemStatus :: IO String
    getSystemStatus = do
      resp <- Binance.runWithConfiguration Binance.defaultConfiguration Binance.getSapiV1SystemStatus
      when verbose (print resp)
      pure $
        case HS.getResponseBody resp of
          Binance.GetSapiV1SystemStatusResponse200 status ->
            T.unpack (Binance.getSapiV1SystemStatusResponseBody200Msg status)
              ++ " ("
              ++ show (Binance.getSapiV1SystemStatusResponseBody200Status status)
              ++ ")"
          _ -> "wrong type of response"
#+END_SRC

Running this example code results in the following output:

#+BEGIN_SRC json
Response {responseStatus = Status {statusCode = 200, statusMessage = ""}, responseVersion = HTTP/1.1, responseHeaders = [("Content-Type","application/json;charset=UTF-8"),("Content-Length","27"),("Connection","keep-alive"),("Date","Wed, 16 Nov 2022 20:18:25 GMT"),("Server","nginx"),("X-SAPI-USED-IP-WEIGHT-1M","1"),("Strict-Transport-Security","max-age=31536000; includeSubdomains"),("X-Frame-Options","SAMEORIGIN"),("X-Xss-Protection","1; mode=block"),("X-Content-Type-Options","nosniff"),("Content-Security-Policy","default-src 'self'"),("X-Content-Security-Policy","default-src 'self'"),("X-WebKit-CSP","default-src 'self'"),("Cache-Control","no-cache, no-store, must-revalidate"),("Pragma","no-cache"),("Expires","0"),("Access-Control-Allow-Origin","*"),("Access-Control-Allow-Methods","GET, HEAD, OPTIONS"),("X-Cache","Miss from cloudfront"),("Via","1.1 4ce5e5162c2d4fc9022ceb290f794ffe.cloudfront.net (CloudFront)"),("X-Amz-Cf-Pop","AMS1-C1"),("X-Amz-Cf-Id","V8g__abrKZMYn3os-dRPOuJK3964z28Gk9VrOnh-l6rK4cHK3uRZ8g==")], responseBody = GetSapiV1SystemStatusResponse200 (GetSapiV1SystemStatusResponseBody200 {getSapiV1SystemStatusResponseBody200Msg = "normal", getSapiV1SystemStatusResponseBody200Status = 0}), responseCookieJar = CJ {expose = []}, responseClose' = ResponseClose, responseOriginalRequest = Request {
  host                 = "api.binance.com"
  port                 = 443
  secure               = True
  requestHeaders       = [("User-Agent","Binance Public Spot API openapi3-code-generator/0.1.0.7 (https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator)")]
  path                 = "/sapi/v1/system/status"
  queryString          = ""
  method               = "GET"
  proxy                = Nothing
  rawBody              = False
  redirectCount        = 10
  responseTimeout      = ResponseTimeoutDefault
  requestVersion       = HTTP/1.1
  proxySecureMode      = ProxySecureWithConnect
}
}
Binance API system status: normal (0)
#+END_SRC

** getApiV3Klines

#+BEGIN_SRC haskell
{-# LANGUAGE OverloadedStrings #-}

module Example2 where

import qualified Binance
import Control.Monad (when)
import Data.Either ()
import qualified Data.Text as T
import qualified Network.HTTP.Simple as HS
import qualified Settings as S

defaultConf = Binance.defaultConfiguration

config = Binance.apiKeyInHeaderAuthenticationSecurityScheme "your-api-key-goes-here"

conf =
  defaultConf
    { Binance.configSecurityScheme = config
    }

trade :: Bool -> IO ()
trade  verbose = do
  kl <- getKlines
  putStr "Binance API klines "
  case kl of
    Left e -> putStrLn $ "*** " <> e
    Right kls -> do
      let l = length kls
      putStrLn $ "(" <> show l <> ")"
      mapM_ (\(i, ks) -> putStrLn $ show i <> ": [ " <> printKline ks <> " ]") $ zip [1 ..] kls
  where
    printKline = foldl (\acc c -> acc <> kLineToString c <> ", ") ""
      where
        kLineToString k = case k of
          Binance.GetApiV3KlinesResponseBody200Variant1 s -> show s
          Binance.GetApiV3KlinesResponseBody200Variant2 s -> T.unpack s

    {-
    [
      [GetApiV3KlinesResponseBody200Variant1 1668666360000,       // Kline open time
       GetApiV3KlinesResponseBody200Variant2 "16591.74000000",    // Open price
       GetApiV3KlinesResponseBody200Variant2 "16592.06000000",    // High price
       GetApiV3KlinesResponseBody200Variant2 "16583.62000000",    // Low price
       GetApiV3KlinesResponseBody200Variant2 "16589.72000000",    // Close price
       GetApiV3KlinesResponseBody200Variant2 "57.96618000",       // Volume
       GetApiV3KlinesResponseBody200Variant1 1668666419999,       // Kline Close time
       GetApiV3KlinesResponseBody200Variant2 "961540.25322330",   // Quote asset volume
       GetApiV3KlinesResponseBody200Variant1 1219,                // Number of trades
       GetApiV3KlinesResponseBody200Variant2 "29.84483000",       // Taker buy base asset volume
       GetApiV3KlinesResponseBody200Variant2 "495075.60625770",   // Taker buy quote asset volume
       GetApiV3KlinesResponseBody200Variant2 "0"]                 // Unused field, ignore.
     ]
    -}
    getKlines = do
      resp <-
        Binance.runWithConfiguration conf $
          Binance.getApiV3Klines $
            Binance.mkGetApiV3KlinesParameters Binance.GetApiV3KlinesParametersQueryIntervalEnum1m "BTCBUSD"
      pure $
        case HS.getResponseBody resp of
          Binance.GetApiV3KlinesResponse200 klines -> Right klines
          _ -> Left "wrong type of response"

#+END_SRC

** Other examples

Another example of using generated code — not Binance API related — can be found here: [[https://github.com/Haskell-OpenAPI-Code-Generator/Stripe-Haskell-Library/tree/master/example][Haskell-OpenAPI-Code-Generator/Stripe-Haskell-Library/example]].

* Disclaimer

I have not yet tested this client library myself — aside from the small examples given above — so no guarantees are given at all!. Use this software at your own risk — [[https://www.law.cornell.edu/wex/caveat_emptor][caveat emptor]]!
