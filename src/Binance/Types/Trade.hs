{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Trade
module Binance.Types.Trade where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.trade@ in the specification.
data Trade = Trade
  { -- | id: trade id
    tradeId :: GHC.Int.Int64,
    -- | isBestMatch
    tradeIsBestMatch :: GHC.Types.Bool,
    -- | isBuyerMaker
    tradeIsBuyerMaker :: GHC.Types.Bool,
    -- | price: price
    tradePrice :: Data.Text.Internal.Text,
    -- | qty: amount of base asset
    tradeQty :: Data.Text.Internal.Text,
    -- | quoteQty: amount of quote asset
    tradeQuoteQty :: Data.Text.Internal.Text,
    -- | time: Trade executed timestamp, as same as \`T\` in the stream
    tradeTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Trade where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= tradeId obj] : ["isBestMatch" Data.Aeson.Types.ToJSON..= tradeIsBestMatch obj] : ["isBuyerMaker" Data.Aeson.Types.ToJSON..= tradeIsBuyerMaker obj] : ["price" Data.Aeson.Types.ToJSON..= tradePrice obj] : ["qty" Data.Aeson.Types.ToJSON..= tradeQty obj] : ["quoteQty" Data.Aeson.Types.ToJSON..= tradeQuoteQty obj] : ["time" Data.Aeson.Types.ToJSON..= tradeTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= tradeId obj] : ["isBestMatch" Data.Aeson.Types.ToJSON..= tradeIsBestMatch obj] : ["isBuyerMaker" Data.Aeson.Types.ToJSON..= tradeIsBuyerMaker obj] : ["price" Data.Aeson.Types.ToJSON..= tradePrice obj] : ["qty" Data.Aeson.Types.ToJSON..= tradeQty obj] : ["quoteQty" Data.Aeson.Types.ToJSON..= tradeQuoteQty obj] : ["time" Data.Aeson.Types.ToJSON..= tradeTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Trade where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Trade" (\obj -> ((((((GHC.Base.pure Trade GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBestMatch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBuyerMaker")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "qty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))

-- | Create a new 'Trade' with all required fields.
mkTrade ::
  -- | 'tradeId'
  GHC.Int.Int64 ->
  -- | 'tradeIsBestMatch'
  GHC.Types.Bool ->
  -- | 'tradeIsBuyerMaker'
  GHC.Types.Bool ->
  -- | 'tradePrice'
  Data.Text.Internal.Text ->
  -- | 'tradeQty'
  Data.Text.Internal.Text ->
  -- | 'tradeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'tradeTime'
  GHC.Int.Int64 ->
  Trade
mkTrade tradeId tradeIsBestMatch tradeIsBuyerMaker tradePrice tradeQty tradeQuoteQty tradeTime =
  Trade
    { tradeId = tradeId,
      tradeIsBestMatch = tradeIsBestMatch,
      tradeIsBuyerMaker = tradeIsBuyerMaker,
      tradePrice = tradePrice,
      tradeQty = tradeQty,
      tradeQuoteQty = tradeQuoteQty,
      tradeTime = tradeTime
    }
