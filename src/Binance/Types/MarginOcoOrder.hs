{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema MarginOcoOrder
module Binance.Types.MarginOcoOrder where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.marginOcoOrder@ in the specification.
data MarginOcoOrder = MarginOcoOrder
  { -- | contingencyType
    marginOcoOrderContingencyType :: Data.Text.Internal.Text,
    -- | isIsolated
    marginOcoOrderIsIsolated :: GHC.Types.Bool,
    -- | listClientOrderId
    marginOcoOrderListClientOrderId :: Data.Text.Internal.Text,
    -- | listOrderStatus
    marginOcoOrderListOrderStatus :: Data.Text.Internal.Text,
    -- | listStatusType
    marginOcoOrderListStatusType :: Data.Text.Internal.Text,
    -- | orderListId
    marginOcoOrderOrderListId :: GHC.Int.Int64,
    -- | orderReports
    marginOcoOrderOrderReports :: ([MarginOcoOrderOrderReports]),
    -- | orders
    marginOcoOrderOrders :: ([MarginOcoOrderOrders]),
    -- | symbol
    marginOcoOrderSymbol :: Data.Text.Internal.Text,
    -- | transactionTime
    marginOcoOrderTransactionTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MarginOcoOrder where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["contingencyType" Data.Aeson.Types.ToJSON..= marginOcoOrderContingencyType obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= marginOcoOrderIsIsolated obj] : ["listClientOrderId" Data.Aeson.Types.ToJSON..= marginOcoOrderListClientOrderId obj] : ["listOrderStatus" Data.Aeson.Types.ToJSON..= marginOcoOrderListOrderStatus obj] : ["listStatusType" Data.Aeson.Types.ToJSON..= marginOcoOrderListStatusType obj] : ["orderListId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderListId obj] : ["orderReports" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReports obj] : ["orders" Data.Aeson.Types.ToJSON..= marginOcoOrderOrders obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOcoOrderSymbol obj] : ["transactionTime" Data.Aeson.Types.ToJSON..= marginOcoOrderTransactionTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["contingencyType" Data.Aeson.Types.ToJSON..= marginOcoOrderContingencyType obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= marginOcoOrderIsIsolated obj] : ["listClientOrderId" Data.Aeson.Types.ToJSON..= marginOcoOrderListClientOrderId obj] : ["listOrderStatus" Data.Aeson.Types.ToJSON..= marginOcoOrderListOrderStatus obj] : ["listStatusType" Data.Aeson.Types.ToJSON..= marginOcoOrderListStatusType obj] : ["orderListId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderListId obj] : ["orderReports" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReports obj] : ["orders" Data.Aeson.Types.ToJSON..= marginOcoOrderOrders obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOcoOrderSymbol obj] : ["transactionTime" Data.Aeson.Types.ToJSON..= marginOcoOrderTransactionTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON MarginOcoOrder where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MarginOcoOrder" (\obj -> (((((((((GHC.Base.pure MarginOcoOrder GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "contingencyType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isIsolated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listOrderStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listStatusType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderReports")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orders")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactionTime"))

-- | Create a new 'MarginOcoOrder' with all required fields.
mkMarginOcoOrder ::
  -- | 'marginOcoOrderContingencyType'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderIsIsolated'
  GHC.Types.Bool ->
  -- | 'marginOcoOrderListClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderListOrderStatus'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderListStatusType'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderListId'
  GHC.Int.Int64 ->
  -- | 'marginOcoOrderOrderReports'
  [MarginOcoOrderOrderReports] ->
  -- | 'marginOcoOrderOrders'
  [MarginOcoOrderOrders] ->
  -- | 'marginOcoOrderSymbol'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderTransactionTime'
  GHC.Int.Int64 ->
  MarginOcoOrder
mkMarginOcoOrder marginOcoOrderContingencyType marginOcoOrderIsIsolated marginOcoOrderListClientOrderId marginOcoOrderListOrderStatus marginOcoOrderListStatusType marginOcoOrderOrderListId marginOcoOrderOrderReports marginOcoOrderOrders marginOcoOrderSymbol marginOcoOrderTransactionTime =
  MarginOcoOrder
    { marginOcoOrderContingencyType = marginOcoOrderContingencyType,
      marginOcoOrderIsIsolated = marginOcoOrderIsIsolated,
      marginOcoOrderListClientOrderId = marginOcoOrderListClientOrderId,
      marginOcoOrderListOrderStatus = marginOcoOrderListOrderStatus,
      marginOcoOrderListStatusType = marginOcoOrderListStatusType,
      marginOcoOrderOrderListId = marginOcoOrderOrderListId,
      marginOcoOrderOrderReports = marginOcoOrderOrderReports,
      marginOcoOrderOrders = marginOcoOrderOrders,
      marginOcoOrderSymbol = marginOcoOrderSymbol,
      marginOcoOrderTransactionTime = marginOcoOrderTransactionTime
    }

-- | Defines the object schema located at @components.schemas.marginOcoOrder.properties.orderReports.items@ in the specification.
data MarginOcoOrderOrderReports = MarginOcoOrderOrderReports
  { -- | clientOrderId
    marginOcoOrderOrderReportsClientOrderId :: Data.Text.Internal.Text,
    -- | cummulativeQuoteQty
    marginOcoOrderOrderReportsCummulativeQuoteQty :: Data.Text.Internal.Text,
    -- | executedQty
    marginOcoOrderOrderReportsExecutedQty :: Data.Text.Internal.Text,
    -- | orderId
    marginOcoOrderOrderReportsOrderId :: GHC.Int.Int64,
    -- | orderListId
    marginOcoOrderOrderReportsOrderListId :: GHC.Int.Int64,
    -- | origClientOrderId
    marginOcoOrderOrderReportsOrigClientOrderId :: Data.Text.Internal.Text,
    -- | origQty
    marginOcoOrderOrderReportsOrigQty :: Data.Text.Internal.Text,
    -- | price
    marginOcoOrderOrderReportsPrice :: Data.Text.Internal.Text,
    -- | side
    marginOcoOrderOrderReportsSide :: Data.Text.Internal.Text,
    -- | status
    marginOcoOrderOrderReportsStatus :: Data.Text.Internal.Text,
    -- | stopPrice
    marginOcoOrderOrderReportsStopPrice :: Data.Text.Internal.Text,
    -- | symbol
    marginOcoOrderOrderReportsSymbol :: Data.Text.Internal.Text,
    -- | timeInForce
    marginOcoOrderOrderReportsTimeInForce :: Data.Text.Internal.Text,
    -- | type
    marginOcoOrderOrderReportsType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MarginOcoOrderOrderReports where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsOrderListId obj] : ["origClientOrderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsOrigClientOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsPrice obj] : ["side" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsSide obj] : ["status" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsStatus obj] : ["stopPrice" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsStopPrice obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsTimeInForce obj] : ["type" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsOrderListId obj] : ["origClientOrderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsOrigClientOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsPrice obj] : ["side" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsSide obj] : ["status" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsStatus obj] : ["stopPrice" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsStopPrice obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsTimeInForce obj] : ["type" Data.Aeson.Types.ToJSON..= marginOcoOrderOrderReportsType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON MarginOcoOrderOrderReports where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MarginOcoOrderOrderReports" (\obj -> (((((((((((((GHC.Base.pure MarginOcoOrderOrderReports GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cummulativeQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "executedQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stopPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'MarginOcoOrderOrderReports' with all required fields.
mkMarginOcoOrderOrderReports ::
  -- | 'marginOcoOrderOrderReportsClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsCummulativeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsExecutedQty'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsOrderId'
  GHC.Int.Int64 ->
  -- | 'marginOcoOrderOrderReportsOrderListId'
  GHC.Int.Int64 ->
  -- | 'marginOcoOrderOrderReportsOrigClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsOrigQty'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsPrice'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsSide'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsStatus'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsStopPrice'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsSymbol'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsTimeInForce'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrderReportsType'
  Data.Text.Internal.Text ->
  MarginOcoOrderOrderReports
mkMarginOcoOrderOrderReports marginOcoOrderOrderReportsClientOrderId marginOcoOrderOrderReportsCummulativeQuoteQty marginOcoOrderOrderReportsExecutedQty marginOcoOrderOrderReportsOrderId marginOcoOrderOrderReportsOrderListId marginOcoOrderOrderReportsOrigClientOrderId marginOcoOrderOrderReportsOrigQty marginOcoOrderOrderReportsPrice marginOcoOrderOrderReportsSide marginOcoOrderOrderReportsStatus marginOcoOrderOrderReportsStopPrice marginOcoOrderOrderReportsSymbol marginOcoOrderOrderReportsTimeInForce marginOcoOrderOrderReportsType =
  MarginOcoOrderOrderReports
    { marginOcoOrderOrderReportsClientOrderId = marginOcoOrderOrderReportsClientOrderId,
      marginOcoOrderOrderReportsCummulativeQuoteQty = marginOcoOrderOrderReportsCummulativeQuoteQty,
      marginOcoOrderOrderReportsExecutedQty = marginOcoOrderOrderReportsExecutedQty,
      marginOcoOrderOrderReportsOrderId = marginOcoOrderOrderReportsOrderId,
      marginOcoOrderOrderReportsOrderListId = marginOcoOrderOrderReportsOrderListId,
      marginOcoOrderOrderReportsOrigClientOrderId = marginOcoOrderOrderReportsOrigClientOrderId,
      marginOcoOrderOrderReportsOrigQty = marginOcoOrderOrderReportsOrigQty,
      marginOcoOrderOrderReportsPrice = marginOcoOrderOrderReportsPrice,
      marginOcoOrderOrderReportsSide = marginOcoOrderOrderReportsSide,
      marginOcoOrderOrderReportsStatus = marginOcoOrderOrderReportsStatus,
      marginOcoOrderOrderReportsStopPrice = marginOcoOrderOrderReportsStopPrice,
      marginOcoOrderOrderReportsSymbol = marginOcoOrderOrderReportsSymbol,
      marginOcoOrderOrderReportsTimeInForce = marginOcoOrderOrderReportsTimeInForce,
      marginOcoOrderOrderReportsType = marginOcoOrderOrderReportsType
    }

-- | Defines the object schema located at @components.schemas.marginOcoOrder.properties.orders.items@ in the specification.
data MarginOcoOrderOrders = MarginOcoOrderOrders
  { -- | clientOrderId
    marginOcoOrderOrdersClientOrderId :: Data.Text.Internal.Text,
    -- | orderId
    marginOcoOrderOrdersOrderId :: GHC.Int.Int64,
    -- | symbol
    marginOcoOrderOrdersSymbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MarginOcoOrderOrders where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrdersClientOrderId obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrdersOrderId obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOcoOrderOrdersSymbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrdersClientOrderId obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOcoOrderOrdersOrderId obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOcoOrderOrdersSymbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON MarginOcoOrderOrders where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MarginOcoOrderOrders" (\obj -> ((GHC.Base.pure MarginOcoOrderOrders GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'MarginOcoOrderOrders' with all required fields.
mkMarginOcoOrderOrders ::
  -- | 'marginOcoOrderOrdersClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'marginOcoOrderOrdersOrderId'
  GHC.Int.Int64 ->
  -- | 'marginOcoOrderOrdersSymbol'
  Data.Text.Internal.Text ->
  MarginOcoOrderOrders
mkMarginOcoOrderOrders marginOcoOrderOrdersClientOrderId marginOcoOrderOrdersOrderId marginOcoOrderOrdersSymbol =
  MarginOcoOrderOrders
    { marginOcoOrderOrdersClientOrderId = marginOcoOrderOrdersClientOrderId,
      marginOcoOrderOrdersOrderId = marginOcoOrderOrdersOrderId,
      marginOcoOrderOrdersSymbol = marginOcoOrderOrdersSymbol
    }
