{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema MyTrade
module Binance.Types.MyTrade where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.myTrade@ in the specification.
data MyTrade = MyTrade
  { -- | commission
    myTradeCommission :: Data.Text.Internal.Text,
    -- | commissionAsset
    myTradeCommissionAsset :: Data.Text.Internal.Text,
    -- | id: Trade id
    myTradeId :: GHC.Int.Int64,
    -- | isBestMatch
    myTradeIsBestMatch :: GHC.Types.Bool,
    -- | isBuyer
    myTradeIsBuyer :: GHC.Types.Bool,
    -- | isMaker
    myTradeIsMaker :: GHC.Types.Bool,
    -- | orderId
    myTradeOrderId :: GHC.Int.Int64,
    -- | orderListId
    myTradeOrderListId :: GHC.Int.Int64,
    -- | price: Price
    myTradePrice :: Data.Text.Internal.Text,
    -- | qty: Amount of base asset
    myTradeQty :: Data.Text.Internal.Text,
    -- | quoteQty: Amount of quote asset
    myTradeQuoteQty :: Data.Text.Internal.Text,
    -- | symbol
    myTradeSymbol :: Data.Text.Internal.Text,
    -- | time: Trade timestamp
    myTradeTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MyTrade where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["commission" Data.Aeson.Types.ToJSON..= myTradeCommission obj] : ["commissionAsset" Data.Aeson.Types.ToJSON..= myTradeCommissionAsset obj] : ["id" Data.Aeson.Types.ToJSON..= myTradeId obj] : ["isBestMatch" Data.Aeson.Types.ToJSON..= myTradeIsBestMatch obj] : ["isBuyer" Data.Aeson.Types.ToJSON..= myTradeIsBuyer obj] : ["isMaker" Data.Aeson.Types.ToJSON..= myTradeIsMaker obj] : ["orderId" Data.Aeson.Types.ToJSON..= myTradeOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= myTradeOrderListId obj] : ["price" Data.Aeson.Types.ToJSON..= myTradePrice obj] : ["qty" Data.Aeson.Types.ToJSON..= myTradeQty obj] : ["quoteQty" Data.Aeson.Types.ToJSON..= myTradeQuoteQty obj] : ["symbol" Data.Aeson.Types.ToJSON..= myTradeSymbol obj] : ["time" Data.Aeson.Types.ToJSON..= myTradeTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["commission" Data.Aeson.Types.ToJSON..= myTradeCommission obj] : ["commissionAsset" Data.Aeson.Types.ToJSON..= myTradeCommissionAsset obj] : ["id" Data.Aeson.Types.ToJSON..= myTradeId obj] : ["isBestMatch" Data.Aeson.Types.ToJSON..= myTradeIsBestMatch obj] : ["isBuyer" Data.Aeson.Types.ToJSON..= myTradeIsBuyer obj] : ["isMaker" Data.Aeson.Types.ToJSON..= myTradeIsMaker obj] : ["orderId" Data.Aeson.Types.ToJSON..= myTradeOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= myTradeOrderListId obj] : ["price" Data.Aeson.Types.ToJSON..= myTradePrice obj] : ["qty" Data.Aeson.Types.ToJSON..= myTradeQty obj] : ["quoteQty" Data.Aeson.Types.ToJSON..= myTradeQuoteQty obj] : ["symbol" Data.Aeson.Types.ToJSON..= myTradeSymbol obj] : ["time" Data.Aeson.Types.ToJSON..= myTradeTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON MyTrade where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MyTrade" (\obj -> ((((((((((((GHC.Base.pure MyTrade GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "commission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "commissionAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBestMatch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBuyer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMaker")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "qty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))

-- | Create a new 'MyTrade' with all required fields.
mkMyTrade ::
  -- | 'myTradeCommission'
  Data.Text.Internal.Text ->
  -- | 'myTradeCommissionAsset'
  Data.Text.Internal.Text ->
  -- | 'myTradeId'
  GHC.Int.Int64 ->
  -- | 'myTradeIsBestMatch'
  GHC.Types.Bool ->
  -- | 'myTradeIsBuyer'
  GHC.Types.Bool ->
  -- | 'myTradeIsMaker'
  GHC.Types.Bool ->
  -- | 'myTradeOrderId'
  GHC.Int.Int64 ->
  -- | 'myTradeOrderListId'
  GHC.Int.Int64 ->
  -- | 'myTradePrice'
  Data.Text.Internal.Text ->
  -- | 'myTradeQty'
  Data.Text.Internal.Text ->
  -- | 'myTradeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'myTradeSymbol'
  Data.Text.Internal.Text ->
  -- | 'myTradeTime'
  GHC.Int.Int64 ->
  MyTrade
mkMyTrade myTradeCommission myTradeCommissionAsset myTradeId myTradeIsBestMatch myTradeIsBuyer myTradeIsMaker myTradeOrderId myTradeOrderListId myTradePrice myTradeQty myTradeQuoteQty myTradeSymbol myTradeTime =
  MyTrade
    { myTradeCommission = myTradeCommission,
      myTradeCommissionAsset = myTradeCommissionAsset,
      myTradeId = myTradeId,
      myTradeIsBestMatch = myTradeIsBestMatch,
      myTradeIsBuyer = myTradeIsBuyer,
      myTradeIsMaker = myTradeIsMaker,
      myTradeOrderId = myTradeOrderId,
      myTradeOrderListId = myTradeOrderListId,
      myTradePrice = myTradePrice,
      myTradeQty = myTradeQty,
      myTradeQuoteQty = myTradeQuoteQty,
      myTradeSymbol = myTradeSymbol,
      myTradeTime = myTradeTime
    }
