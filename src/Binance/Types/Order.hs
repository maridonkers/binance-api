{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Order
module Binance.Types.Order where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.order@ in the specification.
data Order = Order
  { -- | clientOrderId
    orderClientOrderId :: Data.Text.Internal.Text,
    -- | cummulativeQuoteQty
    orderCummulativeQuoteQty :: Data.Text.Internal.Text,
    -- | executedQty
    orderExecutedQty :: Data.Text.Internal.Text,
    -- | orderId
    orderOrderId :: GHC.Int.Int64,
    -- | orderListId: Unless OCO, value will be -1
    orderOrderListId :: GHC.Int.Int64,
    -- | origClientOrderId
    orderOrigClientOrderId :: Data.Text.Internal.Text,
    -- | origQty
    orderOrigQty :: Data.Text.Internal.Text,
    -- | price
    orderPrice :: Data.Text.Internal.Text,
    -- | side
    orderSide :: Data.Text.Internal.Text,
    -- | status
    orderStatus :: Data.Text.Internal.Text,
    -- | symbol
    orderSymbol :: Data.Text.Internal.Text,
    -- | timeInForce
    orderTimeInForce :: Data.Text.Internal.Text,
    -- | type
    orderType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Order where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= orderClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= orderCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= orderExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= orderOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= orderOrderListId obj] : ["origClientOrderId" Data.Aeson.Types.ToJSON..= orderOrigClientOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= orderOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= orderPrice obj] : ["side" Data.Aeson.Types.ToJSON..= orderSide obj] : ["status" Data.Aeson.Types.ToJSON..= orderStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= orderSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= orderTimeInForce obj] : ["type" Data.Aeson.Types.ToJSON..= orderType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= orderClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= orderCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= orderExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= orderOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= orderOrderListId obj] : ["origClientOrderId" Data.Aeson.Types.ToJSON..= orderOrigClientOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= orderOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= orderPrice obj] : ["side" Data.Aeson.Types.ToJSON..= orderSide obj] : ["status" Data.Aeson.Types.ToJSON..= orderStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= orderSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= orderTimeInForce obj] : ["type" Data.Aeson.Types.ToJSON..= orderType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Order where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Order" (\obj -> ((((((((((((GHC.Base.pure Order GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cummulativeQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "executedQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'Order' with all required fields.
mkOrder ::
  -- | 'orderClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'orderCummulativeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'orderExecutedQty'
  Data.Text.Internal.Text ->
  -- | 'orderOrderId'
  GHC.Int.Int64 ->
  -- | 'orderOrderListId'
  GHC.Int.Int64 ->
  -- | 'orderOrigClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'orderOrigQty'
  Data.Text.Internal.Text ->
  -- | 'orderPrice'
  Data.Text.Internal.Text ->
  -- | 'orderSide'
  Data.Text.Internal.Text ->
  -- | 'orderStatus'
  Data.Text.Internal.Text ->
  -- | 'orderSymbol'
  Data.Text.Internal.Text ->
  -- | 'orderTimeInForce'
  Data.Text.Internal.Text ->
  -- | 'orderType'
  Data.Text.Internal.Text ->
  Order
mkOrder orderClientOrderId orderCummulativeQuoteQty orderExecutedQty orderOrderId orderOrderListId orderOrigClientOrderId orderOrigQty orderPrice orderSide orderStatus orderSymbol orderTimeInForce orderType =
  Order
    { orderClientOrderId = orderClientOrderId,
      orderCummulativeQuoteQty = orderCummulativeQuoteQty,
      orderExecutedQty = orderExecutedQty,
      orderOrderId = orderOrderId,
      orderOrderListId = orderOrderListId,
      orderOrigClientOrderId = orderOrigClientOrderId,
      orderOrigQty = orderOrigQty,
      orderPrice = orderPrice,
      orderSide = orderSide,
      orderStatus = orderStatus,
      orderSymbol = orderSymbol,
      orderTimeInForce = orderTimeInForce,
      orderType = orderType
    }
