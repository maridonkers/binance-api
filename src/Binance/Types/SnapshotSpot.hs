{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SnapshotSpot
module Binance.Types.SnapshotSpot where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.snapshotSpot@ in the specification.
data SnapshotSpot = SnapshotSpot
  { -- | code
    snapshotSpotCode :: GHC.Int.Int64,
    -- | msg
    snapshotSpotMsg :: Data.Text.Internal.Text,
    -- | snapshotVos
    snapshotSpotSnapshotVos :: ([SnapshotSpotSnapshotVos])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SnapshotSpot where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= snapshotSpotCode obj] : ["msg" Data.Aeson.Types.ToJSON..= snapshotSpotMsg obj] : ["snapshotVos" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVos obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= snapshotSpotCode obj] : ["msg" Data.Aeson.Types.ToJSON..= snapshotSpotMsg obj] : ["snapshotVos" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVos obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SnapshotSpot where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SnapshotSpot" (\obj -> ((GHC.Base.pure SnapshotSpot GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "msg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "snapshotVos"))

-- | Create a new 'SnapshotSpot' with all required fields.
mkSnapshotSpot ::
  -- | 'snapshotSpotCode'
  GHC.Int.Int64 ->
  -- | 'snapshotSpotMsg'
  Data.Text.Internal.Text ->
  -- | 'snapshotSpotSnapshotVos'
  [SnapshotSpotSnapshotVos] ->
  SnapshotSpot
mkSnapshotSpot snapshotSpotCode snapshotSpotMsg snapshotSpotSnapshotVos =
  SnapshotSpot
    { snapshotSpotCode = snapshotSpotCode,
      snapshotSpotMsg = snapshotSpotMsg,
      snapshotSpotSnapshotVos = snapshotSpotSnapshotVos
    }

-- | Defines the object schema located at @components.schemas.snapshotSpot.properties.snapshotVos.items@ in the specification.
data SnapshotSpotSnapshotVos = SnapshotSpotSnapshotVos
  { -- | data
    snapshotSpotSnapshotVosData :: SnapshotSpotSnapshotVosData,
    -- | type
    snapshotSpotSnapshotVosType :: Data.Text.Internal.Text,
    -- | updateTime
    snapshotSpotSnapshotVosUpdateTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SnapshotSpotSnapshotVos where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosData obj] : ["type" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosType obj] : ["updateTime" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosUpdateTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosData obj] : ["type" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosType obj] : ["updateTime" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosUpdateTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SnapshotSpotSnapshotVos where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SnapshotSpotSnapshotVos" (\obj -> ((GHC.Base.pure SnapshotSpotSnapshotVos GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updateTime"))

-- | Create a new 'SnapshotSpotSnapshotVos' with all required fields.
mkSnapshotSpotSnapshotVos ::
  -- | 'snapshotSpotSnapshotVosData'
  SnapshotSpotSnapshotVosData ->
  -- | 'snapshotSpotSnapshotVosType'
  Data.Text.Internal.Text ->
  -- | 'snapshotSpotSnapshotVosUpdateTime'
  GHC.Int.Int64 ->
  SnapshotSpotSnapshotVos
mkSnapshotSpotSnapshotVos snapshotSpotSnapshotVosData snapshotSpotSnapshotVosType snapshotSpotSnapshotVosUpdateTime =
  SnapshotSpotSnapshotVos
    { snapshotSpotSnapshotVosData = snapshotSpotSnapshotVosData,
      snapshotSpotSnapshotVosType = snapshotSpotSnapshotVosType,
      snapshotSpotSnapshotVosUpdateTime = snapshotSpotSnapshotVosUpdateTime
    }

-- | Defines the object schema located at @components.schemas.snapshotSpot.properties.snapshotVos.items.properties.data@ in the specification.
data SnapshotSpotSnapshotVosData = SnapshotSpotSnapshotVosData
  { -- | balances
    snapshotSpotSnapshotVosDataBalances :: ([SnapshotSpotSnapshotVosDataBalances]),
    -- | totalAssetOfBtc
    snapshotSpotSnapshotVosDataTotalAssetOfBtc :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SnapshotSpotSnapshotVosData where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["balances" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataBalances obj] : ["totalAssetOfBtc" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataTotalAssetOfBtc obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["balances" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataBalances obj] : ["totalAssetOfBtc" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataTotalAssetOfBtc obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SnapshotSpotSnapshotVosData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SnapshotSpotSnapshotVosData" (\obj -> (GHC.Base.pure SnapshotSpotSnapshotVosData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balances")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalAssetOfBtc"))

-- | Create a new 'SnapshotSpotSnapshotVosData' with all required fields.
mkSnapshotSpotSnapshotVosData ::
  -- | 'snapshotSpotSnapshotVosDataBalances'
  [SnapshotSpotSnapshotVosDataBalances] ->
  -- | 'snapshotSpotSnapshotVosDataTotalAssetOfBtc'
  Data.Text.Internal.Text ->
  SnapshotSpotSnapshotVosData
mkSnapshotSpotSnapshotVosData snapshotSpotSnapshotVosDataBalances snapshotSpotSnapshotVosDataTotalAssetOfBtc =
  SnapshotSpotSnapshotVosData
    { snapshotSpotSnapshotVosDataBalances = snapshotSpotSnapshotVosDataBalances,
      snapshotSpotSnapshotVosDataTotalAssetOfBtc = snapshotSpotSnapshotVosDataTotalAssetOfBtc
    }

-- | Defines the object schema located at @components.schemas.snapshotSpot.properties.snapshotVos.items.properties.data.properties.balances.items@ in the specification.
data SnapshotSpotSnapshotVosDataBalances = SnapshotSpotSnapshotVosDataBalances
  { -- | asset
    snapshotSpotSnapshotVosDataBalancesAsset :: Data.Text.Internal.Text,
    -- | free
    snapshotSpotSnapshotVosDataBalancesFree :: Data.Text.Internal.Text,
    -- | locked
    snapshotSpotSnapshotVosDataBalancesLocked :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SnapshotSpotSnapshotVosDataBalances where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataBalancesAsset obj] : ["free" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataBalancesFree obj] : ["locked" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataBalancesLocked obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataBalancesAsset obj] : ["free" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataBalancesFree obj] : ["locked" Data.Aeson.Types.ToJSON..= snapshotSpotSnapshotVosDataBalancesLocked obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SnapshotSpotSnapshotVosDataBalances where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SnapshotSpotSnapshotVosDataBalances" (\obj -> ((GHC.Base.pure SnapshotSpotSnapshotVosDataBalances GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "free")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "locked"))

-- | Create a new 'SnapshotSpotSnapshotVosDataBalances' with all required fields.
mkSnapshotSpotSnapshotVosDataBalances ::
  -- | 'snapshotSpotSnapshotVosDataBalancesAsset'
  Data.Text.Internal.Text ->
  -- | 'snapshotSpotSnapshotVosDataBalancesFree'
  Data.Text.Internal.Text ->
  -- | 'snapshotSpotSnapshotVosDataBalancesLocked'
  Data.Text.Internal.Text ->
  SnapshotSpotSnapshotVosDataBalances
mkSnapshotSpotSnapshotVosDataBalances snapshotSpotSnapshotVosDataBalancesAsset snapshotSpotSnapshotVosDataBalancesFree snapshotSpotSnapshotVosDataBalancesLocked =
  SnapshotSpotSnapshotVosDataBalances
    { snapshotSpotSnapshotVosDataBalancesAsset = snapshotSpotSnapshotVosDataBalancesAsset,
      snapshotSpotSnapshotVosDataBalancesFree = snapshotSpotSnapshotVosDataBalancesFree,
      snapshotSpotSnapshotVosDataBalancesLocked = snapshotSpotSnapshotVosDataBalancesLocked
    }
