{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema MarginOrderResponseResult
module Binance.Types.MarginOrderResponseResult where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.marginOrderResponseResult@ in the specification.
data MarginOrderResponseResult = MarginOrderResponseResult
  { -- | clientOrderId
    marginOrderResponseResultClientOrderId :: Data.Text.Internal.Text,
    -- | cummulativeQuoteQty
    marginOrderResponseResultCummulativeQuoteQty :: Data.Text.Internal.Text,
    -- | executedQty
    marginOrderResponseResultExecutedQty :: Data.Text.Internal.Text,
    -- | isIsolated
    marginOrderResponseResultIsIsolated :: GHC.Types.Bool,
    -- | orderId
    marginOrderResponseResultOrderId :: GHC.Int.Int64,
    -- | origQty
    marginOrderResponseResultOrigQty :: Data.Text.Internal.Text,
    -- | price
    marginOrderResponseResultPrice :: Data.Text.Internal.Text,
    -- | side
    marginOrderResponseResultSide :: Data.Text.Internal.Text,
    -- | status
    marginOrderResponseResultStatus :: Data.Text.Internal.Text,
    -- | symbol
    marginOrderResponseResultSymbol :: Data.Text.Internal.Text,
    -- | timeInForce
    marginOrderResponseResultTimeInForce :: Data.Text.Internal.Text,
    -- | transactTime
    marginOrderResponseResultTransactTime :: GHC.Int.Int64,
    -- | type
    marginOrderResponseResultType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MarginOrderResponseResult where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOrderResponseResultClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= marginOrderResponseResultCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= marginOrderResponseResultExecutedQty obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= marginOrderResponseResultIsIsolated obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOrderResponseResultOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= marginOrderResponseResultOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= marginOrderResponseResultPrice obj] : ["side" Data.Aeson.Types.ToJSON..= marginOrderResponseResultSide obj] : ["status" Data.Aeson.Types.ToJSON..= marginOrderResponseResultStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOrderResponseResultSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= marginOrderResponseResultTimeInForce obj] : ["transactTime" Data.Aeson.Types.ToJSON..= marginOrderResponseResultTransactTime obj] : ["type" Data.Aeson.Types.ToJSON..= marginOrderResponseResultType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOrderResponseResultClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= marginOrderResponseResultCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= marginOrderResponseResultExecutedQty obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= marginOrderResponseResultIsIsolated obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOrderResponseResultOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= marginOrderResponseResultOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= marginOrderResponseResultPrice obj] : ["side" Data.Aeson.Types.ToJSON..= marginOrderResponseResultSide obj] : ["status" Data.Aeson.Types.ToJSON..= marginOrderResponseResultStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOrderResponseResultSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= marginOrderResponseResultTimeInForce obj] : ["transactTime" Data.Aeson.Types.ToJSON..= marginOrderResponseResultTransactTime obj] : ["type" Data.Aeson.Types.ToJSON..= marginOrderResponseResultType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON MarginOrderResponseResult where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MarginOrderResponseResult" (\obj -> ((((((((((((GHC.Base.pure MarginOrderResponseResult GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cummulativeQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "executedQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isIsolated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'MarginOrderResponseResult' with all required fields.
mkMarginOrderResponseResult ::
  -- | 'marginOrderResponseResultClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseResultCummulativeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseResultExecutedQty'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseResultIsIsolated'
  GHC.Types.Bool ->
  -- | 'marginOrderResponseResultOrderId'
  GHC.Int.Int64 ->
  -- | 'marginOrderResponseResultOrigQty'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseResultPrice'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseResultSide'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseResultStatus'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseResultSymbol'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseResultTimeInForce'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseResultTransactTime'
  GHC.Int.Int64 ->
  -- | 'marginOrderResponseResultType'
  Data.Text.Internal.Text ->
  MarginOrderResponseResult
mkMarginOrderResponseResult marginOrderResponseResultClientOrderId marginOrderResponseResultCummulativeQuoteQty marginOrderResponseResultExecutedQty marginOrderResponseResultIsIsolated marginOrderResponseResultOrderId marginOrderResponseResultOrigQty marginOrderResponseResultPrice marginOrderResponseResultSide marginOrderResponseResultStatus marginOrderResponseResultSymbol marginOrderResponseResultTimeInForce marginOrderResponseResultTransactTime marginOrderResponseResultType =
  MarginOrderResponseResult
    { marginOrderResponseResultClientOrderId = marginOrderResponseResultClientOrderId,
      marginOrderResponseResultCummulativeQuoteQty = marginOrderResponseResultCummulativeQuoteQty,
      marginOrderResponseResultExecutedQty = marginOrderResponseResultExecutedQty,
      marginOrderResponseResultIsIsolated = marginOrderResponseResultIsIsolated,
      marginOrderResponseResultOrderId = marginOrderResponseResultOrderId,
      marginOrderResponseResultOrigQty = marginOrderResponseResultOrigQty,
      marginOrderResponseResultPrice = marginOrderResponseResultPrice,
      marginOrderResponseResultSide = marginOrderResponseResultSide,
      marginOrderResponseResultStatus = marginOrderResponseResultStatus,
      marginOrderResponseResultSymbol = marginOrderResponseResultSymbol,
      marginOrderResponseResultTimeInForce = marginOrderResponseResultTimeInForce,
      marginOrderResponseResultTransactTime = marginOrderResponseResultTransactTime,
      marginOrderResponseResultType = marginOrderResponseResultType
    }
