{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema OrderResponseResult
module Binance.Types.OrderResponseResult where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.orderResponseResult@ in the specification.
data OrderResponseResult = OrderResponseResult
  { -- | clientOrderId
    orderResponseResultClientOrderId :: Data.Text.Internal.Text,
    -- | cummulativeQuoteQty
    orderResponseResultCummulativeQuoteQty :: Data.Text.Internal.Text,
    -- | executedQty
    orderResponseResultExecutedQty :: Data.Text.Internal.Text,
    -- | orderId
    orderResponseResultOrderId :: GHC.Int.Int64,
    -- | orderListId
    orderResponseResultOrderListId :: GHC.Int.Int64,
    -- | origQty
    orderResponseResultOrigQty :: Data.Text.Internal.Text,
    -- | price
    orderResponseResultPrice :: Data.Text.Internal.Text,
    -- | side
    orderResponseResultSide :: Data.Text.Internal.Text,
    -- | status
    orderResponseResultStatus :: Data.Text.Internal.Text,
    -- | strategyId
    orderResponseResultStrategyId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | strategyType
    orderResponseResultStrategyType :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | symbol
    orderResponseResultSymbol :: Data.Text.Internal.Text,
    -- | timeInForce
    orderResponseResultTimeInForce :: Data.Text.Internal.Text,
    -- | transactTime
    orderResponseResultTransactTime :: GHC.Int.Int64,
    -- | type
    orderResponseResultType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OrderResponseResult where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= orderResponseResultClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= orderResponseResultCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= orderResponseResultExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= orderResponseResultOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= orderResponseResultOrderListId obj] : ["origQty" Data.Aeson.Types.ToJSON..= orderResponseResultOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= orderResponseResultPrice obj] : ["side" Data.Aeson.Types.ToJSON..= orderResponseResultSide obj] : ["status" Data.Aeson.Types.ToJSON..= orderResponseResultStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strategyId" Data.Aeson.Types.ToJSON..=)) (orderResponseResultStrategyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strategyType" Data.Aeson.Types.ToJSON..=)) (orderResponseResultStrategyType obj) : ["symbol" Data.Aeson.Types.ToJSON..= orderResponseResultSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= orderResponseResultTimeInForce obj] : ["transactTime" Data.Aeson.Types.ToJSON..= orderResponseResultTransactTime obj] : ["type" Data.Aeson.Types.ToJSON..= orderResponseResultType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= orderResponseResultClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= orderResponseResultCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= orderResponseResultExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= orderResponseResultOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= orderResponseResultOrderListId obj] : ["origQty" Data.Aeson.Types.ToJSON..= orderResponseResultOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= orderResponseResultPrice obj] : ["side" Data.Aeson.Types.ToJSON..= orderResponseResultSide obj] : ["status" Data.Aeson.Types.ToJSON..= orderResponseResultStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strategyId" Data.Aeson.Types.ToJSON..=)) (orderResponseResultStrategyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strategyType" Data.Aeson.Types.ToJSON..=)) (orderResponseResultStrategyType obj) : ["symbol" Data.Aeson.Types.ToJSON..= orderResponseResultSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= orderResponseResultTimeInForce obj] : ["transactTime" Data.Aeson.Types.ToJSON..= orderResponseResultTransactTime obj] : ["type" Data.Aeson.Types.ToJSON..= orderResponseResultType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OrderResponseResult where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderResponseResult" (\obj -> ((((((((((((((GHC.Base.pure OrderResponseResult GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cummulativeQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "executedQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "strategyId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "strategyType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'OrderResponseResult' with all required fields.
mkOrderResponseResult ::
  -- | 'orderResponseResultClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'orderResponseResultCummulativeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'orderResponseResultExecutedQty'
  Data.Text.Internal.Text ->
  -- | 'orderResponseResultOrderId'
  GHC.Int.Int64 ->
  -- | 'orderResponseResultOrderListId'
  GHC.Int.Int64 ->
  -- | 'orderResponseResultOrigQty'
  Data.Text.Internal.Text ->
  -- | 'orderResponseResultPrice'
  Data.Text.Internal.Text ->
  -- | 'orderResponseResultSide'
  Data.Text.Internal.Text ->
  -- | 'orderResponseResultStatus'
  Data.Text.Internal.Text ->
  -- | 'orderResponseResultSymbol'
  Data.Text.Internal.Text ->
  -- | 'orderResponseResultTimeInForce'
  Data.Text.Internal.Text ->
  -- | 'orderResponseResultTransactTime'
  GHC.Int.Int64 ->
  -- | 'orderResponseResultType'
  Data.Text.Internal.Text ->
  OrderResponseResult
mkOrderResponseResult orderResponseResultClientOrderId orderResponseResultCummulativeQuoteQty orderResponseResultExecutedQty orderResponseResultOrderId orderResponseResultOrderListId orderResponseResultOrigQty orderResponseResultPrice orderResponseResultSide orderResponseResultStatus orderResponseResultSymbol orderResponseResultTimeInForce orderResponseResultTransactTime orderResponseResultType =
  OrderResponseResult
    { orderResponseResultClientOrderId = orderResponseResultClientOrderId,
      orderResponseResultCummulativeQuoteQty = orderResponseResultCummulativeQuoteQty,
      orderResponseResultExecutedQty = orderResponseResultExecutedQty,
      orderResponseResultOrderId = orderResponseResultOrderId,
      orderResponseResultOrderListId = orderResponseResultOrderListId,
      orderResponseResultOrigQty = orderResponseResultOrigQty,
      orderResponseResultPrice = orderResponseResultPrice,
      orderResponseResultSide = orderResponseResultSide,
      orderResponseResultStatus = orderResponseResultStatus,
      orderResponseResultStrategyId = GHC.Maybe.Nothing,
      orderResponseResultStrategyType = GHC.Maybe.Nothing,
      orderResponseResultSymbol = orderResponseResultSymbol,
      orderResponseResultTimeInForce = orderResponseResultTimeInForce,
      orderResponseResultTransactTime = orderResponseResultTransactTime,
      orderResponseResultType = orderResponseResultType
    }
