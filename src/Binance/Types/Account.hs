{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Account
module Binance.Types.Account where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account@ in the specification.
data Account = Account
  { -- | accountType
    accountAccountType :: Data.Text.Internal.Text,
    -- | balances
    accountBalances :: ([AccountBalances]),
    -- | brokered
    accountBrokered :: GHC.Types.Bool,
    -- | buyerCommission
    accountBuyerCommission :: GHC.Int.Int64,
    -- | canDeposit
    accountCanDeposit :: GHC.Types.Bool,
    -- | canTrade
    accountCanTrade :: GHC.Types.Bool,
    -- | canWithdraw
    accountCanWithdraw :: GHC.Types.Bool,
    -- | makerCommission
    accountMakerCommission :: GHC.Int.Int64,
    -- | sellerCommission
    accountSellerCommission :: GHC.Int.Int64,
    -- | takerCommission
    accountTakerCommission :: GHC.Int.Int64,
    -- | updateTime
    accountUpdateTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Account where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["accountType" Data.Aeson.Types.ToJSON..= accountAccountType obj] : ["balances" Data.Aeson.Types.ToJSON..= accountBalances obj] : ["brokered" Data.Aeson.Types.ToJSON..= accountBrokered obj] : ["buyerCommission" Data.Aeson.Types.ToJSON..= accountBuyerCommission obj] : ["canDeposit" Data.Aeson.Types.ToJSON..= accountCanDeposit obj] : ["canTrade" Data.Aeson.Types.ToJSON..= accountCanTrade obj] : ["canWithdraw" Data.Aeson.Types.ToJSON..= accountCanWithdraw obj] : ["makerCommission" Data.Aeson.Types.ToJSON..= accountMakerCommission obj] : ["sellerCommission" Data.Aeson.Types.ToJSON..= accountSellerCommission obj] : ["takerCommission" Data.Aeson.Types.ToJSON..= accountTakerCommission obj] : ["updateTime" Data.Aeson.Types.ToJSON..= accountUpdateTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["accountType" Data.Aeson.Types.ToJSON..= accountAccountType obj] : ["balances" Data.Aeson.Types.ToJSON..= accountBalances obj] : ["brokered" Data.Aeson.Types.ToJSON..= accountBrokered obj] : ["buyerCommission" Data.Aeson.Types.ToJSON..= accountBuyerCommission obj] : ["canDeposit" Data.Aeson.Types.ToJSON..= accountCanDeposit obj] : ["canTrade" Data.Aeson.Types.ToJSON..= accountCanTrade obj] : ["canWithdraw" Data.Aeson.Types.ToJSON..= accountCanWithdraw obj] : ["makerCommission" Data.Aeson.Types.ToJSON..= accountMakerCommission obj] : ["sellerCommission" Data.Aeson.Types.ToJSON..= accountSellerCommission obj] : ["takerCommission" Data.Aeson.Types.ToJSON..= accountTakerCommission obj] : ["updateTime" Data.Aeson.Types.ToJSON..= accountUpdateTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Account where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Account" (\obj -> ((((((((((GHC.Base.pure Account GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "accountType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balances")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "brokered")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "buyerCommission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "canDeposit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "canTrade")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "canWithdraw")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "makerCommission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sellerCommission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "takerCommission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updateTime"))

-- | Create a new 'Account' with all required fields.
mkAccount ::
  -- | 'accountAccountType'
  Data.Text.Internal.Text ->
  -- | 'accountBalances'
  [AccountBalances] ->
  -- | 'accountBrokered'
  GHC.Types.Bool ->
  -- | 'accountBuyerCommission'
  GHC.Int.Int64 ->
  -- | 'accountCanDeposit'
  GHC.Types.Bool ->
  -- | 'accountCanTrade'
  GHC.Types.Bool ->
  -- | 'accountCanWithdraw'
  GHC.Types.Bool ->
  -- | 'accountMakerCommission'
  GHC.Int.Int64 ->
  -- | 'accountSellerCommission'
  GHC.Int.Int64 ->
  -- | 'accountTakerCommission'
  GHC.Int.Int64 ->
  -- | 'accountUpdateTime'
  GHC.Int.Int64 ->
  Account
mkAccount accountAccountType accountBalances accountBrokered accountBuyerCommission accountCanDeposit accountCanTrade accountCanWithdraw accountMakerCommission accountSellerCommission accountTakerCommission accountUpdateTime =
  Account
    { accountAccountType = accountAccountType,
      accountBalances = accountBalances,
      accountBrokered = accountBrokered,
      accountBuyerCommission = accountBuyerCommission,
      accountCanDeposit = accountCanDeposit,
      accountCanTrade = accountCanTrade,
      accountCanWithdraw = accountCanWithdraw,
      accountMakerCommission = accountMakerCommission,
      accountSellerCommission = accountSellerCommission,
      accountTakerCommission = accountTakerCommission,
      accountUpdateTime = accountUpdateTime
    }

-- | Defines the object schema located at @components.schemas.account.properties.balances.items@ in the specification.
data AccountBalances = AccountBalances
  { -- | asset
    accountBalancesAsset :: Data.Text.Internal.Text,
    -- | free
    accountBalancesFree :: Data.Text.Internal.Text,
    -- | locked
    accountBalancesLocked :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountBalances where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= accountBalancesAsset obj] : ["free" Data.Aeson.Types.ToJSON..= accountBalancesFree obj] : ["locked" Data.Aeson.Types.ToJSON..= accountBalancesLocked obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= accountBalancesAsset obj] : ["free" Data.Aeson.Types.ToJSON..= accountBalancesFree obj] : ["locked" Data.Aeson.Types.ToJSON..= accountBalancesLocked obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountBalances where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBalances" (\obj -> ((GHC.Base.pure AccountBalances GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "free")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "locked"))

-- | Create a new 'AccountBalances' with all required fields.
mkAccountBalances ::
  -- | 'accountBalancesAsset'
  Data.Text.Internal.Text ->
  -- | 'accountBalancesFree'
  Data.Text.Internal.Text ->
  -- | 'accountBalancesLocked'
  Data.Text.Internal.Text ->
  AccountBalances
mkAccountBalances accountBalancesAsset accountBalancesFree accountBalancesLocked =
  AccountBalances
    { accountBalancesAsset = accountBalancesAsset,
      accountBalancesFree = accountBalancesFree,
      accountBalancesLocked = accountBalancesLocked
    }
