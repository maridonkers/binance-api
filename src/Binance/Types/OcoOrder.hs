{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema OcoOrder
module Binance.Types.OcoOrder where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ocoOrder@ in the specification.
data OcoOrder = OcoOrder
  { -- | contingencyType
    ocoOrderContingencyType :: Data.Text.Internal.Text,
    -- | listClientOrderId
    ocoOrderListClientOrderId :: Data.Text.Internal.Text,
    -- | listOrderStatus
    ocoOrderListOrderStatus :: Data.Text.Internal.Text,
    -- | listStatusType
    ocoOrderListStatusType :: Data.Text.Internal.Text,
    -- | orderListId
    ocoOrderOrderListId :: GHC.Int.Int64,
    -- | orderReports
    ocoOrderOrderReports :: ([OcoOrderOrderReports]),
    -- | orders
    ocoOrderOrders :: ([OcoOrderOrders]),
    -- | symbol
    ocoOrderSymbol :: Data.Text.Internal.Text,
    -- | transactionTime
    ocoOrderTransactionTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OcoOrder where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["contingencyType" Data.Aeson.Types.ToJSON..= ocoOrderContingencyType obj] : ["listClientOrderId" Data.Aeson.Types.ToJSON..= ocoOrderListClientOrderId obj] : ["listOrderStatus" Data.Aeson.Types.ToJSON..= ocoOrderListOrderStatus obj] : ["listStatusType" Data.Aeson.Types.ToJSON..= ocoOrderListStatusType obj] : ["orderListId" Data.Aeson.Types.ToJSON..= ocoOrderOrderListId obj] : ["orderReports" Data.Aeson.Types.ToJSON..= ocoOrderOrderReports obj] : ["orders" Data.Aeson.Types.ToJSON..= ocoOrderOrders obj] : ["symbol" Data.Aeson.Types.ToJSON..= ocoOrderSymbol obj] : ["transactionTime" Data.Aeson.Types.ToJSON..= ocoOrderTransactionTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["contingencyType" Data.Aeson.Types.ToJSON..= ocoOrderContingencyType obj] : ["listClientOrderId" Data.Aeson.Types.ToJSON..= ocoOrderListClientOrderId obj] : ["listOrderStatus" Data.Aeson.Types.ToJSON..= ocoOrderListOrderStatus obj] : ["listStatusType" Data.Aeson.Types.ToJSON..= ocoOrderListStatusType obj] : ["orderListId" Data.Aeson.Types.ToJSON..= ocoOrderOrderListId obj] : ["orderReports" Data.Aeson.Types.ToJSON..= ocoOrderOrderReports obj] : ["orders" Data.Aeson.Types.ToJSON..= ocoOrderOrders obj] : ["symbol" Data.Aeson.Types.ToJSON..= ocoOrderSymbol obj] : ["transactionTime" Data.Aeson.Types.ToJSON..= ocoOrderTransactionTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OcoOrder where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OcoOrder" (\obj -> ((((((((GHC.Base.pure OcoOrder GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "contingencyType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listOrderStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listStatusType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderReports")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orders")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactionTime"))

-- | Create a new 'OcoOrder' with all required fields.
mkOcoOrder ::
  -- | 'ocoOrderContingencyType'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderListClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderListOrderStatus'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderListStatusType'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderListId'
  GHC.Int.Int64 ->
  -- | 'ocoOrderOrderReports'
  [OcoOrderOrderReports] ->
  -- | 'ocoOrderOrders'
  [OcoOrderOrders] ->
  -- | 'ocoOrderSymbol'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderTransactionTime'
  GHC.Int.Int64 ->
  OcoOrder
mkOcoOrder ocoOrderContingencyType ocoOrderListClientOrderId ocoOrderListOrderStatus ocoOrderListStatusType ocoOrderOrderListId ocoOrderOrderReports ocoOrderOrders ocoOrderSymbol ocoOrderTransactionTime =
  OcoOrder
    { ocoOrderContingencyType = ocoOrderContingencyType,
      ocoOrderListClientOrderId = ocoOrderListClientOrderId,
      ocoOrderListOrderStatus = ocoOrderListOrderStatus,
      ocoOrderListStatusType = ocoOrderListStatusType,
      ocoOrderOrderListId = ocoOrderOrderListId,
      ocoOrderOrderReports = ocoOrderOrderReports,
      ocoOrderOrders = ocoOrderOrders,
      ocoOrderSymbol = ocoOrderSymbol,
      ocoOrderTransactionTime = ocoOrderTransactionTime
    }

-- | Defines the object schema located at @components.schemas.ocoOrder.properties.orderReports.items@ in the specification.
data OcoOrderOrderReports = OcoOrderOrderReports
  { -- | clientOrderId
    ocoOrderOrderReportsClientOrderId :: Data.Text.Internal.Text,
    -- | cummulativeQuoteQty
    ocoOrderOrderReportsCummulativeQuoteQty :: Data.Text.Internal.Text,
    -- | executedQty
    ocoOrderOrderReportsExecutedQty :: Data.Text.Internal.Text,
    -- | orderId
    ocoOrderOrderReportsOrderId :: GHC.Int.Int64,
    -- | orderListId
    ocoOrderOrderReportsOrderListId :: GHC.Int.Int64,
    -- | origClientOrderId
    ocoOrderOrderReportsOrigClientOrderId :: Data.Text.Internal.Text,
    -- | origQty
    ocoOrderOrderReportsOrigQty :: Data.Text.Internal.Text,
    -- | price
    ocoOrderOrderReportsPrice :: Data.Text.Internal.Text,
    -- | side
    ocoOrderOrderReportsSide :: Data.Text.Internal.Text,
    -- | status
    ocoOrderOrderReportsStatus :: Data.Text.Internal.Text,
    -- | stopPrice
    ocoOrderOrderReportsStopPrice :: Data.Text.Internal.Text,
    -- | symbol
    ocoOrderOrderReportsSymbol :: Data.Text.Internal.Text,
    -- | timeInForce
    ocoOrderOrderReportsTimeInForce :: Data.Text.Internal.Text,
    -- | type
    ocoOrderOrderReportsType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OcoOrderOrderReports where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsOrderListId obj] : ["origClientOrderId" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsOrigClientOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsPrice obj] : ["side" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsSide obj] : ["status" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsStatus obj] : ["stopPrice" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsStopPrice obj] : ["symbol" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsTimeInForce obj] : ["type" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsOrderListId obj] : ["origClientOrderId" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsOrigClientOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsPrice obj] : ["side" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsSide obj] : ["status" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsStatus obj] : ["stopPrice" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsStopPrice obj] : ["symbol" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsTimeInForce obj] : ["type" Data.Aeson.Types.ToJSON..= ocoOrderOrderReportsType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OcoOrderOrderReports where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OcoOrderOrderReports" (\obj -> (((((((((((((GHC.Base.pure OcoOrderOrderReports GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cummulativeQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "executedQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stopPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'OcoOrderOrderReports' with all required fields.
mkOcoOrderOrderReports ::
  -- | 'ocoOrderOrderReportsClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsCummulativeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsExecutedQty'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsOrderId'
  GHC.Int.Int64 ->
  -- | 'ocoOrderOrderReportsOrderListId'
  GHC.Int.Int64 ->
  -- | 'ocoOrderOrderReportsOrigClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsOrigQty'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsPrice'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsSide'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsStatus'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsStopPrice'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsSymbol'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsTimeInForce'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrderReportsType'
  Data.Text.Internal.Text ->
  OcoOrderOrderReports
mkOcoOrderOrderReports ocoOrderOrderReportsClientOrderId ocoOrderOrderReportsCummulativeQuoteQty ocoOrderOrderReportsExecutedQty ocoOrderOrderReportsOrderId ocoOrderOrderReportsOrderListId ocoOrderOrderReportsOrigClientOrderId ocoOrderOrderReportsOrigQty ocoOrderOrderReportsPrice ocoOrderOrderReportsSide ocoOrderOrderReportsStatus ocoOrderOrderReportsStopPrice ocoOrderOrderReportsSymbol ocoOrderOrderReportsTimeInForce ocoOrderOrderReportsType =
  OcoOrderOrderReports
    { ocoOrderOrderReportsClientOrderId = ocoOrderOrderReportsClientOrderId,
      ocoOrderOrderReportsCummulativeQuoteQty = ocoOrderOrderReportsCummulativeQuoteQty,
      ocoOrderOrderReportsExecutedQty = ocoOrderOrderReportsExecutedQty,
      ocoOrderOrderReportsOrderId = ocoOrderOrderReportsOrderId,
      ocoOrderOrderReportsOrderListId = ocoOrderOrderReportsOrderListId,
      ocoOrderOrderReportsOrigClientOrderId = ocoOrderOrderReportsOrigClientOrderId,
      ocoOrderOrderReportsOrigQty = ocoOrderOrderReportsOrigQty,
      ocoOrderOrderReportsPrice = ocoOrderOrderReportsPrice,
      ocoOrderOrderReportsSide = ocoOrderOrderReportsSide,
      ocoOrderOrderReportsStatus = ocoOrderOrderReportsStatus,
      ocoOrderOrderReportsStopPrice = ocoOrderOrderReportsStopPrice,
      ocoOrderOrderReportsSymbol = ocoOrderOrderReportsSymbol,
      ocoOrderOrderReportsTimeInForce = ocoOrderOrderReportsTimeInForce,
      ocoOrderOrderReportsType = ocoOrderOrderReportsType
    }

-- | Defines the object schema located at @components.schemas.ocoOrder.properties.orders.items@ in the specification.
data OcoOrderOrders = OcoOrderOrders
  { -- | clientOrderId
    ocoOrderOrdersClientOrderId :: Data.Text.Internal.Text,
    -- | orderId
    ocoOrderOrdersOrderId :: GHC.Int.Int64,
    -- | symbol
    ocoOrderOrdersSymbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OcoOrderOrders where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= ocoOrderOrdersClientOrderId obj] : ["orderId" Data.Aeson.Types.ToJSON..= ocoOrderOrdersOrderId obj] : ["symbol" Data.Aeson.Types.ToJSON..= ocoOrderOrdersSymbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= ocoOrderOrdersClientOrderId obj] : ["orderId" Data.Aeson.Types.ToJSON..= ocoOrderOrdersOrderId obj] : ["symbol" Data.Aeson.Types.ToJSON..= ocoOrderOrdersSymbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OcoOrderOrders where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OcoOrderOrders" (\obj -> ((GHC.Base.pure OcoOrderOrders GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'OcoOrderOrders' with all required fields.
mkOcoOrderOrders ::
  -- | 'ocoOrderOrdersClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'ocoOrderOrdersOrderId'
  GHC.Int.Int64 ->
  -- | 'ocoOrderOrdersSymbol'
  Data.Text.Internal.Text ->
  OcoOrderOrders
mkOcoOrderOrders ocoOrderOrdersClientOrderId ocoOrderOrdersOrderId ocoOrderOrdersSymbol =
  OcoOrderOrders
    { ocoOrderOrdersClientOrderId = ocoOrderOrdersClientOrderId,
      ocoOrderOrdersOrderId = ocoOrderOrdersOrderId,
      ocoOrderOrdersSymbol = ocoOrderOrdersSymbol
    }
