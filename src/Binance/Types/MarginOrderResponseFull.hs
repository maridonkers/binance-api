{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema MarginOrderResponseFull
module Binance.Types.MarginOrderResponseFull where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.marginOrderResponseFull@ in the specification.
data MarginOrderResponseFull = MarginOrderResponseFull
  { -- | clientOrderId
    marginOrderResponseFullClientOrderId :: Data.Text.Internal.Text,
    -- | cummulativeQuoteQty
    marginOrderResponseFullCummulativeQuoteQty :: Data.Text.Internal.Text,
    -- | executedQty
    marginOrderResponseFullExecutedQty :: Data.Text.Internal.Text,
    -- | fills
    marginOrderResponseFullFills :: ([MarginOrderResponseFullFills]),
    -- | isIsolated
    marginOrderResponseFullIsIsolated :: GHC.Types.Bool,
    -- | marginBuyBorrowAmount: will not return if no margin trade happens
    marginOrderResponseFullMarginBuyBorrowAmount :: GHC.Types.Double,
    -- | marginBuyBorrowAsset: will not return if no margin trade happens
    marginOrderResponseFullMarginBuyBorrowAsset :: Data.Text.Internal.Text,
    -- | orderId
    marginOrderResponseFullOrderId :: GHC.Int.Int64,
    -- | origQty
    marginOrderResponseFullOrigQty :: Data.Text.Internal.Text,
    -- | price
    marginOrderResponseFullPrice :: Data.Text.Internal.Text,
    -- | side
    marginOrderResponseFullSide :: Data.Text.Internal.Text,
    -- | status
    marginOrderResponseFullStatus :: Data.Text.Internal.Text,
    -- | symbol
    marginOrderResponseFullSymbol :: Data.Text.Internal.Text,
    -- | timeInForce
    marginOrderResponseFullTimeInForce :: Data.Text.Internal.Text,
    -- | transactTime
    marginOrderResponseFullTransactTime :: GHC.Int.Int64,
    -- | type
    marginOrderResponseFullType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MarginOrderResponseFull where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOrderResponseFullClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= marginOrderResponseFullCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= marginOrderResponseFullExecutedQty obj] : ["fills" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFills obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= marginOrderResponseFullIsIsolated obj] : ["marginBuyBorrowAmount" Data.Aeson.Types.ToJSON..= marginOrderResponseFullMarginBuyBorrowAmount obj] : ["marginBuyBorrowAsset" Data.Aeson.Types.ToJSON..= marginOrderResponseFullMarginBuyBorrowAsset obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOrderResponseFullOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= marginOrderResponseFullOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= marginOrderResponseFullPrice obj] : ["side" Data.Aeson.Types.ToJSON..= marginOrderResponseFullSide obj] : ["status" Data.Aeson.Types.ToJSON..= marginOrderResponseFullStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOrderResponseFullSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= marginOrderResponseFullTimeInForce obj] : ["transactTime" Data.Aeson.Types.ToJSON..= marginOrderResponseFullTransactTime obj] : ["type" Data.Aeson.Types.ToJSON..= marginOrderResponseFullType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOrderResponseFullClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= marginOrderResponseFullCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= marginOrderResponseFullExecutedQty obj] : ["fills" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFills obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= marginOrderResponseFullIsIsolated obj] : ["marginBuyBorrowAmount" Data.Aeson.Types.ToJSON..= marginOrderResponseFullMarginBuyBorrowAmount obj] : ["marginBuyBorrowAsset" Data.Aeson.Types.ToJSON..= marginOrderResponseFullMarginBuyBorrowAsset obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOrderResponseFullOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= marginOrderResponseFullOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= marginOrderResponseFullPrice obj] : ["side" Data.Aeson.Types.ToJSON..= marginOrderResponseFullSide obj] : ["status" Data.Aeson.Types.ToJSON..= marginOrderResponseFullStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOrderResponseFullSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= marginOrderResponseFullTimeInForce obj] : ["transactTime" Data.Aeson.Types.ToJSON..= marginOrderResponseFullTransactTime obj] : ["type" Data.Aeson.Types.ToJSON..= marginOrderResponseFullType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON MarginOrderResponseFull where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MarginOrderResponseFull" (\obj -> (((((((((((((((GHC.Base.pure MarginOrderResponseFull GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cummulativeQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "executedQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fills")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isIsolated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "marginBuyBorrowAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "marginBuyBorrowAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'MarginOrderResponseFull' with all required fields.
mkMarginOrderResponseFull ::
  -- | 'marginOrderResponseFullClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullCummulativeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullExecutedQty'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullFills'
  [MarginOrderResponseFullFills] ->
  -- | 'marginOrderResponseFullIsIsolated'
  GHC.Types.Bool ->
  -- | 'marginOrderResponseFullMarginBuyBorrowAmount'
  GHC.Types.Double ->
  -- | 'marginOrderResponseFullMarginBuyBorrowAsset'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullOrderId'
  GHC.Int.Int64 ->
  -- | 'marginOrderResponseFullOrigQty'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullPrice'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullSide'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullStatus'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullSymbol'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullTimeInForce'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullTransactTime'
  GHC.Int.Int64 ->
  -- | 'marginOrderResponseFullType'
  Data.Text.Internal.Text ->
  MarginOrderResponseFull
mkMarginOrderResponseFull marginOrderResponseFullClientOrderId marginOrderResponseFullCummulativeQuoteQty marginOrderResponseFullExecutedQty marginOrderResponseFullFills marginOrderResponseFullIsIsolated marginOrderResponseFullMarginBuyBorrowAmount marginOrderResponseFullMarginBuyBorrowAsset marginOrderResponseFullOrderId marginOrderResponseFullOrigQty marginOrderResponseFullPrice marginOrderResponseFullSide marginOrderResponseFullStatus marginOrderResponseFullSymbol marginOrderResponseFullTimeInForce marginOrderResponseFullTransactTime marginOrderResponseFullType =
  MarginOrderResponseFull
    { marginOrderResponseFullClientOrderId = marginOrderResponseFullClientOrderId,
      marginOrderResponseFullCummulativeQuoteQty = marginOrderResponseFullCummulativeQuoteQty,
      marginOrderResponseFullExecutedQty = marginOrderResponseFullExecutedQty,
      marginOrderResponseFullFills = marginOrderResponseFullFills,
      marginOrderResponseFullIsIsolated = marginOrderResponseFullIsIsolated,
      marginOrderResponseFullMarginBuyBorrowAmount = marginOrderResponseFullMarginBuyBorrowAmount,
      marginOrderResponseFullMarginBuyBorrowAsset = marginOrderResponseFullMarginBuyBorrowAsset,
      marginOrderResponseFullOrderId = marginOrderResponseFullOrderId,
      marginOrderResponseFullOrigQty = marginOrderResponseFullOrigQty,
      marginOrderResponseFullPrice = marginOrderResponseFullPrice,
      marginOrderResponseFullSide = marginOrderResponseFullSide,
      marginOrderResponseFullStatus = marginOrderResponseFullStatus,
      marginOrderResponseFullSymbol = marginOrderResponseFullSymbol,
      marginOrderResponseFullTimeInForce = marginOrderResponseFullTimeInForce,
      marginOrderResponseFullTransactTime = marginOrderResponseFullTransactTime,
      marginOrderResponseFullType = marginOrderResponseFullType
    }

-- | Defines the object schema located at @components.schemas.marginOrderResponseFull.properties.fills.items@ in the specification.
data MarginOrderResponseFullFills = MarginOrderResponseFullFills
  { -- | commission
    marginOrderResponseFullFillsCommission :: Data.Text.Internal.Text,
    -- | commissionAsset
    marginOrderResponseFullFillsCommissionAsset :: Data.Text.Internal.Text,
    -- | price
    marginOrderResponseFullFillsPrice :: Data.Text.Internal.Text,
    -- | qty
    marginOrderResponseFullFillsQty :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MarginOrderResponseFullFills where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["commission" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFillsCommission obj] : ["commissionAsset" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFillsCommissionAsset obj] : ["price" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFillsPrice obj] : ["qty" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFillsQty obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["commission" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFillsCommission obj] : ["commissionAsset" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFillsCommissionAsset obj] : ["price" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFillsPrice obj] : ["qty" Data.Aeson.Types.ToJSON..= marginOrderResponseFullFillsQty obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON MarginOrderResponseFullFills where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MarginOrderResponseFullFills" (\obj -> (((GHC.Base.pure MarginOrderResponseFullFills GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "commission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "commissionAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "qty"))

-- | Create a new 'MarginOrderResponseFullFills' with all required fields.
mkMarginOrderResponseFullFills ::
  -- | 'marginOrderResponseFullFillsCommission'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullFillsCommissionAsset'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullFillsPrice'
  Data.Text.Internal.Text ->
  -- | 'marginOrderResponseFullFillsQty'
  Data.Text.Internal.Text ->
  MarginOrderResponseFullFills
mkMarginOrderResponseFullFills marginOrderResponseFullFillsCommission marginOrderResponseFullFillsCommissionAsset marginOrderResponseFullFillsPrice marginOrderResponseFullFillsQty =
  MarginOrderResponseFullFills
    { marginOrderResponseFullFillsCommission = marginOrderResponseFullFillsCommission,
      marginOrderResponseFullFillsCommissionAsset = marginOrderResponseFullFillsCommissionAsset,
      marginOrderResponseFullFillsPrice = marginOrderResponseFullFillsPrice,
      marginOrderResponseFullFillsQty = marginOrderResponseFullFillsQty
    }
