{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema MarginOrder
module Binance.Types.MarginOrder where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.marginOrder@ in the specification.
data MarginOrder = MarginOrder
  { -- | clientOrderId
    marginOrderClientOrderId :: Data.Text.Internal.Text,
    -- | cummulativeQuoteQty
    marginOrderCummulativeQuoteQty :: Data.Text.Internal.Text,
    -- | executedQty
    marginOrderExecutedQty :: Data.Text.Internal.Text,
    -- | orderId
    marginOrderOrderId :: GHC.Int.Int64,
    -- | origClientOrderId
    marginOrderOrigClientOrderId :: Data.Text.Internal.Text,
    -- | origQty
    marginOrderOrigQty :: Data.Text.Internal.Text,
    -- | price
    marginOrderPrice :: Data.Text.Internal.Text,
    -- | side
    marginOrderSide :: Data.Text.Internal.Text,
    -- | status
    marginOrderStatus :: Data.Text.Internal.Text,
    -- | symbol
    marginOrderSymbol :: Data.Text.Internal.Text,
    -- | timeInForce
    marginOrderTimeInForce :: Data.Text.Internal.Text,
    -- | type
    marginOrderType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MarginOrder where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOrderClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= marginOrderCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= marginOrderExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOrderOrderId obj] : ["origClientOrderId" Data.Aeson.Types.ToJSON..= marginOrderOrigClientOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= marginOrderOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= marginOrderPrice obj] : ["side" Data.Aeson.Types.ToJSON..= marginOrderSide obj] : ["status" Data.Aeson.Types.ToJSON..= marginOrderStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOrderSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= marginOrderTimeInForce obj] : ["type" Data.Aeson.Types.ToJSON..= marginOrderType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= marginOrderClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= marginOrderCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= marginOrderExecutedQty obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginOrderOrderId obj] : ["origClientOrderId" Data.Aeson.Types.ToJSON..= marginOrderOrigClientOrderId obj] : ["origQty" Data.Aeson.Types.ToJSON..= marginOrderOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= marginOrderPrice obj] : ["side" Data.Aeson.Types.ToJSON..= marginOrderSide obj] : ["status" Data.Aeson.Types.ToJSON..= marginOrderStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginOrderSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= marginOrderTimeInForce obj] : ["type" Data.Aeson.Types.ToJSON..= marginOrderType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON MarginOrder where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MarginOrder" (\obj -> (((((((((((GHC.Base.pure MarginOrder GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cummulativeQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "executedQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'MarginOrder' with all required fields.
mkMarginOrder ::
  -- | 'marginOrderClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'marginOrderCummulativeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'marginOrderExecutedQty'
  Data.Text.Internal.Text ->
  -- | 'marginOrderOrderId'
  GHC.Int.Int64 ->
  -- | 'marginOrderOrigClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'marginOrderOrigQty'
  Data.Text.Internal.Text ->
  -- | 'marginOrderPrice'
  Data.Text.Internal.Text ->
  -- | 'marginOrderSide'
  Data.Text.Internal.Text ->
  -- | 'marginOrderStatus'
  Data.Text.Internal.Text ->
  -- | 'marginOrderSymbol'
  Data.Text.Internal.Text ->
  -- | 'marginOrderTimeInForce'
  Data.Text.Internal.Text ->
  -- | 'marginOrderType'
  Data.Text.Internal.Text ->
  MarginOrder
mkMarginOrder marginOrderClientOrderId marginOrderCummulativeQuoteQty marginOrderExecutedQty marginOrderOrderId marginOrderOrigClientOrderId marginOrderOrigQty marginOrderPrice marginOrderSide marginOrderStatus marginOrderSymbol marginOrderTimeInForce marginOrderType =
  MarginOrder
    { marginOrderClientOrderId = marginOrderClientOrderId,
      marginOrderCummulativeQuoteQty = marginOrderCummulativeQuoteQty,
      marginOrderExecutedQty = marginOrderExecutedQty,
      marginOrderOrderId = marginOrderOrderId,
      marginOrderOrigClientOrderId = marginOrderOrigClientOrderId,
      marginOrderOrigQty = marginOrderOrigQty,
      marginOrderPrice = marginOrderPrice,
      marginOrderSide = marginOrderSide,
      marginOrderStatus = marginOrderStatus,
      marginOrderSymbol = marginOrderSymbol,
      marginOrderTimeInForce = marginOrderTimeInForce,
      marginOrderType = marginOrderType
    }
