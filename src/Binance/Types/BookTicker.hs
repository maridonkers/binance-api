{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema BookTicker
module Binance.Types.BookTicker where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.bookTicker@ in the specification.
data BookTicker = BookTicker
  { -- | askPrice
    bookTickerAskPrice :: Data.Text.Internal.Text,
    -- | askQty
    bookTickerAskQty :: Data.Text.Internal.Text,
    -- | bidPrice
    bookTickerBidPrice :: Data.Text.Internal.Text,
    -- | bidQty
    bookTickerBidQty :: Data.Text.Internal.Text,
    -- | symbol
    bookTickerSymbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BookTicker where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["askPrice" Data.Aeson.Types.ToJSON..= bookTickerAskPrice obj] : ["askQty" Data.Aeson.Types.ToJSON..= bookTickerAskQty obj] : ["bidPrice" Data.Aeson.Types.ToJSON..= bookTickerBidPrice obj] : ["bidQty" Data.Aeson.Types.ToJSON..= bookTickerBidQty obj] : ["symbol" Data.Aeson.Types.ToJSON..= bookTickerSymbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["askPrice" Data.Aeson.Types.ToJSON..= bookTickerAskPrice obj] : ["askQty" Data.Aeson.Types.ToJSON..= bookTickerAskQty obj] : ["bidPrice" Data.Aeson.Types.ToJSON..= bookTickerBidPrice obj] : ["bidQty" Data.Aeson.Types.ToJSON..= bookTickerBidQty obj] : ["symbol" Data.Aeson.Types.ToJSON..= bookTickerSymbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BookTicker where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BookTicker" (\obj -> ((((GHC.Base.pure BookTicker GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "askPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "askQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bidPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bidQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'BookTicker' with all required fields.
mkBookTicker ::
  -- | 'bookTickerAskPrice'
  Data.Text.Internal.Text ->
  -- | 'bookTickerAskQty'
  Data.Text.Internal.Text ->
  -- | 'bookTickerBidPrice'
  Data.Text.Internal.Text ->
  -- | 'bookTickerBidQty'
  Data.Text.Internal.Text ->
  -- | 'bookTickerSymbol'
  Data.Text.Internal.Text ->
  BookTicker
mkBookTicker bookTickerAskPrice bookTickerAskQty bookTickerBidPrice bookTickerBidQty bookTickerSymbol =
  BookTicker
    { bookTickerAskPrice = bookTickerAskPrice,
      bookTickerAskQty = bookTickerAskQty,
      bookTickerBidPrice = bookTickerBidPrice,
      bookTickerBidQty = bookTickerBidQty,
      bookTickerSymbol = bookTickerSymbol
    }
