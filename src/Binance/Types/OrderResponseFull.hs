{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema OrderResponseFull
module Binance.Types.OrderResponseFull where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.orderResponseFull@ in the specification.
data OrderResponseFull = OrderResponseFull
  { -- | clientOrderId
    orderResponseFullClientOrderId :: Data.Text.Internal.Text,
    -- | cummulativeQuoteQty
    orderResponseFullCummulativeQuoteQty :: Data.Text.Internal.Text,
    -- | executedQty
    orderResponseFullExecutedQty :: Data.Text.Internal.Text,
    -- | fills
    orderResponseFullFills :: ([OrderResponseFullFills]),
    -- | orderId
    orderResponseFullOrderId :: GHC.Int.Int64,
    -- | orderListId
    orderResponseFullOrderListId :: GHC.Int.Int64,
    -- | origQty
    orderResponseFullOrigQty :: Data.Text.Internal.Text,
    -- | price
    orderResponseFullPrice :: Data.Text.Internal.Text,
    -- | side
    orderResponseFullSide :: Data.Text.Internal.Text,
    -- | status
    orderResponseFullStatus :: Data.Text.Internal.Text,
    -- | strategyId
    orderResponseFullStrategyId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | strategyType
    orderResponseFullStrategyType :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | symbol
    orderResponseFullSymbol :: Data.Text.Internal.Text,
    -- | timeInForce
    orderResponseFullTimeInForce :: Data.Text.Internal.Text,
    -- | transactTime
    orderResponseFullTransactTime :: GHC.Int.Int64,
    -- | type
    orderResponseFullType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OrderResponseFull where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= orderResponseFullClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= orderResponseFullCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= orderResponseFullExecutedQty obj] : ["fills" Data.Aeson.Types.ToJSON..= orderResponseFullFills obj] : ["orderId" Data.Aeson.Types.ToJSON..= orderResponseFullOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= orderResponseFullOrderListId obj] : ["origQty" Data.Aeson.Types.ToJSON..= orderResponseFullOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= orderResponseFullPrice obj] : ["side" Data.Aeson.Types.ToJSON..= orderResponseFullSide obj] : ["status" Data.Aeson.Types.ToJSON..= orderResponseFullStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strategyId" Data.Aeson.Types.ToJSON..=)) (orderResponseFullStrategyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strategyType" Data.Aeson.Types.ToJSON..=)) (orderResponseFullStrategyType obj) : ["symbol" Data.Aeson.Types.ToJSON..= orderResponseFullSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= orderResponseFullTimeInForce obj] : ["transactTime" Data.Aeson.Types.ToJSON..= orderResponseFullTransactTime obj] : ["type" Data.Aeson.Types.ToJSON..= orderResponseFullType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= orderResponseFullClientOrderId obj] : ["cummulativeQuoteQty" Data.Aeson.Types.ToJSON..= orderResponseFullCummulativeQuoteQty obj] : ["executedQty" Data.Aeson.Types.ToJSON..= orderResponseFullExecutedQty obj] : ["fills" Data.Aeson.Types.ToJSON..= orderResponseFullFills obj] : ["orderId" Data.Aeson.Types.ToJSON..= orderResponseFullOrderId obj] : ["orderListId" Data.Aeson.Types.ToJSON..= orderResponseFullOrderListId obj] : ["origQty" Data.Aeson.Types.ToJSON..= orderResponseFullOrigQty obj] : ["price" Data.Aeson.Types.ToJSON..= orderResponseFullPrice obj] : ["side" Data.Aeson.Types.ToJSON..= orderResponseFullSide obj] : ["status" Data.Aeson.Types.ToJSON..= orderResponseFullStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strategyId" Data.Aeson.Types.ToJSON..=)) (orderResponseFullStrategyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("strategyType" Data.Aeson.Types.ToJSON..=)) (orderResponseFullStrategyType obj) : ["symbol" Data.Aeson.Types.ToJSON..= orderResponseFullSymbol obj] : ["timeInForce" Data.Aeson.Types.ToJSON..= orderResponseFullTimeInForce obj] : ["transactTime" Data.Aeson.Types.ToJSON..= orderResponseFullTransactTime obj] : ["type" Data.Aeson.Types.ToJSON..= orderResponseFullType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OrderResponseFull where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderResponseFull" (\obj -> (((((((((((((((GHC.Base.pure OrderResponseFull GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cummulativeQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "executedQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fills")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "strategyId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "strategyType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'OrderResponseFull' with all required fields.
mkOrderResponseFull ::
  -- | 'orderResponseFullClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullCummulativeQuoteQty'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullExecutedQty'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullFills'
  [OrderResponseFullFills] ->
  -- | 'orderResponseFullOrderId'
  GHC.Int.Int64 ->
  -- | 'orderResponseFullOrderListId'
  GHC.Int.Int64 ->
  -- | 'orderResponseFullOrigQty'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullPrice'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullSide'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullStatus'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullSymbol'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullTimeInForce'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullTransactTime'
  GHC.Int.Int64 ->
  -- | 'orderResponseFullType'
  Data.Text.Internal.Text ->
  OrderResponseFull
mkOrderResponseFull orderResponseFullClientOrderId orderResponseFullCummulativeQuoteQty orderResponseFullExecutedQty orderResponseFullFills orderResponseFullOrderId orderResponseFullOrderListId orderResponseFullOrigQty orderResponseFullPrice orderResponseFullSide orderResponseFullStatus orderResponseFullSymbol orderResponseFullTimeInForce orderResponseFullTransactTime orderResponseFullType =
  OrderResponseFull
    { orderResponseFullClientOrderId = orderResponseFullClientOrderId,
      orderResponseFullCummulativeQuoteQty = orderResponseFullCummulativeQuoteQty,
      orderResponseFullExecutedQty = orderResponseFullExecutedQty,
      orderResponseFullFills = orderResponseFullFills,
      orderResponseFullOrderId = orderResponseFullOrderId,
      orderResponseFullOrderListId = orderResponseFullOrderListId,
      orderResponseFullOrigQty = orderResponseFullOrigQty,
      orderResponseFullPrice = orderResponseFullPrice,
      orderResponseFullSide = orderResponseFullSide,
      orderResponseFullStatus = orderResponseFullStatus,
      orderResponseFullStrategyId = GHC.Maybe.Nothing,
      orderResponseFullStrategyType = GHC.Maybe.Nothing,
      orderResponseFullSymbol = orderResponseFullSymbol,
      orderResponseFullTimeInForce = orderResponseFullTimeInForce,
      orderResponseFullTransactTime = orderResponseFullTransactTime,
      orderResponseFullType = orderResponseFullType
    }

-- | Defines the object schema located at @components.schemas.orderResponseFull.properties.fills.items@ in the specification.
data OrderResponseFullFills = OrderResponseFullFills
  { -- | commission
    orderResponseFullFillsCommission :: Data.Text.Internal.Text,
    -- | commissionAsset
    orderResponseFullFillsCommissionAsset :: Data.Text.Internal.Text,
    -- | price
    orderResponseFullFillsPrice :: Data.Text.Internal.Text,
    -- | qty
    orderResponseFullFillsQty :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OrderResponseFullFills where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["commission" Data.Aeson.Types.ToJSON..= orderResponseFullFillsCommission obj] : ["commissionAsset" Data.Aeson.Types.ToJSON..= orderResponseFullFillsCommissionAsset obj] : ["price" Data.Aeson.Types.ToJSON..= orderResponseFullFillsPrice obj] : ["qty" Data.Aeson.Types.ToJSON..= orderResponseFullFillsQty obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["commission" Data.Aeson.Types.ToJSON..= orderResponseFullFillsCommission obj] : ["commissionAsset" Data.Aeson.Types.ToJSON..= orderResponseFullFillsCommissionAsset obj] : ["price" Data.Aeson.Types.ToJSON..= orderResponseFullFillsPrice obj] : ["qty" Data.Aeson.Types.ToJSON..= orderResponseFullFillsQty obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OrderResponseFullFills where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderResponseFullFills" (\obj -> (((GHC.Base.pure OrderResponseFullFills GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "commission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "commissionAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "qty"))

-- | Create a new 'OrderResponseFullFills' with all required fields.
mkOrderResponseFullFills ::
  -- | 'orderResponseFullFillsCommission'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullFillsCommissionAsset'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullFillsPrice'
  Data.Text.Internal.Text ->
  -- | 'orderResponseFullFillsQty'
  Data.Text.Internal.Text ->
  OrderResponseFullFills
mkOrderResponseFullFills orderResponseFullFillsCommission orderResponseFullFillsCommissionAsset orderResponseFullFillsPrice orderResponseFullFillsQty =
  OrderResponseFullFills
    { orderResponseFullFillsCommission = orderResponseFullFillsCommission,
      orderResponseFullFillsCommissionAsset = orderResponseFullFillsCommissionAsset,
      orderResponseFullFillsPrice = orderResponseFullFillsPrice,
      orderResponseFullFillsQty = orderResponseFullFillsQty
    }
