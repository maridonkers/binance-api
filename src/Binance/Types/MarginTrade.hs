{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema MarginTrade
module Binance.Types.MarginTrade where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.marginTrade@ in the specification.
data MarginTrade = MarginTrade
  { -- | commission
    marginTradeCommission :: Data.Text.Internal.Text,
    -- | commissionAsset
    marginTradeCommissionAsset :: Data.Text.Internal.Text,
    -- | id
    marginTradeId :: GHC.Int.Int64,
    -- | isBestMatch
    marginTradeIsBestMatch :: GHC.Types.Bool,
    -- | isBuyer
    marginTradeIsBuyer :: GHC.Types.Bool,
    -- | isIsolated
    marginTradeIsIsolated :: GHC.Types.Bool,
    -- | isMaker
    marginTradeIsMaker :: GHC.Types.Bool,
    -- | orderId
    marginTradeOrderId :: GHC.Int.Int64,
    -- | price
    marginTradePrice :: Data.Text.Internal.Text,
    -- | qty
    marginTradeQty :: Data.Text.Internal.Text,
    -- | symbol
    marginTradeSymbol :: Data.Text.Internal.Text,
    -- | time
    marginTradeTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MarginTrade where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["commission" Data.Aeson.Types.ToJSON..= marginTradeCommission obj] : ["commissionAsset" Data.Aeson.Types.ToJSON..= marginTradeCommissionAsset obj] : ["id" Data.Aeson.Types.ToJSON..= marginTradeId obj] : ["isBestMatch" Data.Aeson.Types.ToJSON..= marginTradeIsBestMatch obj] : ["isBuyer" Data.Aeson.Types.ToJSON..= marginTradeIsBuyer obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= marginTradeIsIsolated obj] : ["isMaker" Data.Aeson.Types.ToJSON..= marginTradeIsMaker obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginTradeOrderId obj] : ["price" Data.Aeson.Types.ToJSON..= marginTradePrice obj] : ["qty" Data.Aeson.Types.ToJSON..= marginTradeQty obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginTradeSymbol obj] : ["time" Data.Aeson.Types.ToJSON..= marginTradeTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["commission" Data.Aeson.Types.ToJSON..= marginTradeCommission obj] : ["commissionAsset" Data.Aeson.Types.ToJSON..= marginTradeCommissionAsset obj] : ["id" Data.Aeson.Types.ToJSON..= marginTradeId obj] : ["isBestMatch" Data.Aeson.Types.ToJSON..= marginTradeIsBestMatch obj] : ["isBuyer" Data.Aeson.Types.ToJSON..= marginTradeIsBuyer obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= marginTradeIsIsolated obj] : ["isMaker" Data.Aeson.Types.ToJSON..= marginTradeIsMaker obj] : ["orderId" Data.Aeson.Types.ToJSON..= marginTradeOrderId obj] : ["price" Data.Aeson.Types.ToJSON..= marginTradePrice obj] : ["qty" Data.Aeson.Types.ToJSON..= marginTradeQty obj] : ["symbol" Data.Aeson.Types.ToJSON..= marginTradeSymbol obj] : ["time" Data.Aeson.Types.ToJSON..= marginTradeTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON MarginTrade where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MarginTrade" (\obj -> (((((((((((GHC.Base.pure MarginTrade GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "commission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "commissionAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBestMatch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBuyer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isIsolated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMaker")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "qty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time"))

-- | Create a new 'MarginTrade' with all required fields.
mkMarginTrade ::
  -- | 'marginTradeCommission'
  Data.Text.Internal.Text ->
  -- | 'marginTradeCommissionAsset'
  Data.Text.Internal.Text ->
  -- | 'marginTradeId'
  GHC.Int.Int64 ->
  -- | 'marginTradeIsBestMatch'
  GHC.Types.Bool ->
  -- | 'marginTradeIsBuyer'
  GHC.Types.Bool ->
  -- | 'marginTradeIsIsolated'
  GHC.Types.Bool ->
  -- | 'marginTradeIsMaker'
  GHC.Types.Bool ->
  -- | 'marginTradeOrderId'
  GHC.Int.Int64 ->
  -- | 'marginTradePrice'
  Data.Text.Internal.Text ->
  -- | 'marginTradeQty'
  Data.Text.Internal.Text ->
  -- | 'marginTradeSymbol'
  Data.Text.Internal.Text ->
  -- | 'marginTradeTime'
  GHC.Int.Int64 ->
  MarginTrade
mkMarginTrade marginTradeCommission marginTradeCommissionAsset marginTradeId marginTradeIsBestMatch marginTradeIsBuyer marginTradeIsIsolated marginTradeIsMaker marginTradeOrderId marginTradePrice marginTradeQty marginTradeSymbol marginTradeTime =
  MarginTrade
    { marginTradeCommission = marginTradeCommission,
      marginTradeCommissionAsset = marginTradeCommissionAsset,
      marginTradeId = marginTradeId,
      marginTradeIsBestMatch = marginTradeIsBestMatch,
      marginTradeIsBuyer = marginTradeIsBuyer,
      marginTradeIsIsolated = marginTradeIsIsolated,
      marginTradeIsMaker = marginTradeIsMaker,
      marginTradeOrderId = marginTradeOrderId,
      marginTradePrice = marginTradePrice,
      marginTradeQty = marginTradeQty,
      marginTradeSymbol = marginTradeSymbol,
      marginTradeTime = marginTradeTime
    }
