{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SubAccountCOINFuturesDetails
module Binance.Types.SubAccountCOINFuturesDetails where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.subAccountCOINFuturesDetails@ in the specification.
data SubAccountCOINFuturesDetails = SubAccountCOINFuturesDetails
  { -- | assets
    subAccountCOINFuturesDetailsAssets :: ([SubAccountCOINFuturesDetailsAssets]),
    -- | canDeposit
    subAccountCOINFuturesDetailsCanDeposit :: GHC.Types.Bool,
    -- | canTrade
    subAccountCOINFuturesDetailsCanTrade :: GHC.Types.Bool,
    -- | canWithdraw
    subAccountCOINFuturesDetailsCanWithdraw :: GHC.Types.Bool,
    -- | email
    subAccountCOINFuturesDetailsEmail :: Data.Text.Internal.Text,
    -- | feeTier
    subAccountCOINFuturesDetailsFeeTier :: GHC.Int.Int64,
    -- | updateTime
    subAccountCOINFuturesDetailsUpdateTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubAccountCOINFuturesDetails where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssets obj] : ["canDeposit" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsCanDeposit obj] : ["canTrade" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsCanTrade obj] : ["canWithdraw" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsCanWithdraw obj] : ["email" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsEmail obj] : ["feeTier" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsFeeTier obj] : ["updateTime" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsUpdateTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssets obj] : ["canDeposit" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsCanDeposit obj] : ["canTrade" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsCanTrade obj] : ["canWithdraw" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsCanWithdraw obj] : ["email" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsEmail obj] : ["feeTier" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsFeeTier obj] : ["updateTime" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsUpdateTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SubAccountCOINFuturesDetails where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubAccountCOINFuturesDetails" (\obj -> ((((((GHC.Base.pure SubAccountCOINFuturesDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "canDeposit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "canTrade")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "canWithdraw")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "feeTier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updateTime"))

-- | Create a new 'SubAccountCOINFuturesDetails' with all required fields.
mkSubAccountCOINFuturesDetails ::
  -- | 'subAccountCOINFuturesDetailsAssets'
  [SubAccountCOINFuturesDetailsAssets] ->
  -- | 'subAccountCOINFuturesDetailsCanDeposit'
  GHC.Types.Bool ->
  -- | 'subAccountCOINFuturesDetailsCanTrade'
  GHC.Types.Bool ->
  -- | 'subAccountCOINFuturesDetailsCanWithdraw'
  GHC.Types.Bool ->
  -- | 'subAccountCOINFuturesDetailsEmail'
  Data.Text.Internal.Text ->
  -- | 'subAccountCOINFuturesDetailsFeeTier'
  GHC.Int.Int64 ->
  -- | 'subAccountCOINFuturesDetailsUpdateTime'
  GHC.Int.Int64 ->
  SubAccountCOINFuturesDetails
mkSubAccountCOINFuturesDetails subAccountCOINFuturesDetailsAssets subAccountCOINFuturesDetailsCanDeposit subAccountCOINFuturesDetailsCanTrade subAccountCOINFuturesDetailsCanWithdraw subAccountCOINFuturesDetailsEmail subAccountCOINFuturesDetailsFeeTier subAccountCOINFuturesDetailsUpdateTime =
  SubAccountCOINFuturesDetails
    { subAccountCOINFuturesDetailsAssets = subAccountCOINFuturesDetailsAssets,
      subAccountCOINFuturesDetailsCanDeposit = subAccountCOINFuturesDetailsCanDeposit,
      subAccountCOINFuturesDetailsCanTrade = subAccountCOINFuturesDetailsCanTrade,
      subAccountCOINFuturesDetailsCanWithdraw = subAccountCOINFuturesDetailsCanWithdraw,
      subAccountCOINFuturesDetailsEmail = subAccountCOINFuturesDetailsEmail,
      subAccountCOINFuturesDetailsFeeTier = subAccountCOINFuturesDetailsFeeTier,
      subAccountCOINFuturesDetailsUpdateTime = subAccountCOINFuturesDetailsUpdateTime
    }

-- | Defines the object schema located at @components.schemas.subAccountCOINFuturesDetails.properties.assets.items@ in the specification.
data SubAccountCOINFuturesDetailsAssets = SubAccountCOINFuturesDetailsAssets
  { -- | asset
    subAccountCOINFuturesDetailsAssetsAsset :: Data.Text.Internal.Text,
    -- | initialMargin
    subAccountCOINFuturesDetailsAssetsInitialMargin :: Data.Text.Internal.Text,
    -- | maintenanceMargin
    subAccountCOINFuturesDetailsAssetsMaintenanceMargin :: Data.Text.Internal.Text,
    -- | marginBalance
    subAccountCOINFuturesDetailsAssetsMarginBalance :: Data.Text.Internal.Text,
    -- | maxWithdrawAmount
    subAccountCOINFuturesDetailsAssetsMaxWithdrawAmount :: Data.Text.Internal.Text,
    -- | openOrderInitialMargin
    subAccountCOINFuturesDetailsAssetsOpenOrderInitialMargin :: Data.Text.Internal.Text,
    -- | positionInitialMargin
    subAccountCOINFuturesDetailsAssetsPositionInitialMargin :: Data.Text.Internal.Text,
    -- | unrealizedProfit
    subAccountCOINFuturesDetailsAssetsUnrealizedProfit :: Data.Text.Internal.Text,
    -- | walletBalance
    subAccountCOINFuturesDetailsAssetsWalletBalance :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubAccountCOINFuturesDetailsAssets where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsAsset obj] : ["initialMargin" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsInitialMargin obj] : ["maintenanceMargin" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsMaintenanceMargin obj] : ["marginBalance" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsMarginBalance obj] : ["maxWithdrawAmount" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsMaxWithdrawAmount obj] : ["openOrderInitialMargin" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsOpenOrderInitialMargin obj] : ["positionInitialMargin" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsPositionInitialMargin obj] : ["unrealizedProfit" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsUnrealizedProfit obj] : ["walletBalance" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsWalletBalance obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsAsset obj] : ["initialMargin" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsInitialMargin obj] : ["maintenanceMargin" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsMaintenanceMargin obj] : ["marginBalance" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsMarginBalance obj] : ["maxWithdrawAmount" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsMaxWithdrawAmount obj] : ["openOrderInitialMargin" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsOpenOrderInitialMargin obj] : ["positionInitialMargin" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsPositionInitialMargin obj] : ["unrealizedProfit" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsUnrealizedProfit obj] : ["walletBalance" Data.Aeson.Types.ToJSON..= subAccountCOINFuturesDetailsAssetsWalletBalance obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SubAccountCOINFuturesDetailsAssets where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubAccountCOINFuturesDetailsAssets" (\obj -> ((((((((GHC.Base.pure SubAccountCOINFuturesDetailsAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "initialMargin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "maintenanceMargin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "marginBalance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "maxWithdrawAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "openOrderInitialMargin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "positionInitialMargin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unrealizedProfit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "walletBalance"))

-- | Create a new 'SubAccountCOINFuturesDetailsAssets' with all required fields.
mkSubAccountCOINFuturesDetailsAssets ::
  -- | 'subAccountCOINFuturesDetailsAssetsAsset'
  Data.Text.Internal.Text ->
  -- | 'subAccountCOINFuturesDetailsAssetsInitialMargin'
  Data.Text.Internal.Text ->
  -- | 'subAccountCOINFuturesDetailsAssetsMaintenanceMargin'
  Data.Text.Internal.Text ->
  -- | 'subAccountCOINFuturesDetailsAssetsMarginBalance'
  Data.Text.Internal.Text ->
  -- | 'subAccountCOINFuturesDetailsAssetsMaxWithdrawAmount'
  Data.Text.Internal.Text ->
  -- | 'subAccountCOINFuturesDetailsAssetsOpenOrderInitialMargin'
  Data.Text.Internal.Text ->
  -- | 'subAccountCOINFuturesDetailsAssetsPositionInitialMargin'
  Data.Text.Internal.Text ->
  -- | 'subAccountCOINFuturesDetailsAssetsUnrealizedProfit'
  Data.Text.Internal.Text ->
  -- | 'subAccountCOINFuturesDetailsAssetsWalletBalance'
  Data.Text.Internal.Text ->
  SubAccountCOINFuturesDetailsAssets
mkSubAccountCOINFuturesDetailsAssets subAccountCOINFuturesDetailsAssetsAsset subAccountCOINFuturesDetailsAssetsInitialMargin subAccountCOINFuturesDetailsAssetsMaintenanceMargin subAccountCOINFuturesDetailsAssetsMarginBalance subAccountCOINFuturesDetailsAssetsMaxWithdrawAmount subAccountCOINFuturesDetailsAssetsOpenOrderInitialMargin subAccountCOINFuturesDetailsAssetsPositionInitialMargin subAccountCOINFuturesDetailsAssetsUnrealizedProfit subAccountCOINFuturesDetailsAssetsWalletBalance =
  SubAccountCOINFuturesDetailsAssets
    { subAccountCOINFuturesDetailsAssetsAsset = subAccountCOINFuturesDetailsAssetsAsset,
      subAccountCOINFuturesDetailsAssetsInitialMargin = subAccountCOINFuturesDetailsAssetsInitialMargin,
      subAccountCOINFuturesDetailsAssetsMaintenanceMargin = subAccountCOINFuturesDetailsAssetsMaintenanceMargin,
      subAccountCOINFuturesDetailsAssetsMarginBalance = subAccountCOINFuturesDetailsAssetsMarginBalance,
      subAccountCOINFuturesDetailsAssetsMaxWithdrawAmount = subAccountCOINFuturesDetailsAssetsMaxWithdrawAmount,
      subAccountCOINFuturesDetailsAssetsOpenOrderInitialMargin = subAccountCOINFuturesDetailsAssetsOpenOrderInitialMargin,
      subAccountCOINFuturesDetailsAssetsPositionInitialMargin = subAccountCOINFuturesDetailsAssetsPositionInitialMargin,
      subAccountCOINFuturesDetailsAssetsUnrealizedProfit = subAccountCOINFuturesDetailsAssetsUnrealizedProfit,
      subAccountCOINFuturesDetailsAssetsWalletBalance = subAccountCOINFuturesDetailsAssetsWalletBalance
    }
