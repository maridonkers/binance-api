{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IsolatedMarginAccountInfo
module Binance.Types.IsolatedMarginAccountInfo where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.isolatedMarginAccountInfo@ in the specification.
data IsolatedMarginAccountInfo = IsolatedMarginAccountInfo
  { -- | assets
    isolatedMarginAccountInfoAssets :: ([IsolatedMarginAccountInfoAssets]),
    -- | totalAssetOfBtc
    isolatedMarginAccountInfoTotalAssetOfBtc :: Data.Text.Internal.Text,
    -- | totalLiabilityOfBtc
    isolatedMarginAccountInfoTotalLiabilityOfBtc :: Data.Text.Internal.Text,
    -- | totalNetAssetOfBtc
    isolatedMarginAccountInfoTotalNetAssetOfBtc :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IsolatedMarginAccountInfo where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssets obj] : ["totalAssetOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoTotalAssetOfBtc obj] : ["totalLiabilityOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoTotalLiabilityOfBtc obj] : ["totalNetAssetOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoTotalNetAssetOfBtc obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssets obj] : ["totalAssetOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoTotalAssetOfBtc obj] : ["totalLiabilityOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoTotalLiabilityOfBtc obj] : ["totalNetAssetOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoTotalNetAssetOfBtc obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IsolatedMarginAccountInfo where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IsolatedMarginAccountInfo" (\obj -> (((GHC.Base.pure IsolatedMarginAccountInfo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalAssetOfBtc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalLiabilityOfBtc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalNetAssetOfBtc"))

-- | Create a new 'IsolatedMarginAccountInfo' with all required fields.
mkIsolatedMarginAccountInfo ::
  -- | 'isolatedMarginAccountInfoAssets'
  [IsolatedMarginAccountInfoAssets] ->
  -- | 'isolatedMarginAccountInfoTotalAssetOfBtc'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoTotalLiabilityOfBtc'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoTotalNetAssetOfBtc'
  Data.Text.Internal.Text ->
  IsolatedMarginAccountInfo
mkIsolatedMarginAccountInfo isolatedMarginAccountInfoAssets isolatedMarginAccountInfoTotalAssetOfBtc isolatedMarginAccountInfoTotalLiabilityOfBtc isolatedMarginAccountInfoTotalNetAssetOfBtc =
  IsolatedMarginAccountInfo
    { isolatedMarginAccountInfoAssets = isolatedMarginAccountInfoAssets,
      isolatedMarginAccountInfoTotalAssetOfBtc = isolatedMarginAccountInfoTotalAssetOfBtc,
      isolatedMarginAccountInfoTotalLiabilityOfBtc = isolatedMarginAccountInfoTotalLiabilityOfBtc,
      isolatedMarginAccountInfoTotalNetAssetOfBtc = isolatedMarginAccountInfoTotalNetAssetOfBtc
    }

-- | Defines the object schema located at @components.schemas.isolatedMarginAccountInfo.properties.assets.items@ in the specification.
data IsolatedMarginAccountInfoAssets = IsolatedMarginAccountInfoAssets
  { -- | baseAsset
    isolatedMarginAccountInfoAssetsBaseAsset :: IsolatedMarginAccountInfoAssetsBaseAsset,
    -- | enabled: true-enabled, false-disabled
    isolatedMarginAccountInfoAssetsEnabled :: GHC.Types.Bool,
    -- | indexPrice
    isolatedMarginAccountInfoAssetsIndexPrice :: Data.Text.Internal.Text,
    -- | isolatedCreated
    isolatedMarginAccountInfoAssetsIsolatedCreated :: GHC.Types.Bool,
    -- | liquidatePrice
    isolatedMarginAccountInfoAssetsLiquidatePrice :: Data.Text.Internal.Text,
    -- | liquidateRate
    isolatedMarginAccountInfoAssetsLiquidateRate :: Data.Text.Internal.Text,
    -- | marginLevel
    isolatedMarginAccountInfoAssetsMarginLevel :: Data.Text.Internal.Text,
    -- | marginLevelStatus: \"EXCESSIVE\", \"NORMAL\", \"MARGIN_CALL\", \"PRE_LIQUIDATION\", \"FORCE_LIQUIDATION\"
    isolatedMarginAccountInfoAssetsMarginLevelStatus :: Data.Text.Internal.Text,
    -- | marginRatio
    isolatedMarginAccountInfoAssetsMarginRatio :: Data.Text.Internal.Text,
    -- | quoteAsset
    isolatedMarginAccountInfoAssetsQuoteAsset :: IsolatedMarginAccountInfoAssetsQuoteAsset,
    -- | symbol
    isolatedMarginAccountInfoAssetsSymbol :: Data.Text.Internal.Text,
    -- | tradeEnabled
    isolatedMarginAccountInfoAssetsTradeEnabled :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IsolatedMarginAccountInfoAssets where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["baseAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAsset obj] : ["enabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsEnabled obj] : ["indexPrice" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsIndexPrice obj] : ["isolatedCreated" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsIsolatedCreated obj] : ["liquidatePrice" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsLiquidatePrice obj] : ["liquidateRate" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsLiquidateRate obj] : ["marginLevel" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsMarginLevel obj] : ["marginLevelStatus" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsMarginLevelStatus obj] : ["marginRatio" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsMarginRatio obj] : ["quoteAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAsset obj] : ["symbol" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsSymbol obj] : ["tradeEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsTradeEnabled obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["baseAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAsset obj] : ["enabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsEnabled obj] : ["indexPrice" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsIndexPrice obj] : ["isolatedCreated" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsIsolatedCreated obj] : ["liquidatePrice" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsLiquidatePrice obj] : ["liquidateRate" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsLiquidateRate obj] : ["marginLevel" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsMarginLevel obj] : ["marginLevelStatus" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsMarginLevelStatus obj] : ["marginRatio" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsMarginRatio obj] : ["quoteAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAsset obj] : ["symbol" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsSymbol obj] : ["tradeEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsTradeEnabled obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IsolatedMarginAccountInfoAssets where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IsolatedMarginAccountInfoAssets" (\obj -> (((((((((((GHC.Base.pure IsolatedMarginAccountInfoAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "baseAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "indexPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isolatedCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "liquidatePrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "liquidateRate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "marginLevel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "marginLevelStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "marginRatio")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tradeEnabled"))

-- | Create a new 'IsolatedMarginAccountInfoAssets' with all required fields.
mkIsolatedMarginAccountInfoAssets ::
  -- | 'isolatedMarginAccountInfoAssetsBaseAsset'
  IsolatedMarginAccountInfoAssetsBaseAsset ->
  -- | 'isolatedMarginAccountInfoAssetsEnabled'
  GHC.Types.Bool ->
  -- | 'isolatedMarginAccountInfoAssetsIndexPrice'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsIsolatedCreated'
  GHC.Types.Bool ->
  -- | 'isolatedMarginAccountInfoAssetsLiquidatePrice'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsLiquidateRate'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsMarginLevel'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsMarginLevelStatus'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsMarginRatio'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAsset'
  IsolatedMarginAccountInfoAssetsQuoteAsset ->
  -- | 'isolatedMarginAccountInfoAssetsSymbol'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsTradeEnabled'
  GHC.Types.Bool ->
  IsolatedMarginAccountInfoAssets
mkIsolatedMarginAccountInfoAssets isolatedMarginAccountInfoAssetsBaseAsset isolatedMarginAccountInfoAssetsEnabled isolatedMarginAccountInfoAssetsIndexPrice isolatedMarginAccountInfoAssetsIsolatedCreated isolatedMarginAccountInfoAssetsLiquidatePrice isolatedMarginAccountInfoAssetsLiquidateRate isolatedMarginAccountInfoAssetsMarginLevel isolatedMarginAccountInfoAssetsMarginLevelStatus isolatedMarginAccountInfoAssetsMarginRatio isolatedMarginAccountInfoAssetsQuoteAsset isolatedMarginAccountInfoAssetsSymbol isolatedMarginAccountInfoAssetsTradeEnabled =
  IsolatedMarginAccountInfoAssets
    { isolatedMarginAccountInfoAssetsBaseAsset = isolatedMarginAccountInfoAssetsBaseAsset,
      isolatedMarginAccountInfoAssetsEnabled = isolatedMarginAccountInfoAssetsEnabled,
      isolatedMarginAccountInfoAssetsIndexPrice = isolatedMarginAccountInfoAssetsIndexPrice,
      isolatedMarginAccountInfoAssetsIsolatedCreated = isolatedMarginAccountInfoAssetsIsolatedCreated,
      isolatedMarginAccountInfoAssetsLiquidatePrice = isolatedMarginAccountInfoAssetsLiquidatePrice,
      isolatedMarginAccountInfoAssetsLiquidateRate = isolatedMarginAccountInfoAssetsLiquidateRate,
      isolatedMarginAccountInfoAssetsMarginLevel = isolatedMarginAccountInfoAssetsMarginLevel,
      isolatedMarginAccountInfoAssetsMarginLevelStatus = isolatedMarginAccountInfoAssetsMarginLevelStatus,
      isolatedMarginAccountInfoAssetsMarginRatio = isolatedMarginAccountInfoAssetsMarginRatio,
      isolatedMarginAccountInfoAssetsQuoteAsset = isolatedMarginAccountInfoAssetsQuoteAsset,
      isolatedMarginAccountInfoAssetsSymbol = isolatedMarginAccountInfoAssetsSymbol,
      isolatedMarginAccountInfoAssetsTradeEnabled = isolatedMarginAccountInfoAssetsTradeEnabled
    }

-- | Defines the object schema located at @components.schemas.isolatedMarginAccountInfo.properties.assets.items.properties.baseAsset@ in the specification.
data IsolatedMarginAccountInfoAssetsBaseAsset = IsolatedMarginAccountInfoAssetsBaseAsset
  { -- | asset
    isolatedMarginAccountInfoAssetsBaseAssetAsset :: Data.Text.Internal.Text,
    -- | borrowEnabled
    isolatedMarginAccountInfoAssetsBaseAssetBorrowEnabled :: GHC.Types.Bool,
    -- | borrowed
    isolatedMarginAccountInfoAssetsBaseAssetBorrowed :: Data.Text.Internal.Text,
    -- | free
    isolatedMarginAccountInfoAssetsBaseAssetFree :: Data.Text.Internal.Text,
    -- | interest
    isolatedMarginAccountInfoAssetsBaseAssetInterest :: Data.Text.Internal.Text,
    -- | locked
    isolatedMarginAccountInfoAssetsBaseAssetLocked :: Data.Text.Internal.Text,
    -- | netAsset
    isolatedMarginAccountInfoAssetsBaseAssetNetAsset :: Data.Text.Internal.Text,
    -- | netAssetOfBtc
    isolatedMarginAccountInfoAssetsBaseAssetNetAssetOfBtc :: Data.Text.Internal.Text,
    -- | repayEnabled
    isolatedMarginAccountInfoAssetsBaseAssetRepayEnabled :: GHC.Types.Bool,
    -- | totalAsset
    isolatedMarginAccountInfoAssetsBaseAssetTotalAsset :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IsolatedMarginAccountInfoAssetsBaseAsset where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetAsset obj] : ["borrowEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetBorrowEnabled obj] : ["borrowed" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetBorrowed obj] : ["free" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetFree obj] : ["interest" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetInterest obj] : ["locked" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetLocked obj] : ["netAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetNetAsset obj] : ["netAssetOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetNetAssetOfBtc obj] : ["repayEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetRepayEnabled obj] : ["totalAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetTotalAsset obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetAsset obj] : ["borrowEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetBorrowEnabled obj] : ["borrowed" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetBorrowed obj] : ["free" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetFree obj] : ["interest" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetInterest obj] : ["locked" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetLocked obj] : ["netAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetNetAsset obj] : ["netAssetOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetNetAssetOfBtc obj] : ["repayEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetRepayEnabled obj] : ["totalAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsBaseAssetTotalAsset obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IsolatedMarginAccountInfoAssetsBaseAsset where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IsolatedMarginAccountInfoAssetsBaseAsset" (\obj -> (((((((((GHC.Base.pure IsolatedMarginAccountInfoAssetsBaseAsset GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "borrowEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "borrowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "free")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interest")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "locked")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "netAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "netAssetOfBtc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "repayEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalAsset"))

-- | Create a new 'IsolatedMarginAccountInfoAssetsBaseAsset' with all required fields.
mkIsolatedMarginAccountInfoAssetsBaseAsset ::
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetAsset'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetBorrowEnabled'
  GHC.Types.Bool ->
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetBorrowed'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetFree'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetInterest'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetLocked'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetNetAsset'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetNetAssetOfBtc'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetRepayEnabled'
  GHC.Types.Bool ->
  -- | 'isolatedMarginAccountInfoAssetsBaseAssetTotalAsset'
  Data.Text.Internal.Text ->
  IsolatedMarginAccountInfoAssetsBaseAsset
mkIsolatedMarginAccountInfoAssetsBaseAsset isolatedMarginAccountInfoAssetsBaseAssetAsset isolatedMarginAccountInfoAssetsBaseAssetBorrowEnabled isolatedMarginAccountInfoAssetsBaseAssetBorrowed isolatedMarginAccountInfoAssetsBaseAssetFree isolatedMarginAccountInfoAssetsBaseAssetInterest isolatedMarginAccountInfoAssetsBaseAssetLocked isolatedMarginAccountInfoAssetsBaseAssetNetAsset isolatedMarginAccountInfoAssetsBaseAssetNetAssetOfBtc isolatedMarginAccountInfoAssetsBaseAssetRepayEnabled isolatedMarginAccountInfoAssetsBaseAssetTotalAsset =
  IsolatedMarginAccountInfoAssetsBaseAsset
    { isolatedMarginAccountInfoAssetsBaseAssetAsset = isolatedMarginAccountInfoAssetsBaseAssetAsset,
      isolatedMarginAccountInfoAssetsBaseAssetBorrowEnabled = isolatedMarginAccountInfoAssetsBaseAssetBorrowEnabled,
      isolatedMarginAccountInfoAssetsBaseAssetBorrowed = isolatedMarginAccountInfoAssetsBaseAssetBorrowed,
      isolatedMarginAccountInfoAssetsBaseAssetFree = isolatedMarginAccountInfoAssetsBaseAssetFree,
      isolatedMarginAccountInfoAssetsBaseAssetInterest = isolatedMarginAccountInfoAssetsBaseAssetInterest,
      isolatedMarginAccountInfoAssetsBaseAssetLocked = isolatedMarginAccountInfoAssetsBaseAssetLocked,
      isolatedMarginAccountInfoAssetsBaseAssetNetAsset = isolatedMarginAccountInfoAssetsBaseAssetNetAsset,
      isolatedMarginAccountInfoAssetsBaseAssetNetAssetOfBtc = isolatedMarginAccountInfoAssetsBaseAssetNetAssetOfBtc,
      isolatedMarginAccountInfoAssetsBaseAssetRepayEnabled = isolatedMarginAccountInfoAssetsBaseAssetRepayEnabled,
      isolatedMarginAccountInfoAssetsBaseAssetTotalAsset = isolatedMarginAccountInfoAssetsBaseAssetTotalAsset
    }

-- | Defines the object schema located at @components.schemas.isolatedMarginAccountInfo.properties.assets.items.properties.quoteAsset@ in the specification.
data IsolatedMarginAccountInfoAssetsQuoteAsset = IsolatedMarginAccountInfoAssetsQuoteAsset
  { -- | asset
    isolatedMarginAccountInfoAssetsQuoteAssetAsset :: Data.Text.Internal.Text,
    -- | borrowEnabled
    isolatedMarginAccountInfoAssetsQuoteAssetBorrowEnabled :: GHC.Types.Bool,
    -- | borrowed
    isolatedMarginAccountInfoAssetsQuoteAssetBorrowed :: Data.Text.Internal.Text,
    -- | free
    isolatedMarginAccountInfoAssetsQuoteAssetFree :: Data.Text.Internal.Text,
    -- | interest
    isolatedMarginAccountInfoAssetsQuoteAssetInterest :: Data.Text.Internal.Text,
    -- | locked
    isolatedMarginAccountInfoAssetsQuoteAssetLocked :: Data.Text.Internal.Text,
    -- | netAsset
    isolatedMarginAccountInfoAssetsQuoteAssetNetAsset :: Data.Text.Internal.Text,
    -- | netAssetOfBtc
    isolatedMarginAccountInfoAssetsQuoteAssetNetAssetOfBtc :: Data.Text.Internal.Text,
    -- | repayEnabled
    isolatedMarginAccountInfoAssetsQuoteAssetRepayEnabled :: GHC.Types.Bool,
    -- | totalAsset
    isolatedMarginAccountInfoAssetsQuoteAssetTotalAsset :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IsolatedMarginAccountInfoAssetsQuoteAsset where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetAsset obj] : ["borrowEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetBorrowEnabled obj] : ["borrowed" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetBorrowed obj] : ["free" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetFree obj] : ["interest" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetInterest obj] : ["locked" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetLocked obj] : ["netAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetNetAsset obj] : ["netAssetOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetNetAssetOfBtc obj] : ["repayEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetRepayEnabled obj] : ["totalAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetTotalAsset obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetAsset obj] : ["borrowEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetBorrowEnabled obj] : ["borrowed" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetBorrowed obj] : ["free" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetFree obj] : ["interest" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetInterest obj] : ["locked" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetLocked obj] : ["netAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetNetAsset obj] : ["netAssetOfBtc" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetNetAssetOfBtc obj] : ["repayEnabled" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetRepayEnabled obj] : ["totalAsset" Data.Aeson.Types.ToJSON..= isolatedMarginAccountInfoAssetsQuoteAssetTotalAsset obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IsolatedMarginAccountInfoAssetsQuoteAsset where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IsolatedMarginAccountInfoAssetsQuoteAsset" (\obj -> (((((((((GHC.Base.pure IsolatedMarginAccountInfoAssetsQuoteAsset GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "borrowEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "borrowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "free")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interest")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "locked")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "netAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "netAssetOfBtc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "repayEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalAsset"))

-- | Create a new 'IsolatedMarginAccountInfoAssetsQuoteAsset' with all required fields.
mkIsolatedMarginAccountInfoAssetsQuoteAsset ::
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetAsset'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetBorrowEnabled'
  GHC.Types.Bool ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetBorrowed'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetFree'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetInterest'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetLocked'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetNetAsset'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetNetAssetOfBtc'
  Data.Text.Internal.Text ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetRepayEnabled'
  GHC.Types.Bool ->
  -- | 'isolatedMarginAccountInfoAssetsQuoteAssetTotalAsset'
  Data.Text.Internal.Text ->
  IsolatedMarginAccountInfoAssetsQuoteAsset
mkIsolatedMarginAccountInfoAssetsQuoteAsset isolatedMarginAccountInfoAssetsQuoteAssetAsset isolatedMarginAccountInfoAssetsQuoteAssetBorrowEnabled isolatedMarginAccountInfoAssetsQuoteAssetBorrowed isolatedMarginAccountInfoAssetsQuoteAssetFree isolatedMarginAccountInfoAssetsQuoteAssetInterest isolatedMarginAccountInfoAssetsQuoteAssetLocked isolatedMarginAccountInfoAssetsQuoteAssetNetAsset isolatedMarginAccountInfoAssetsQuoteAssetNetAssetOfBtc isolatedMarginAccountInfoAssetsQuoteAssetRepayEnabled isolatedMarginAccountInfoAssetsQuoteAssetTotalAsset =
  IsolatedMarginAccountInfoAssetsQuoteAsset
    { isolatedMarginAccountInfoAssetsQuoteAssetAsset = isolatedMarginAccountInfoAssetsQuoteAssetAsset,
      isolatedMarginAccountInfoAssetsQuoteAssetBorrowEnabled = isolatedMarginAccountInfoAssetsQuoteAssetBorrowEnabled,
      isolatedMarginAccountInfoAssetsQuoteAssetBorrowed = isolatedMarginAccountInfoAssetsQuoteAssetBorrowed,
      isolatedMarginAccountInfoAssetsQuoteAssetFree = isolatedMarginAccountInfoAssetsQuoteAssetFree,
      isolatedMarginAccountInfoAssetsQuoteAssetInterest = isolatedMarginAccountInfoAssetsQuoteAssetInterest,
      isolatedMarginAccountInfoAssetsQuoteAssetLocked = isolatedMarginAccountInfoAssetsQuoteAssetLocked,
      isolatedMarginAccountInfoAssetsQuoteAssetNetAsset = isolatedMarginAccountInfoAssetsQuoteAssetNetAsset,
      isolatedMarginAccountInfoAssetsQuoteAssetNetAssetOfBtc = isolatedMarginAccountInfoAssetsQuoteAssetNetAssetOfBtc,
      isolatedMarginAccountInfoAssetsQuoteAssetRepayEnabled = isolatedMarginAccountInfoAssetsQuoteAssetRepayEnabled,
      isolatedMarginAccountInfoAssetsQuoteAssetTotalAsset = isolatedMarginAccountInfoAssetsQuoteAssetTotalAsset
    }
