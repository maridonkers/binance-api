{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SnapshotFutures
module Binance.Types.SnapshotFutures where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.snapshotFutures@ in the specification.
data SnapshotFutures = SnapshotFutures
  { -- | code
    snapshotFuturesCode :: GHC.Int.Int64,
    -- | msg
    snapshotFuturesMsg :: Data.Text.Internal.Text,
    -- | snapshotVos
    snapshotFuturesSnapshotVos :: ([SnapshotFuturesSnapshotVos])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SnapshotFutures where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= snapshotFuturesCode obj] : ["msg" Data.Aeson.Types.ToJSON..= snapshotFuturesMsg obj] : ["snapshotVos" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVos obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= snapshotFuturesCode obj] : ["msg" Data.Aeson.Types.ToJSON..= snapshotFuturesMsg obj] : ["snapshotVos" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVos obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SnapshotFutures where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SnapshotFutures" (\obj -> ((GHC.Base.pure SnapshotFutures GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "msg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "snapshotVos"))

-- | Create a new 'SnapshotFutures' with all required fields.
mkSnapshotFutures ::
  -- | 'snapshotFuturesCode'
  GHC.Int.Int64 ->
  -- | 'snapshotFuturesMsg'
  Data.Text.Internal.Text ->
  -- | 'snapshotFuturesSnapshotVos'
  [SnapshotFuturesSnapshotVos] ->
  SnapshotFutures
mkSnapshotFutures snapshotFuturesCode snapshotFuturesMsg snapshotFuturesSnapshotVos =
  SnapshotFutures
    { snapshotFuturesCode = snapshotFuturesCode,
      snapshotFuturesMsg = snapshotFuturesMsg,
      snapshotFuturesSnapshotVos = snapshotFuturesSnapshotVos
    }

-- | Defines the object schema located at @components.schemas.snapshotFutures.properties.snapshotVos.items@ in the specification.
data SnapshotFuturesSnapshotVos = SnapshotFuturesSnapshotVos
  { -- | data
    snapshotFuturesSnapshotVosData :: SnapshotFuturesSnapshotVosData,
    -- | type
    snapshotFuturesSnapshotVosType :: Data.Text.Internal.Text,
    -- | updateTime
    snapshotFuturesSnapshotVosUpdateTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SnapshotFuturesSnapshotVos where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosData obj] : ["type" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosType obj] : ["updateTime" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosUpdateTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosData obj] : ["type" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosType obj] : ["updateTime" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosUpdateTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SnapshotFuturesSnapshotVos where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SnapshotFuturesSnapshotVos" (\obj -> ((GHC.Base.pure SnapshotFuturesSnapshotVos GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updateTime"))

-- | Create a new 'SnapshotFuturesSnapshotVos' with all required fields.
mkSnapshotFuturesSnapshotVos ::
  -- | 'snapshotFuturesSnapshotVosData'
  SnapshotFuturesSnapshotVosData ->
  -- | 'snapshotFuturesSnapshotVosType'
  Data.Text.Internal.Text ->
  -- | 'snapshotFuturesSnapshotVosUpdateTime'
  GHC.Int.Int64 ->
  SnapshotFuturesSnapshotVos
mkSnapshotFuturesSnapshotVos snapshotFuturesSnapshotVosData snapshotFuturesSnapshotVosType snapshotFuturesSnapshotVosUpdateTime =
  SnapshotFuturesSnapshotVos
    { snapshotFuturesSnapshotVosData = snapshotFuturesSnapshotVosData,
      snapshotFuturesSnapshotVosType = snapshotFuturesSnapshotVosType,
      snapshotFuturesSnapshotVosUpdateTime = snapshotFuturesSnapshotVosUpdateTime
    }

-- | Defines the object schema located at @components.schemas.snapshotFutures.properties.snapshotVos.items.properties.data@ in the specification.
data SnapshotFuturesSnapshotVosData = SnapshotFuturesSnapshotVosData
  { -- | assets
    snapshotFuturesSnapshotVosDataAssets :: ([SnapshotFuturesSnapshotVosDataAssets]),
    -- | position
    snapshotFuturesSnapshotVosDataPosition :: ([SnapshotFuturesSnapshotVosDataPosition])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SnapshotFuturesSnapshotVosData where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataAssets obj] : ["position" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPosition obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assets" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataAssets obj] : ["position" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPosition obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SnapshotFuturesSnapshotVosData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SnapshotFuturesSnapshotVosData" (\obj -> (GHC.Base.pure SnapshotFuturesSnapshotVosData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "position"))

-- | Create a new 'SnapshotFuturesSnapshotVosData' with all required fields.
mkSnapshotFuturesSnapshotVosData ::
  -- | 'snapshotFuturesSnapshotVosDataAssets'
  [SnapshotFuturesSnapshotVosDataAssets] ->
  -- | 'snapshotFuturesSnapshotVosDataPosition'
  [SnapshotFuturesSnapshotVosDataPosition] ->
  SnapshotFuturesSnapshotVosData
mkSnapshotFuturesSnapshotVosData snapshotFuturesSnapshotVosDataAssets snapshotFuturesSnapshotVosDataPosition =
  SnapshotFuturesSnapshotVosData
    { snapshotFuturesSnapshotVosDataAssets = snapshotFuturesSnapshotVosDataAssets,
      snapshotFuturesSnapshotVosDataPosition = snapshotFuturesSnapshotVosDataPosition
    }

-- | Defines the object schema located at @components.schemas.snapshotFutures.properties.snapshotVos.items.properties.data.properties.assets.items@ in the specification.
data SnapshotFuturesSnapshotVosDataAssets = SnapshotFuturesSnapshotVosDataAssets
  { -- | asset
    snapshotFuturesSnapshotVosDataAssetsAsset :: Data.Text.Internal.Text,
    -- | marginBalance
    snapshotFuturesSnapshotVosDataAssetsMarginBalance :: Data.Text.Internal.Text,
    -- | walletBalance
    snapshotFuturesSnapshotVosDataAssetsWalletBalance :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SnapshotFuturesSnapshotVosDataAssets where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataAssetsAsset obj] : ["marginBalance" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataAssetsMarginBalance obj] : ["walletBalance" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataAssetsWalletBalance obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataAssetsAsset obj] : ["marginBalance" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataAssetsMarginBalance obj] : ["walletBalance" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataAssetsWalletBalance obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SnapshotFuturesSnapshotVosDataAssets where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SnapshotFuturesSnapshotVosDataAssets" (\obj -> ((GHC.Base.pure SnapshotFuturesSnapshotVosDataAssets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "marginBalance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "walletBalance"))

-- | Create a new 'SnapshotFuturesSnapshotVosDataAssets' with all required fields.
mkSnapshotFuturesSnapshotVosDataAssets ::
  -- | 'snapshotFuturesSnapshotVosDataAssetsAsset'
  Data.Text.Internal.Text ->
  -- | 'snapshotFuturesSnapshotVosDataAssetsMarginBalance'
  Data.Text.Internal.Text ->
  -- | 'snapshotFuturesSnapshotVosDataAssetsWalletBalance'
  Data.Text.Internal.Text ->
  SnapshotFuturesSnapshotVosDataAssets
mkSnapshotFuturesSnapshotVosDataAssets snapshotFuturesSnapshotVosDataAssetsAsset snapshotFuturesSnapshotVosDataAssetsMarginBalance snapshotFuturesSnapshotVosDataAssetsWalletBalance =
  SnapshotFuturesSnapshotVosDataAssets
    { snapshotFuturesSnapshotVosDataAssetsAsset = snapshotFuturesSnapshotVosDataAssetsAsset,
      snapshotFuturesSnapshotVosDataAssetsMarginBalance = snapshotFuturesSnapshotVosDataAssetsMarginBalance,
      snapshotFuturesSnapshotVosDataAssetsWalletBalance = snapshotFuturesSnapshotVosDataAssetsWalletBalance
    }

-- | Defines the object schema located at @components.schemas.snapshotFutures.properties.snapshotVos.items.properties.data.properties.position.items@ in the specification.
data SnapshotFuturesSnapshotVosDataPosition = SnapshotFuturesSnapshotVosDataPosition
  { -- | entryPrice
    snapshotFuturesSnapshotVosDataPositionEntryPrice :: Data.Text.Internal.Text,
    -- | markPrice
    snapshotFuturesSnapshotVosDataPositionMarkPrice :: Data.Text.Internal.Text,
    -- | positionAmt
    snapshotFuturesSnapshotVosDataPositionPositionAmt :: Data.Text.Internal.Text,
    -- | symbol
    snapshotFuturesSnapshotVosDataPositionSymbol :: Data.Text.Internal.Text,
    -- | unRealizedProfit
    snapshotFuturesSnapshotVosDataPositionUnRealizedProfit :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SnapshotFuturesSnapshotVosDataPosition where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["entryPrice" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionEntryPrice obj] : ["markPrice" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionMarkPrice obj] : ["positionAmt" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionPositionAmt obj] : ["symbol" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionSymbol obj] : ["unRealizedProfit" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionUnRealizedProfit obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["entryPrice" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionEntryPrice obj] : ["markPrice" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionMarkPrice obj] : ["positionAmt" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionPositionAmt obj] : ["symbol" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionSymbol obj] : ["unRealizedProfit" Data.Aeson.Types.ToJSON..= snapshotFuturesSnapshotVosDataPositionUnRealizedProfit obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SnapshotFuturesSnapshotVosDataPosition where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SnapshotFuturesSnapshotVosDataPosition" (\obj -> ((((GHC.Base.pure SnapshotFuturesSnapshotVosDataPosition GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "entryPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "markPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "positionAmt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unRealizedProfit"))

-- | Create a new 'SnapshotFuturesSnapshotVosDataPosition' with all required fields.
mkSnapshotFuturesSnapshotVosDataPosition ::
  -- | 'snapshotFuturesSnapshotVosDataPositionEntryPrice'
  Data.Text.Internal.Text ->
  -- | 'snapshotFuturesSnapshotVosDataPositionMarkPrice'
  Data.Text.Internal.Text ->
  -- | 'snapshotFuturesSnapshotVosDataPositionPositionAmt'
  Data.Text.Internal.Text ->
  -- | 'snapshotFuturesSnapshotVosDataPositionSymbol'
  Data.Text.Internal.Text ->
  -- | 'snapshotFuturesSnapshotVosDataPositionUnRealizedProfit'
  Data.Text.Internal.Text ->
  SnapshotFuturesSnapshotVosDataPosition
mkSnapshotFuturesSnapshotVosDataPosition snapshotFuturesSnapshotVosDataPositionEntryPrice snapshotFuturesSnapshotVosDataPositionMarkPrice snapshotFuturesSnapshotVosDataPositionPositionAmt snapshotFuturesSnapshotVosDataPositionSymbol snapshotFuturesSnapshotVosDataPositionUnRealizedProfit =
  SnapshotFuturesSnapshotVosDataPosition
    { snapshotFuturesSnapshotVosDataPositionEntryPrice = snapshotFuturesSnapshotVosDataPositionEntryPrice,
      snapshotFuturesSnapshotVosDataPositionMarkPrice = snapshotFuturesSnapshotVosDataPositionMarkPrice,
      snapshotFuturesSnapshotVosDataPositionPositionAmt = snapshotFuturesSnapshotVosDataPositionPositionAmt,
      snapshotFuturesSnapshotVosDataPositionSymbol = snapshotFuturesSnapshotVosDataPositionSymbol,
      snapshotFuturesSnapshotVosDataPositionUnRealizedProfit = snapshotFuturesSnapshotVosDataPositionUnRealizedProfit
    }
