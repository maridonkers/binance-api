{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Ticker
module Binance.Types.Ticker where

import qualified Binance.Common
import Binance.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ticker@ in the specification.
data Ticker = Ticker
  { -- | askPrice
    tickerAskPrice :: Data.Text.Internal.Text,
    -- | askQty
    tickerAskQty :: Data.Text.Internal.Text,
    -- | bidPrice
    tickerBidPrice :: Data.Text.Internal.Text,
    -- | bidQty
    tickerBidQty :: Data.Text.Internal.Text,
    -- | closeTime
    tickerCloseTime :: GHC.Int.Int64,
    -- | count
    tickerCount :: GHC.Int.Int64,
    -- | firstId
    tickerFirstId :: GHC.Int.Int64,
    -- | highPrice
    tickerHighPrice :: Data.Text.Internal.Text,
    -- | lastId
    tickerLastId :: GHC.Int.Int64,
    -- | lastPrice
    tickerLastPrice :: Data.Text.Internal.Text,
    -- | lowPrice
    tickerLowPrice :: Data.Text.Internal.Text,
    -- | openPrice
    tickerOpenPrice :: Data.Text.Internal.Text,
    -- | openTime
    tickerOpenTime :: GHC.Int.Int64,
    -- | prevClosePrice
    tickerPrevClosePrice :: Data.Text.Internal.Text,
    -- | priceChange
    tickerPriceChange :: Data.Text.Internal.Text,
    -- | priceChangePercent
    tickerPriceChangePercent :: Data.Text.Internal.Text,
    -- | quoteVolume
    tickerQuoteVolume :: Data.Text.Internal.Text,
    -- | symbol
    tickerSymbol :: Data.Text.Internal.Text,
    -- | volume
    tickerVolume :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Ticker where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["askPrice" Data.Aeson.Types.ToJSON..= tickerAskPrice obj] : ["askQty" Data.Aeson.Types.ToJSON..= tickerAskQty obj] : ["bidPrice" Data.Aeson.Types.ToJSON..= tickerBidPrice obj] : ["bidQty" Data.Aeson.Types.ToJSON..= tickerBidQty obj] : ["closeTime" Data.Aeson.Types.ToJSON..= tickerCloseTime obj] : ["count" Data.Aeson.Types.ToJSON..= tickerCount obj] : ["firstId" Data.Aeson.Types.ToJSON..= tickerFirstId obj] : ["highPrice" Data.Aeson.Types.ToJSON..= tickerHighPrice obj] : ["lastId" Data.Aeson.Types.ToJSON..= tickerLastId obj] : ["lastPrice" Data.Aeson.Types.ToJSON..= tickerLastPrice obj] : ["lowPrice" Data.Aeson.Types.ToJSON..= tickerLowPrice obj] : ["openPrice" Data.Aeson.Types.ToJSON..= tickerOpenPrice obj] : ["openTime" Data.Aeson.Types.ToJSON..= tickerOpenTime obj] : ["prevClosePrice" Data.Aeson.Types.ToJSON..= tickerPrevClosePrice obj] : ["priceChange" Data.Aeson.Types.ToJSON..= tickerPriceChange obj] : ["priceChangePercent" Data.Aeson.Types.ToJSON..= tickerPriceChangePercent obj] : ["quoteVolume" Data.Aeson.Types.ToJSON..= tickerQuoteVolume obj] : ["symbol" Data.Aeson.Types.ToJSON..= tickerSymbol obj] : ["volume" Data.Aeson.Types.ToJSON..= tickerVolume obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["askPrice" Data.Aeson.Types.ToJSON..= tickerAskPrice obj] : ["askQty" Data.Aeson.Types.ToJSON..= tickerAskQty obj] : ["bidPrice" Data.Aeson.Types.ToJSON..= tickerBidPrice obj] : ["bidQty" Data.Aeson.Types.ToJSON..= tickerBidQty obj] : ["closeTime" Data.Aeson.Types.ToJSON..= tickerCloseTime obj] : ["count" Data.Aeson.Types.ToJSON..= tickerCount obj] : ["firstId" Data.Aeson.Types.ToJSON..= tickerFirstId obj] : ["highPrice" Data.Aeson.Types.ToJSON..= tickerHighPrice obj] : ["lastId" Data.Aeson.Types.ToJSON..= tickerLastId obj] : ["lastPrice" Data.Aeson.Types.ToJSON..= tickerLastPrice obj] : ["lowPrice" Data.Aeson.Types.ToJSON..= tickerLowPrice obj] : ["openPrice" Data.Aeson.Types.ToJSON..= tickerOpenPrice obj] : ["openTime" Data.Aeson.Types.ToJSON..= tickerOpenTime obj] : ["prevClosePrice" Data.Aeson.Types.ToJSON..= tickerPrevClosePrice obj] : ["priceChange" Data.Aeson.Types.ToJSON..= tickerPriceChange obj] : ["priceChangePercent" Data.Aeson.Types.ToJSON..= tickerPriceChangePercent obj] : ["quoteVolume" Data.Aeson.Types.ToJSON..= tickerQuoteVolume obj] : ["symbol" Data.Aeson.Types.ToJSON..= tickerSymbol obj] : ["volume" Data.Aeson.Types.ToJSON..= tickerVolume obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Ticker where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Ticker" (\obj -> ((((((((((((((((((GHC.Base.pure Ticker GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "askPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "askQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bidPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bidQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "closeTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "firstId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "highPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lastId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lastPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lowPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "openPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "openTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "prevClosePrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "priceChange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "priceChangePercent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteVolume")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "volume"))

-- | Create a new 'Ticker' with all required fields.
mkTicker ::
  -- | 'tickerAskPrice'
  Data.Text.Internal.Text ->
  -- | 'tickerAskQty'
  Data.Text.Internal.Text ->
  -- | 'tickerBidPrice'
  Data.Text.Internal.Text ->
  -- | 'tickerBidQty'
  Data.Text.Internal.Text ->
  -- | 'tickerCloseTime'
  GHC.Int.Int64 ->
  -- | 'tickerCount'
  GHC.Int.Int64 ->
  -- | 'tickerFirstId'
  GHC.Int.Int64 ->
  -- | 'tickerHighPrice'
  Data.Text.Internal.Text ->
  -- | 'tickerLastId'
  GHC.Int.Int64 ->
  -- | 'tickerLastPrice'
  Data.Text.Internal.Text ->
  -- | 'tickerLowPrice'
  Data.Text.Internal.Text ->
  -- | 'tickerOpenPrice'
  Data.Text.Internal.Text ->
  -- | 'tickerOpenTime'
  GHC.Int.Int64 ->
  -- | 'tickerPrevClosePrice'
  Data.Text.Internal.Text ->
  -- | 'tickerPriceChange'
  Data.Text.Internal.Text ->
  -- | 'tickerPriceChangePercent'
  Data.Text.Internal.Text ->
  -- | 'tickerQuoteVolume'
  Data.Text.Internal.Text ->
  -- | 'tickerSymbol'
  Data.Text.Internal.Text ->
  -- | 'tickerVolume'
  Data.Text.Internal.Text ->
  Ticker
mkTicker tickerAskPrice tickerAskQty tickerBidPrice tickerBidQty tickerCloseTime tickerCount tickerFirstId tickerHighPrice tickerLastId tickerLastPrice tickerLowPrice tickerOpenPrice tickerOpenTime tickerPrevClosePrice tickerPriceChange tickerPriceChangePercent tickerQuoteVolume tickerSymbol tickerVolume =
  Ticker
    { tickerAskPrice = tickerAskPrice,
      tickerAskQty = tickerAskQty,
      tickerBidPrice = tickerBidPrice,
      tickerBidQty = tickerBidQty,
      tickerCloseTime = tickerCloseTime,
      tickerCount = tickerCount,
      tickerFirstId = tickerFirstId,
      tickerHighPrice = tickerHighPrice,
      tickerLastId = tickerLastId,
      tickerLastPrice = tickerLastPrice,
      tickerLowPrice = tickerLowPrice,
      tickerOpenPrice = tickerOpenPrice,
      tickerOpenTime = tickerOpenTime,
      tickerPrevClosePrice = tickerPrevClosePrice,
      tickerPriceChange = tickerPriceChange,
      tickerPriceChangePercent = tickerPriceChangePercent,
      tickerQuoteVolume = tickerQuoteVolume,
      tickerSymbol = tickerSymbol,
      tickerVolume = tickerVolume
    }
