{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BlvtTokenInfo
module Binance.Operations.GetSapiV1BlvtTokenInfo where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/blvt/tokenInfo
--
-- Weight(IP): 1
getSapiV1BlvtTokenInfo ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | tokenName: BTCDOWN, BTCUP
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BlvtTokenInfoResponse)
getSapiV1BlvtTokenInfo tokenName =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BlvtTokenInfoResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BlvtTokenInfoResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1BlvtTokenInfoResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BlvtTokenInfoResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/blvt/tokenInfo") [Binance.Common.QueryParameter (Data.Text.pack "tokenName") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> tokenName) (Data.Text.pack "form") GHC.Types.False])

-- | Represents a response of the operation 'getSapiV1BlvtTokenInfo'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BlvtTokenInfoResponseError' is used.
data GetSapiV1BlvtTokenInfoResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BlvtTokenInfoResponseError GHC.Base.String
  | -- | List of token information
    GetSapiV1BlvtTokenInfoResponse200 ([GetSapiV1BlvtTokenInfoResponseBody200])
  | -- | Bad Request
    GetSapiV1BlvtTokenInfoResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/blvt\/tokenInfo.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1BlvtTokenInfoResponseBody200 = GetSapiV1BlvtTokenInfoResponseBody200
  { -- | basket
    getSapiV1BlvtTokenInfoResponseBody200Basket :: Data.Text.Internal.Text,
    -- | currentBaskets
    getSapiV1BlvtTokenInfoResponseBody200CurrentBaskets :: ([GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets]),
    -- | dailyManagementFee
    getSapiV1BlvtTokenInfoResponseBody200DailyManagementFee :: Data.Text.Internal.Text,
    -- | dailyPurchaseLimit
    getSapiV1BlvtTokenInfoResponseBody200DailyPurchaseLimit :: Data.Text.Internal.Text,
    -- | dailyRedeemLimit
    getSapiV1BlvtTokenInfoResponseBody200DailyRedeemLimit :: Data.Text.Internal.Text,
    -- | description
    getSapiV1BlvtTokenInfoResponseBody200Description :: Data.Text.Internal.Text,
    -- | fundingRate
    getSapiV1BlvtTokenInfoResponseBody200FundingRate :: Data.Text.Internal.Text,
    -- | nav
    getSapiV1BlvtTokenInfoResponseBody200Nav :: Data.Text.Internal.Text,
    -- | purchaseFeePct
    getSapiV1BlvtTokenInfoResponseBody200PurchaseFeePct :: Data.Text.Internal.Text,
    -- | realLeverage
    getSapiV1BlvtTokenInfoResponseBody200RealLeverage :: Data.Text.Internal.Text,
    -- | redeemFeePct
    getSapiV1BlvtTokenInfoResponseBody200RedeemFeePct :: Data.Text.Internal.Text,
    -- | timestamp
    getSapiV1BlvtTokenInfoResponseBody200Timestamp :: GHC.Int.Int64,
    -- | tokenIssued
    getSapiV1BlvtTokenInfoResponseBody200TokenIssued :: Data.Text.Internal.Text,
    -- | tokenName
    getSapiV1BlvtTokenInfoResponseBody200TokenName :: Data.Text.Internal.Text,
    -- | underlying
    getSapiV1BlvtTokenInfoResponseBody200Underlying :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BlvtTokenInfoResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["basket" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Basket obj] : ["currentBaskets" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200CurrentBaskets obj] : ["dailyManagementFee" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200DailyManagementFee obj] : ["dailyPurchaseLimit" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200DailyPurchaseLimit obj] : ["dailyRedeemLimit" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200DailyRedeemLimit obj] : ["description" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Description obj] : ["fundingRate" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200FundingRate obj] : ["nav" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Nav obj] : ["purchaseFeePct" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200PurchaseFeePct obj] : ["realLeverage" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200RealLeverage obj] : ["redeemFeePct" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200RedeemFeePct obj] : ["timestamp" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Timestamp obj] : ["tokenIssued" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200TokenIssued obj] : ["tokenName" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200TokenName obj] : ["underlying" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Underlying obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["basket" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Basket obj] : ["currentBaskets" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200CurrentBaskets obj] : ["dailyManagementFee" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200DailyManagementFee obj] : ["dailyPurchaseLimit" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200DailyPurchaseLimit obj] : ["dailyRedeemLimit" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200DailyRedeemLimit obj] : ["description" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Description obj] : ["fundingRate" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200FundingRate obj] : ["nav" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Nav obj] : ["purchaseFeePct" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200PurchaseFeePct obj] : ["realLeverage" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200RealLeverage obj] : ["redeemFeePct" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200RedeemFeePct obj] : ["timestamp" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Timestamp obj] : ["tokenIssued" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200TokenIssued obj] : ["tokenName" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200TokenName obj] : ["underlying" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200Underlying obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BlvtTokenInfoResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BlvtTokenInfoResponseBody200" (\obj -> ((((((((((((((GHC.Base.pure GetSapiV1BlvtTokenInfoResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "basket")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currentBaskets")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dailyManagementFee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dailyPurchaseLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dailyRedeemLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fundingRate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "nav")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "purchaseFeePct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "realLeverage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redeemFeePct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokenIssued")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokenName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "underlying"))

-- | Create a new 'GetSapiV1BlvtTokenInfoResponseBody200' with all required fields.
mkGetSapiV1BlvtTokenInfoResponseBody200 ::
  -- | 'getSapiV1BlvtTokenInfoResponseBody200Basket'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200CurrentBaskets'
  [GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets] ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200DailyManagementFee'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200DailyPurchaseLimit'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200DailyRedeemLimit'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200Description'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200FundingRate'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200Nav'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200PurchaseFeePct'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200RealLeverage'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200RedeemFeePct'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200Timestamp'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200TokenIssued'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200TokenName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200Underlying'
  Data.Text.Internal.Text ->
  GetSapiV1BlvtTokenInfoResponseBody200
mkGetSapiV1BlvtTokenInfoResponseBody200 getSapiV1BlvtTokenInfoResponseBody200Basket getSapiV1BlvtTokenInfoResponseBody200CurrentBaskets getSapiV1BlvtTokenInfoResponseBody200DailyManagementFee getSapiV1BlvtTokenInfoResponseBody200DailyPurchaseLimit getSapiV1BlvtTokenInfoResponseBody200DailyRedeemLimit getSapiV1BlvtTokenInfoResponseBody200Description getSapiV1BlvtTokenInfoResponseBody200FundingRate getSapiV1BlvtTokenInfoResponseBody200Nav getSapiV1BlvtTokenInfoResponseBody200PurchaseFeePct getSapiV1BlvtTokenInfoResponseBody200RealLeverage getSapiV1BlvtTokenInfoResponseBody200RedeemFeePct getSapiV1BlvtTokenInfoResponseBody200Timestamp getSapiV1BlvtTokenInfoResponseBody200TokenIssued getSapiV1BlvtTokenInfoResponseBody200TokenName getSapiV1BlvtTokenInfoResponseBody200Underlying =
  GetSapiV1BlvtTokenInfoResponseBody200
    { getSapiV1BlvtTokenInfoResponseBody200Basket = getSapiV1BlvtTokenInfoResponseBody200Basket,
      getSapiV1BlvtTokenInfoResponseBody200CurrentBaskets = getSapiV1BlvtTokenInfoResponseBody200CurrentBaskets,
      getSapiV1BlvtTokenInfoResponseBody200DailyManagementFee = getSapiV1BlvtTokenInfoResponseBody200DailyManagementFee,
      getSapiV1BlvtTokenInfoResponseBody200DailyPurchaseLimit = getSapiV1BlvtTokenInfoResponseBody200DailyPurchaseLimit,
      getSapiV1BlvtTokenInfoResponseBody200DailyRedeemLimit = getSapiV1BlvtTokenInfoResponseBody200DailyRedeemLimit,
      getSapiV1BlvtTokenInfoResponseBody200Description = getSapiV1BlvtTokenInfoResponseBody200Description,
      getSapiV1BlvtTokenInfoResponseBody200FundingRate = getSapiV1BlvtTokenInfoResponseBody200FundingRate,
      getSapiV1BlvtTokenInfoResponseBody200Nav = getSapiV1BlvtTokenInfoResponseBody200Nav,
      getSapiV1BlvtTokenInfoResponseBody200PurchaseFeePct = getSapiV1BlvtTokenInfoResponseBody200PurchaseFeePct,
      getSapiV1BlvtTokenInfoResponseBody200RealLeverage = getSapiV1BlvtTokenInfoResponseBody200RealLeverage,
      getSapiV1BlvtTokenInfoResponseBody200RedeemFeePct = getSapiV1BlvtTokenInfoResponseBody200RedeemFeePct,
      getSapiV1BlvtTokenInfoResponseBody200Timestamp = getSapiV1BlvtTokenInfoResponseBody200Timestamp,
      getSapiV1BlvtTokenInfoResponseBody200TokenIssued = getSapiV1BlvtTokenInfoResponseBody200TokenIssued,
      getSapiV1BlvtTokenInfoResponseBody200TokenName = getSapiV1BlvtTokenInfoResponseBody200TokenName,
      getSapiV1BlvtTokenInfoResponseBody200Underlying = getSapiV1BlvtTokenInfoResponseBody200Underlying
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/blvt\/tokenInfo.GET.responses.200.content.application\/json.schema.items.properties.currentBaskets.items@ in the specification.
data GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets = GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets
  { -- | amount
    getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsAmount :: Data.Text.Internal.Text,
    -- | notionalValue
    getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsNotionalValue :: Data.Text.Internal.Text,
    -- | symbol
    getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsSymbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsAmount obj] : ["notionalValue" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsNotionalValue obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsSymbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsAmount obj] : ["notionalValue" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsNotionalValue obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsSymbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets" (\obj -> ((GHC.Base.pure GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "notionalValue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets' with all required fields.
mkGetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets ::
  -- | 'getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsNotionalValue'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsSymbol'
  Data.Text.Internal.Text ->
  GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets
mkGetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsAmount getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsNotionalValue getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsSymbol =
  GetSapiV1BlvtTokenInfoResponseBody200CurrentBaskets
    { getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsAmount = getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsAmount,
      getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsNotionalValue = getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsNotionalValue,
      getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsSymbol = getSapiV1BlvtTokenInfoResponseBody200CurrentBasketsSymbol
    }

-- | > GET /sapi/v1/blvt/tokenInfo
--
-- The same as 'getSapiV1BlvtTokenInfo' but accepts an explicit configuration.
getSapiV1BlvtTokenInfoWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | tokenName: BTCDOWN, BTCUP
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BlvtTokenInfoResponse)
getSapiV1BlvtTokenInfoWithConfiguration
  config
  tokenName =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BlvtTokenInfoResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BlvtTokenInfoResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1BlvtTokenInfoResponseBody200])
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BlvtTokenInfoResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/blvt/tokenInfo") [Binance.Common.QueryParameter (Data.Text.pack "tokenName") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> tokenName) (Data.Text.pack "form") GHC.Types.False])

-- | > GET /sapi/v1/blvt/tokenInfo
--
-- The same as 'getSapiV1BlvtTokenInfo' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BlvtTokenInfoRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | tokenName: BTCDOWN, BTCUP
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BlvtTokenInfoRaw tokenName = GHC.Base.id (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/blvt/tokenInfo") [Binance.Common.QueryParameter (Data.Text.pack "tokenName") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> tokenName) (Data.Text.pack "form") GHC.Types.False])

-- | > GET /sapi/v1/blvt/tokenInfo
--
-- The same as 'getSapiV1BlvtTokenInfo' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BlvtTokenInfoWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | tokenName: BTCDOWN, BTCUP
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BlvtTokenInfoWithConfigurationRaw
  config
  tokenName = GHC.Base.id (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/blvt/tokenInfo") [Binance.Common.QueryParameter (Data.Text.pack "tokenName") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> tokenName) (Data.Text.pack "form") GHC.Types.False])
