{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1AlgoFuturesNewOrderVp
module Binance.Operations.PostSapiV1AlgoFuturesNewOrderVp where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/algo/futures/newOrderVp
--
-- Send in a VP new order. Only support on USDⓈ-M Contracts.
--
-- - You need to enable \`Futures Trading Permission\` for the api key which requests this endpoint.
-- - Base URL: https:\/\/api.binance.com
--
-- - Total Algo open orders max allowed: 10 orders.
-- - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
-- - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints（GET sapi\/v1\/algo\/futures\/openOrders or GET sapi\/v1\/algo\/futures\/historicalOrders） to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it.
--
-- Weight(UID): 3000
postSapiV1AlgoFuturesNewOrderVp ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AlgoFuturesNewOrderVpParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1AlgoFuturesNewOrderVpResponse)
postSapiV1AlgoFuturesNewOrderVp parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1AlgoFuturesNewOrderVpResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AlgoFuturesNewOrderVpResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1AlgoFuturesNewOrderVpResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AlgoFuturesNewOrderVpResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AlgoFuturesNewOrderVpResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/algo/futures/newOrderVp")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "positionSide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "urgency") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "clientAlgoId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryClientAlgoId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "reduceOnly") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryReduceOnly parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limitPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryLimitPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/algo\/futures\/newOrderVp.POST.parameters@ in the specification.
data PostSapiV1AlgoFuturesNewOrderVpParameters = PostSapiV1AlgoFuturesNewOrderVpParameters
  { -- | queryClientAlgoId: Represents the parameter named \'clientAlgoId\'
    --
    -- A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
    postSapiV1AlgoFuturesNewOrderVpParametersQueryClientAlgoId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryLimitPrice: Represents the parameter named \'limitPrice\'
    --
    -- Limit price of the order; If it is not sent, will place order by market price by default
    postSapiV1AlgoFuturesNewOrderVpParametersQueryLimitPrice :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryPositionSide: Represents the parameter named \'positionSide\'
    --
    -- Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
    postSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide :: (GHC.Maybe.Maybe PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide),
    -- | queryQuantity: Represents the parameter named \'quantity\'
    --
    -- Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
    postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity :: GHC.Types.Double,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1AlgoFuturesNewOrderVpParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryReduceOnly: Represents the parameter named \'reduceOnly\'
    --
    -- \'true\' or \'false\'. Default \'false\'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
    postSapiV1AlgoFuturesNewOrderVpParametersQueryReduceOnly :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | querySide: Represents the parameter named \'side\'
    postSapiV1AlgoFuturesNewOrderVpParametersQuerySide :: PostSapiV1AlgoFuturesNewOrderVpParametersQuerySide,
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryUrgency: Represents the parameter named \'urgency\'
    --
    -- Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
    postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency :: PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AlgoFuturesNewOrderVpParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClientAlgoId" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryClientAlgoId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimitPrice" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPositionSide" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide obj) : ["queryQuantity" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryRecvWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryReduceOnly" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryReduceOnly obj) : ["querySide" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQuerySide obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp obj] : ["queryUrgency" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClientAlgoId" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryClientAlgoId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimitPrice" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPositionSide" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide obj) : ["queryQuantity" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryRecvWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryReduceOnly" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderVpParametersQueryReduceOnly obj) : ["querySide" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQuerySide obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp obj] : ["queryUrgency" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AlgoFuturesNewOrderVpParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AlgoFuturesNewOrderVpParameters" (\obj -> ((((((((((GHC.Base.pure PostSapiV1AlgoFuturesNewOrderVpParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryClientAlgoId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimitPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPositionSide")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryReduceOnly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySide")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryUrgency"))

-- | Create a new 'PostSapiV1AlgoFuturesNewOrderVpParameters' with all required fields.
mkPostSapiV1AlgoFuturesNewOrderVpParameters ::
  -- | 'postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity'
  GHC.Types.Double ->
  -- | 'postSapiV1AlgoFuturesNewOrderVpParametersQuerySide'
  PostSapiV1AlgoFuturesNewOrderVpParametersQuerySide ->
  -- | 'postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency'
  PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency ->
  PostSapiV1AlgoFuturesNewOrderVpParameters
mkPostSapiV1AlgoFuturesNewOrderVpParameters postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity postSapiV1AlgoFuturesNewOrderVpParametersQuerySide postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency =
  PostSapiV1AlgoFuturesNewOrderVpParameters
    { postSapiV1AlgoFuturesNewOrderVpParametersQueryClientAlgoId = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderVpParametersQueryLimitPrice = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity = postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity,
      postSapiV1AlgoFuturesNewOrderVpParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderVpParametersQueryReduceOnly = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderVpParametersQuerySide = postSapiV1AlgoFuturesNewOrderVpParametersQuerySide,
      postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature = postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature,
      postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol = postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol,
      postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp = postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp,
      postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency = postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/algo\/futures\/newOrderVp.POST.parameters.properties.queryPositionSide@ in the specification.
--
-- Represents the parameter named \'positionSide\'
--
-- Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
data PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"BOTH"@
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideEnumBOTH
  | -- | Represents the JSON value @"LONG"@
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideEnumLONG
  | -- | Represents the JSON value @"SHORT"@
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideEnumSHORT
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide where
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideOther val) = val
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideEnumBOTH) = "BOTH"
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideEnumLONG) = "LONG"
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideEnumSHORT) = "SHORT"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "BOTH" -> PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideEnumBOTH
            | val GHC.Classes.== "LONG" -> PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideEnumLONG
            | val GHC.Classes.== "SHORT" -> PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideEnumSHORT
            | GHC.Base.otherwise -> PostSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSideOther val
      )

-- | Defines the enum schema located at @paths.\/sapi\/v1\/algo\/futures\/newOrderVp.POST.parameters.properties.querySide@ in the specification.
--
-- Represents the parameter named \'side\'
data PostSapiV1AlgoFuturesNewOrderVpParametersQuerySide
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"SELL"@
    PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideEnumSELL
  | -- | Represents the JSON value @"BUY"@
    PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideEnumBUY
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AlgoFuturesNewOrderVpParametersQuerySide where
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideOther val) = val
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideEnumSELL) = "SELL"
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideEnumBUY) = "BUY"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AlgoFuturesNewOrderVpParametersQuerySide where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "SELL" -> PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideEnumSELL
            | val GHC.Classes.== "BUY" -> PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideEnumBUY
            | GHC.Base.otherwise -> PostSapiV1AlgoFuturesNewOrderVpParametersQuerySideOther val
      )

-- | Defines the enum schema located at @paths.\/sapi\/v1\/algo\/futures\/newOrderVp.POST.parameters.properties.queryUrgency@ in the specification.
--
-- Represents the parameter named \'urgency\'
--
-- Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
data PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"LOW"@
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyEnumLOW
  | -- | Represents the JSON value @"MEDIUM"@
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyEnumMEDIUM
  | -- | Represents the JSON value @"HIGH"@
    PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyEnumHIGH
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency where
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyOther val) = val
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyEnumLOW) = "LOW"
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyEnumMEDIUM) = "MEDIUM"
  toJSON (PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyEnumHIGH) = "HIGH"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "LOW" -> PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyEnumLOW
            | val GHC.Classes.== "MEDIUM" -> PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyEnumMEDIUM
            | val GHC.Classes.== "HIGH" -> PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyEnumHIGH
            | GHC.Base.otherwise -> PostSapiV1AlgoFuturesNewOrderVpParametersQueryUrgencyOther val
      )

-- | Represents a response of the operation 'postSapiV1AlgoFuturesNewOrderVp'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1AlgoFuturesNewOrderVpResponseError' is used.
data PostSapiV1AlgoFuturesNewOrderVpResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1AlgoFuturesNewOrderVpResponseError GHC.Base.String
  | -- | Volume Participation(VP) Order
    PostSapiV1AlgoFuturesNewOrderVpResponse200 PostSapiV1AlgoFuturesNewOrderVpResponseBody200
  | -- | Bad Request
    PostSapiV1AlgoFuturesNewOrderVpResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1AlgoFuturesNewOrderVpResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/algo\/futures\/newOrderVp.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1AlgoFuturesNewOrderVpResponseBody200 = PostSapiV1AlgoFuturesNewOrderVpResponseBody200
  { -- | clientAlgoId
    postSapiV1AlgoFuturesNewOrderVpResponseBody200ClientAlgoId :: Data.Text.Internal.Text,
    -- | code
    postSapiV1AlgoFuturesNewOrderVpResponseBody200Code :: GHC.Int.Int64,
    -- | msg
    postSapiV1AlgoFuturesNewOrderVpResponseBody200Msg :: Data.Text.Internal.Text,
    -- | success
    postSapiV1AlgoFuturesNewOrderVpResponseBody200Success :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AlgoFuturesNewOrderVpResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientAlgoId" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpResponseBody200ClientAlgoId obj] : ["code" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpResponseBody200Code obj] : ["msg" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpResponseBody200Msg obj] : ["success" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpResponseBody200Success obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientAlgoId" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpResponseBody200ClientAlgoId obj] : ["code" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpResponseBody200Code obj] : ["msg" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpResponseBody200Msg obj] : ["success" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderVpResponseBody200Success obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AlgoFuturesNewOrderVpResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AlgoFuturesNewOrderVpResponseBody200" (\obj -> (((GHC.Base.pure PostSapiV1AlgoFuturesNewOrderVpResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientAlgoId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "msg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success"))

-- | Create a new 'PostSapiV1AlgoFuturesNewOrderVpResponseBody200' with all required fields.
mkPostSapiV1AlgoFuturesNewOrderVpResponseBody200 ::
  -- | 'postSapiV1AlgoFuturesNewOrderVpResponseBody200ClientAlgoId'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AlgoFuturesNewOrderVpResponseBody200Code'
  GHC.Int.Int64 ->
  -- | 'postSapiV1AlgoFuturesNewOrderVpResponseBody200Msg'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AlgoFuturesNewOrderVpResponseBody200Success'
  GHC.Types.Bool ->
  PostSapiV1AlgoFuturesNewOrderVpResponseBody200
mkPostSapiV1AlgoFuturesNewOrderVpResponseBody200 postSapiV1AlgoFuturesNewOrderVpResponseBody200ClientAlgoId postSapiV1AlgoFuturesNewOrderVpResponseBody200Code postSapiV1AlgoFuturesNewOrderVpResponseBody200Msg postSapiV1AlgoFuturesNewOrderVpResponseBody200Success =
  PostSapiV1AlgoFuturesNewOrderVpResponseBody200
    { postSapiV1AlgoFuturesNewOrderVpResponseBody200ClientAlgoId = postSapiV1AlgoFuturesNewOrderVpResponseBody200ClientAlgoId,
      postSapiV1AlgoFuturesNewOrderVpResponseBody200Code = postSapiV1AlgoFuturesNewOrderVpResponseBody200Code,
      postSapiV1AlgoFuturesNewOrderVpResponseBody200Msg = postSapiV1AlgoFuturesNewOrderVpResponseBody200Msg,
      postSapiV1AlgoFuturesNewOrderVpResponseBody200Success = postSapiV1AlgoFuturesNewOrderVpResponseBody200Success
    }

-- | > POST /sapi/v1/algo/futures/newOrderVp
--
-- The same as 'postSapiV1AlgoFuturesNewOrderVp' but accepts an explicit configuration.
postSapiV1AlgoFuturesNewOrderVpWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AlgoFuturesNewOrderVpParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1AlgoFuturesNewOrderVpResponse)
postSapiV1AlgoFuturesNewOrderVpWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1AlgoFuturesNewOrderVpResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AlgoFuturesNewOrderVpResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1AlgoFuturesNewOrderVpResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AlgoFuturesNewOrderVpResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AlgoFuturesNewOrderVpResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/algo/futures/newOrderVp")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "positionSide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "urgency") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "clientAlgoId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryClientAlgoId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "reduceOnly") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryReduceOnly parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limitPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryLimitPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/algo/futures/newOrderVp
--
-- The same as 'postSapiV1AlgoFuturesNewOrderVp' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AlgoFuturesNewOrderVpRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AlgoFuturesNewOrderVpParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AlgoFuturesNewOrderVpRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/algo/futures/newOrderVp")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "positionSide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "urgency") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "clientAlgoId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryClientAlgoId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "reduceOnly") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryReduceOnly parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limitPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryLimitPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/algo/futures/newOrderVp
--
-- The same as 'postSapiV1AlgoFuturesNewOrderVp' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AlgoFuturesNewOrderVpWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AlgoFuturesNewOrderVpParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AlgoFuturesNewOrderVpWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/algo/futures/newOrderVp")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "positionSide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryPositionSide parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "urgency") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryUrgency parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "clientAlgoId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryClientAlgoId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "reduceOnly") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryReduceOnly parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limitPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryLimitPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderVpParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderVpParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
