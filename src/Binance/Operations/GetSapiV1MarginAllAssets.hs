{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MarginAllAssets
module Binance.Operations.GetSapiV1MarginAllAssets where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/margin/allAssets
--
-- Weight(IP): 1
getSapiV1MarginAllAssets :: forall m. Binance.Common.MonadHTTP m => -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MarginAllAssetsResponse)
getSapiV1MarginAllAssets =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginAllAssetsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAllAssetsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1MarginAllAssetsResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAllAssetsResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/allAssets") GHC.Base.mempty)

-- | Represents a response of the operation 'getSapiV1MarginAllAssets'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MarginAllAssetsResponseError' is used.
data GetSapiV1MarginAllAssetsResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MarginAllAssetsResponseError GHC.Base.String
  | -- | Assets details
    GetSapiV1MarginAllAssetsResponse200 ([GetSapiV1MarginAllAssetsResponseBody200])
  | -- | Bad Request
    GetSapiV1MarginAllAssetsResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/allAssets.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1MarginAllAssetsResponseBody200 = GetSapiV1MarginAllAssetsResponseBody200
  { -- | assetFullName
    getSapiV1MarginAllAssetsResponseBody200AssetFullName :: Data.Text.Internal.Text,
    -- | assetName
    getSapiV1MarginAllAssetsResponseBody200AssetName :: Data.Text.Internal.Text,
    -- | isBorrowable
    getSapiV1MarginAllAssetsResponseBody200IsBorrowable :: GHC.Types.Bool,
    -- | isMortgageable
    getSapiV1MarginAllAssetsResponseBody200IsMortgageable :: GHC.Types.Bool,
    -- | userMinBorrow
    getSapiV1MarginAllAssetsResponseBody200UserMinBorrow :: Data.Text.Internal.Text,
    -- | userMinRepay
    getSapiV1MarginAllAssetsResponseBody200UserMinRepay :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginAllAssetsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assetFullName" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200AssetFullName obj] : ["assetName" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200AssetName obj] : ["isBorrowable" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200IsBorrowable obj] : ["isMortgageable" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200IsMortgageable obj] : ["userMinBorrow" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200UserMinBorrow obj] : ["userMinRepay" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200UserMinRepay obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assetFullName" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200AssetFullName obj] : ["assetName" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200AssetName obj] : ["isBorrowable" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200IsBorrowable obj] : ["isMortgageable" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200IsMortgageable obj] : ["userMinBorrow" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200UserMinBorrow obj] : ["userMinRepay" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllAssetsResponseBody200UserMinRepay obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginAllAssetsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginAllAssetsResponseBody200" (\obj -> (((((GHC.Base.pure GetSapiV1MarginAllAssetsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assetFullName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assetName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBorrowable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMortgageable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "userMinBorrow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "userMinRepay"))

-- | Create a new 'GetSapiV1MarginAllAssetsResponseBody200' with all required fields.
mkGetSapiV1MarginAllAssetsResponseBody200 ::
  -- | 'getSapiV1MarginAllAssetsResponseBody200AssetFullName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginAllAssetsResponseBody200AssetName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginAllAssetsResponseBody200IsBorrowable'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginAllAssetsResponseBody200IsMortgageable'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginAllAssetsResponseBody200UserMinBorrow'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginAllAssetsResponseBody200UserMinRepay'
  Data.Text.Internal.Text ->
  GetSapiV1MarginAllAssetsResponseBody200
mkGetSapiV1MarginAllAssetsResponseBody200 getSapiV1MarginAllAssetsResponseBody200AssetFullName getSapiV1MarginAllAssetsResponseBody200AssetName getSapiV1MarginAllAssetsResponseBody200IsBorrowable getSapiV1MarginAllAssetsResponseBody200IsMortgageable getSapiV1MarginAllAssetsResponseBody200UserMinBorrow getSapiV1MarginAllAssetsResponseBody200UserMinRepay =
  GetSapiV1MarginAllAssetsResponseBody200
    { getSapiV1MarginAllAssetsResponseBody200AssetFullName = getSapiV1MarginAllAssetsResponseBody200AssetFullName,
      getSapiV1MarginAllAssetsResponseBody200AssetName = getSapiV1MarginAllAssetsResponseBody200AssetName,
      getSapiV1MarginAllAssetsResponseBody200IsBorrowable = getSapiV1MarginAllAssetsResponseBody200IsBorrowable,
      getSapiV1MarginAllAssetsResponseBody200IsMortgageable = getSapiV1MarginAllAssetsResponseBody200IsMortgageable,
      getSapiV1MarginAllAssetsResponseBody200UserMinBorrow = getSapiV1MarginAllAssetsResponseBody200UserMinBorrow,
      getSapiV1MarginAllAssetsResponseBody200UserMinRepay = getSapiV1MarginAllAssetsResponseBody200UserMinRepay
    }

-- | > GET /sapi/v1/margin/allAssets
--
-- The same as 'getSapiV1MarginAllAssets' but accepts an explicit configuration.
getSapiV1MarginAllAssetsWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MarginAllAssetsResponse)
getSapiV1MarginAllAssetsWithConfiguration config =
  GHC.Base.fmap
    ( \response_3 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginAllAssetsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAllAssetsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1MarginAllAssetsResponseBody200])
                                                      )
                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAllAssetsResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_3
          )
          response_3
    )
    (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/allAssets") GHC.Base.mempty)

-- | > GET /sapi/v1/margin/allAssets
--
-- The same as 'getSapiV1MarginAllAssets' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginAllAssetsRaw :: forall m. Binance.Common.MonadHTTP m => -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginAllAssetsRaw = GHC.Base.id (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/allAssets") GHC.Base.mempty)

-- | > GET /sapi/v1/margin/allAssets
--
-- The same as 'getSapiV1MarginAllAssets' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginAllAssetsWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginAllAssetsWithConfigurationRaw config = GHC.Base.id (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/allAssets") GHC.Base.mempty)
