{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getApiV3ExchangeInfo
module Binance.Operations.GetApiV3ExchangeInfo where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /api/v3/exchangeInfo
--
-- Current exchange trading rules and symbol information
--
-- - If any symbol provided in either symbol or symbols do not exist, the endpoint will throw an error.
--
-- Weight(IP): 10
getApiV3ExchangeInfo ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3ExchangeInfoParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetApiV3ExchangeInfoResponse)
getApiV3ExchangeInfo parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetApiV3ExchangeInfoResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3ExchangeInfoResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetApiV3ExchangeInfoResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3ExchangeInfoResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/exchangeInfo")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "permissions") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQueryPermissions parameters) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/exchangeInfo.GET.parameters@ in the specification.
data GetApiV3ExchangeInfoParameters = GetApiV3ExchangeInfoParameters
  { -- | queryPermissions: Represents the parameter named \'permissions\'
    getApiV3ExchangeInfoParametersQueryPermissions :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    getApiV3ExchangeInfoParametersQuerySymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySymbols: Represents the parameter named \'symbols\'
    getApiV3ExchangeInfoParametersQuerySymbols :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3ExchangeInfoParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPermissions" Data.Aeson.Types.ToJSON..=)) (getApiV3ExchangeInfoParametersQueryPermissions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (getApiV3ExchangeInfoParametersQuerySymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbols" Data.Aeson.Types.ToJSON..=)) (getApiV3ExchangeInfoParametersQuerySymbols obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPermissions" Data.Aeson.Types.ToJSON..=)) (getApiV3ExchangeInfoParametersQueryPermissions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (getApiV3ExchangeInfoParametersQuerySymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbols" Data.Aeson.Types.ToJSON..=)) (getApiV3ExchangeInfoParametersQuerySymbols obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3ExchangeInfoParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3ExchangeInfoParameters" (\obj -> ((GHC.Base.pure GetApiV3ExchangeInfoParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPermissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySymbols"))

-- | Create a new 'GetApiV3ExchangeInfoParameters' with all required fields.
mkGetApiV3ExchangeInfoParameters :: GetApiV3ExchangeInfoParameters
mkGetApiV3ExchangeInfoParameters =
  GetApiV3ExchangeInfoParameters
    { getApiV3ExchangeInfoParametersQueryPermissions = GHC.Maybe.Nothing,
      getApiV3ExchangeInfoParametersQuerySymbol = GHC.Maybe.Nothing,
      getApiV3ExchangeInfoParametersQuerySymbols = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getApiV3ExchangeInfo'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApiV3ExchangeInfoResponseError' is used.
data GetApiV3ExchangeInfoResponse
  = -- | Means either no matching case available or a parse error
    GetApiV3ExchangeInfoResponseError GHC.Base.String
  | -- | Current exchange trading rules and symbol information
    GetApiV3ExchangeInfoResponse200 GetApiV3ExchangeInfoResponseBody200
  | -- | Bad Request
    GetApiV3ExchangeInfoResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/api\/v3\/exchangeInfo.GET.responses.200.content.application\/json.schema@ in the specification.
data GetApiV3ExchangeInfoResponseBody200 = GetApiV3ExchangeInfoResponseBody200
  { -- | exchangeFilters
    getApiV3ExchangeInfoResponseBody200ExchangeFilters :: ([Data.Aeson.Types.Internal.Object]),
    -- | rateLimits
    getApiV3ExchangeInfoResponseBody200RateLimits :: ([GetApiV3ExchangeInfoResponseBody200RateLimits]),
    -- | serverTime
    getApiV3ExchangeInfoResponseBody200ServerTime :: GHC.Int.Int64,
    -- | symbols
    getApiV3ExchangeInfoResponseBody200Symbols :: ([GetApiV3ExchangeInfoResponseBody200Symbols]),
    -- | timezone
    getApiV3ExchangeInfoResponseBody200Timezone :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3ExchangeInfoResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["exchangeFilters" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200ExchangeFilters obj] : ["rateLimits" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimits obj] : ["serverTime" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200ServerTime obj] : ["symbols" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200Symbols obj] : ["timezone" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200Timezone obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["exchangeFilters" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200ExchangeFilters obj] : ["rateLimits" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimits obj] : ["serverTime" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200ServerTime obj] : ["symbols" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200Symbols obj] : ["timezone" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200Timezone obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3ExchangeInfoResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3ExchangeInfoResponseBody200" (\obj -> ((((GHC.Base.pure GetApiV3ExchangeInfoResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exchangeFilters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rateLimits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "serverTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbols")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timezone"))

-- | Create a new 'GetApiV3ExchangeInfoResponseBody200' with all required fields.
mkGetApiV3ExchangeInfoResponseBody200 ::
  -- | 'getApiV3ExchangeInfoResponseBody200ExchangeFilters'
  [Data.Aeson.Types.Internal.Object] ->
  -- | 'getApiV3ExchangeInfoResponseBody200RateLimits'
  [GetApiV3ExchangeInfoResponseBody200RateLimits] ->
  -- | 'getApiV3ExchangeInfoResponseBody200ServerTime'
  GHC.Int.Int64 ->
  -- | 'getApiV3ExchangeInfoResponseBody200Symbols'
  [GetApiV3ExchangeInfoResponseBody200Symbols] ->
  -- | 'getApiV3ExchangeInfoResponseBody200Timezone'
  Data.Text.Internal.Text ->
  GetApiV3ExchangeInfoResponseBody200
mkGetApiV3ExchangeInfoResponseBody200 getApiV3ExchangeInfoResponseBody200ExchangeFilters getApiV3ExchangeInfoResponseBody200RateLimits getApiV3ExchangeInfoResponseBody200ServerTime getApiV3ExchangeInfoResponseBody200Symbols getApiV3ExchangeInfoResponseBody200Timezone =
  GetApiV3ExchangeInfoResponseBody200
    { getApiV3ExchangeInfoResponseBody200ExchangeFilters = getApiV3ExchangeInfoResponseBody200ExchangeFilters,
      getApiV3ExchangeInfoResponseBody200RateLimits = getApiV3ExchangeInfoResponseBody200RateLimits,
      getApiV3ExchangeInfoResponseBody200ServerTime = getApiV3ExchangeInfoResponseBody200ServerTime,
      getApiV3ExchangeInfoResponseBody200Symbols = getApiV3ExchangeInfoResponseBody200Symbols,
      getApiV3ExchangeInfoResponseBody200Timezone = getApiV3ExchangeInfoResponseBody200Timezone
    }

-- | Defines the object schema located at @paths.\/api\/v3\/exchangeInfo.GET.responses.200.content.application\/json.schema.properties.rateLimits.items@ in the specification.
data GetApiV3ExchangeInfoResponseBody200RateLimits = GetApiV3ExchangeInfoResponseBody200RateLimits
  { -- | interval
    getApiV3ExchangeInfoResponseBody200RateLimitsInterval :: Data.Text.Internal.Text,
    -- | intervalNum
    getApiV3ExchangeInfoResponseBody200RateLimitsIntervalNum :: GHC.Int.Int32,
    -- | limit
    getApiV3ExchangeInfoResponseBody200RateLimitsLimit :: GHC.Int.Int32,
    -- | rateLimitType
    getApiV3ExchangeInfoResponseBody200RateLimitsRateLimitType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3ExchangeInfoResponseBody200RateLimits where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["interval" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimitsInterval obj] : ["intervalNum" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimitsIntervalNum obj] : ["limit" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimitsLimit obj] : ["rateLimitType" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimitsRateLimitType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["interval" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimitsInterval obj] : ["intervalNum" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimitsIntervalNum obj] : ["limit" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimitsLimit obj] : ["rateLimitType" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200RateLimitsRateLimitType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3ExchangeInfoResponseBody200RateLimits where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3ExchangeInfoResponseBody200RateLimits" (\obj -> (((GHC.Base.pure GetApiV3ExchangeInfoResponseBody200RateLimits GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "intervalNum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "limit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rateLimitType"))

-- | Create a new 'GetApiV3ExchangeInfoResponseBody200RateLimits' with all required fields.
mkGetApiV3ExchangeInfoResponseBody200RateLimits ::
  -- | 'getApiV3ExchangeInfoResponseBody200RateLimitsInterval'
  Data.Text.Internal.Text ->
  -- | 'getApiV3ExchangeInfoResponseBody200RateLimitsIntervalNum'
  GHC.Int.Int32 ->
  -- | 'getApiV3ExchangeInfoResponseBody200RateLimitsLimit'
  GHC.Int.Int32 ->
  -- | 'getApiV3ExchangeInfoResponseBody200RateLimitsRateLimitType'
  Data.Text.Internal.Text ->
  GetApiV3ExchangeInfoResponseBody200RateLimits
mkGetApiV3ExchangeInfoResponseBody200RateLimits getApiV3ExchangeInfoResponseBody200RateLimitsInterval getApiV3ExchangeInfoResponseBody200RateLimitsIntervalNum getApiV3ExchangeInfoResponseBody200RateLimitsLimit getApiV3ExchangeInfoResponseBody200RateLimitsRateLimitType =
  GetApiV3ExchangeInfoResponseBody200RateLimits
    { getApiV3ExchangeInfoResponseBody200RateLimitsInterval = getApiV3ExchangeInfoResponseBody200RateLimitsInterval,
      getApiV3ExchangeInfoResponseBody200RateLimitsIntervalNum = getApiV3ExchangeInfoResponseBody200RateLimitsIntervalNum,
      getApiV3ExchangeInfoResponseBody200RateLimitsLimit = getApiV3ExchangeInfoResponseBody200RateLimitsLimit,
      getApiV3ExchangeInfoResponseBody200RateLimitsRateLimitType = getApiV3ExchangeInfoResponseBody200RateLimitsRateLimitType
    }

-- | Defines the object schema located at @paths.\/api\/v3\/exchangeInfo.GET.responses.200.content.application\/json.schema.properties.symbols.items@ in the specification.
data GetApiV3ExchangeInfoResponseBody200Symbols = GetApiV3ExchangeInfoResponseBody200Symbols
  { -- | allowTrailingStop
    getApiV3ExchangeInfoResponseBody200SymbolsAllowTrailingStop :: GHC.Types.Bool,
    -- | baseAsset
    getApiV3ExchangeInfoResponseBody200SymbolsBaseAsset :: Data.Text.Internal.Text,
    -- | baseAssetPrecision
    getApiV3ExchangeInfoResponseBody200SymbolsBaseAssetPrecision :: GHC.Int.Int32,
    -- | baseCommissionPrecision
    getApiV3ExchangeInfoResponseBody200SymbolsBaseCommissionPrecision :: GHC.Int.Int32,
    -- | filters
    getApiV3ExchangeInfoResponseBody200SymbolsFilters :: ([GetApiV3ExchangeInfoResponseBody200SymbolsFilters]),
    -- | icebergAllowed
    getApiV3ExchangeInfoResponseBody200SymbolsIcebergAllowed :: GHC.Types.Bool,
    -- | isMarginTradingAllowed
    getApiV3ExchangeInfoResponseBody200SymbolsIsMarginTradingAllowed :: GHC.Types.Bool,
    -- | isSpotTradingAllowed
    getApiV3ExchangeInfoResponseBody200SymbolsIsSpotTradingAllowed :: GHC.Types.Bool,
    -- | ocoAllowed
    getApiV3ExchangeInfoResponseBody200SymbolsOcoAllowed :: GHC.Types.Bool,
    -- | orderTypes
    getApiV3ExchangeInfoResponseBody200SymbolsOrderTypes :: ([Data.Text.Internal.Text]),
    -- | permissions
    getApiV3ExchangeInfoResponseBody200SymbolsPermissions :: ([Data.Text.Internal.Text]),
    -- | quoteAsset
    getApiV3ExchangeInfoResponseBody200SymbolsQuoteAsset :: Data.Text.Internal.Text,
    -- | quoteAssetPrecision
    getApiV3ExchangeInfoResponseBody200SymbolsQuoteAssetPrecision :: GHC.Int.Int32,
    -- | quoteCommissionPrecision
    getApiV3ExchangeInfoResponseBody200SymbolsQuoteCommissionPrecision :: GHC.Int.Int32,
    -- | quoteOrderQtyMarketAllowed
    getApiV3ExchangeInfoResponseBody200SymbolsQuoteOrderQtyMarketAllowed :: GHC.Types.Bool,
    -- | status
    getApiV3ExchangeInfoResponseBody200SymbolsStatus :: Data.Text.Internal.Text,
    -- | symbol
    getApiV3ExchangeInfoResponseBody200SymbolsSymbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3ExchangeInfoResponseBody200Symbols where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["allowTrailingStop" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsAllowTrailingStop obj] : ["baseAsset" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsBaseAsset obj] : ["baseAssetPrecision" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsBaseAssetPrecision obj] : ["baseCommissionPrecision" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsBaseCommissionPrecision obj] : ["filters" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFilters obj] : ["icebergAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsIcebergAllowed obj] : ["isMarginTradingAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsIsMarginTradingAllowed obj] : ["isSpotTradingAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsIsSpotTradingAllowed obj] : ["ocoAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsOcoAllowed obj] : ["orderTypes" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsOrderTypes obj] : ["permissions" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsPermissions obj] : ["quoteAsset" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsQuoteAsset obj] : ["quoteAssetPrecision" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsQuoteAssetPrecision obj] : ["quoteCommissionPrecision" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsQuoteCommissionPrecision obj] : ["quoteOrderQtyMarketAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsQuoteOrderQtyMarketAllowed obj] : ["status" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsSymbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["allowTrailingStop" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsAllowTrailingStop obj] : ["baseAsset" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsBaseAsset obj] : ["baseAssetPrecision" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsBaseAssetPrecision obj] : ["baseCommissionPrecision" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsBaseCommissionPrecision obj] : ["filters" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFilters obj] : ["icebergAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsIcebergAllowed obj] : ["isMarginTradingAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsIsMarginTradingAllowed obj] : ["isSpotTradingAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsIsSpotTradingAllowed obj] : ["ocoAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsOcoAllowed obj] : ["orderTypes" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsOrderTypes obj] : ["permissions" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsPermissions obj] : ["quoteAsset" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsQuoteAsset obj] : ["quoteAssetPrecision" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsQuoteAssetPrecision obj] : ["quoteCommissionPrecision" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsQuoteCommissionPrecision obj] : ["quoteOrderQtyMarketAllowed" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsQuoteOrderQtyMarketAllowed obj] : ["status" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsStatus obj] : ["symbol" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsSymbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3ExchangeInfoResponseBody200Symbols where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3ExchangeInfoResponseBody200Symbols" (\obj -> ((((((((((((((((GHC.Base.pure GetApiV3ExchangeInfoResponseBody200Symbols GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "allowTrailingStop")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "baseAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "baseAssetPrecision")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "baseCommissionPrecision")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "filters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "icebergAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMarginTradingAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isSpotTradingAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ocoAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderTypes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteAssetPrecision")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteCommissionPrecision")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteOrderQtyMarketAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'GetApiV3ExchangeInfoResponseBody200Symbols' with all required fields.
mkGetApiV3ExchangeInfoResponseBody200Symbols ::
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsAllowTrailingStop'
  GHC.Types.Bool ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsBaseAsset'
  Data.Text.Internal.Text ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsBaseAssetPrecision'
  GHC.Int.Int32 ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsBaseCommissionPrecision'
  GHC.Int.Int32 ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsFilters'
  [GetApiV3ExchangeInfoResponseBody200SymbolsFilters] ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsIcebergAllowed'
  GHC.Types.Bool ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsIsMarginTradingAllowed'
  GHC.Types.Bool ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsIsSpotTradingAllowed'
  GHC.Types.Bool ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsOcoAllowed'
  GHC.Types.Bool ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsOrderTypes'
  [Data.Text.Internal.Text] ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsPermissions'
  [Data.Text.Internal.Text] ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsQuoteAsset'
  Data.Text.Internal.Text ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsQuoteAssetPrecision'
  GHC.Int.Int32 ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsQuoteCommissionPrecision'
  GHC.Int.Int32 ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsQuoteOrderQtyMarketAllowed'
  GHC.Types.Bool ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsStatus'
  Data.Text.Internal.Text ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsSymbol'
  Data.Text.Internal.Text ->
  GetApiV3ExchangeInfoResponseBody200Symbols
mkGetApiV3ExchangeInfoResponseBody200Symbols getApiV3ExchangeInfoResponseBody200SymbolsAllowTrailingStop getApiV3ExchangeInfoResponseBody200SymbolsBaseAsset getApiV3ExchangeInfoResponseBody200SymbolsBaseAssetPrecision getApiV3ExchangeInfoResponseBody200SymbolsBaseCommissionPrecision getApiV3ExchangeInfoResponseBody200SymbolsFilters getApiV3ExchangeInfoResponseBody200SymbolsIcebergAllowed getApiV3ExchangeInfoResponseBody200SymbolsIsMarginTradingAllowed getApiV3ExchangeInfoResponseBody200SymbolsIsSpotTradingAllowed getApiV3ExchangeInfoResponseBody200SymbolsOcoAllowed getApiV3ExchangeInfoResponseBody200SymbolsOrderTypes getApiV3ExchangeInfoResponseBody200SymbolsPermissions getApiV3ExchangeInfoResponseBody200SymbolsQuoteAsset getApiV3ExchangeInfoResponseBody200SymbolsQuoteAssetPrecision getApiV3ExchangeInfoResponseBody200SymbolsQuoteCommissionPrecision getApiV3ExchangeInfoResponseBody200SymbolsQuoteOrderQtyMarketAllowed getApiV3ExchangeInfoResponseBody200SymbolsStatus getApiV3ExchangeInfoResponseBody200SymbolsSymbol =
  GetApiV3ExchangeInfoResponseBody200Symbols
    { getApiV3ExchangeInfoResponseBody200SymbolsAllowTrailingStop = getApiV3ExchangeInfoResponseBody200SymbolsAllowTrailingStop,
      getApiV3ExchangeInfoResponseBody200SymbolsBaseAsset = getApiV3ExchangeInfoResponseBody200SymbolsBaseAsset,
      getApiV3ExchangeInfoResponseBody200SymbolsBaseAssetPrecision = getApiV3ExchangeInfoResponseBody200SymbolsBaseAssetPrecision,
      getApiV3ExchangeInfoResponseBody200SymbolsBaseCommissionPrecision = getApiV3ExchangeInfoResponseBody200SymbolsBaseCommissionPrecision,
      getApiV3ExchangeInfoResponseBody200SymbolsFilters = getApiV3ExchangeInfoResponseBody200SymbolsFilters,
      getApiV3ExchangeInfoResponseBody200SymbolsIcebergAllowed = getApiV3ExchangeInfoResponseBody200SymbolsIcebergAllowed,
      getApiV3ExchangeInfoResponseBody200SymbolsIsMarginTradingAllowed = getApiV3ExchangeInfoResponseBody200SymbolsIsMarginTradingAllowed,
      getApiV3ExchangeInfoResponseBody200SymbolsIsSpotTradingAllowed = getApiV3ExchangeInfoResponseBody200SymbolsIsSpotTradingAllowed,
      getApiV3ExchangeInfoResponseBody200SymbolsOcoAllowed = getApiV3ExchangeInfoResponseBody200SymbolsOcoAllowed,
      getApiV3ExchangeInfoResponseBody200SymbolsOrderTypes = getApiV3ExchangeInfoResponseBody200SymbolsOrderTypes,
      getApiV3ExchangeInfoResponseBody200SymbolsPermissions = getApiV3ExchangeInfoResponseBody200SymbolsPermissions,
      getApiV3ExchangeInfoResponseBody200SymbolsQuoteAsset = getApiV3ExchangeInfoResponseBody200SymbolsQuoteAsset,
      getApiV3ExchangeInfoResponseBody200SymbolsQuoteAssetPrecision = getApiV3ExchangeInfoResponseBody200SymbolsQuoteAssetPrecision,
      getApiV3ExchangeInfoResponseBody200SymbolsQuoteCommissionPrecision = getApiV3ExchangeInfoResponseBody200SymbolsQuoteCommissionPrecision,
      getApiV3ExchangeInfoResponseBody200SymbolsQuoteOrderQtyMarketAllowed = getApiV3ExchangeInfoResponseBody200SymbolsQuoteOrderQtyMarketAllowed,
      getApiV3ExchangeInfoResponseBody200SymbolsStatus = getApiV3ExchangeInfoResponseBody200SymbolsStatus,
      getApiV3ExchangeInfoResponseBody200SymbolsSymbol = getApiV3ExchangeInfoResponseBody200SymbolsSymbol
    }

-- | Defines the object schema located at @paths.\/api\/v3\/exchangeInfo.GET.responses.200.content.application\/json.schema.properties.symbols.items.properties.filters.items@ in the specification.
data GetApiV3ExchangeInfoResponseBody200SymbolsFilters = GetApiV3ExchangeInfoResponseBody200SymbolsFilters
  { -- | filterType
    getApiV3ExchangeInfoResponseBody200SymbolsFiltersFilterType :: Data.Text.Internal.Text,
    -- | maxPrice
    getApiV3ExchangeInfoResponseBody200SymbolsFiltersMaxPrice :: Data.Text.Internal.Text,
    -- | minPrice
    getApiV3ExchangeInfoResponseBody200SymbolsFiltersMinPrice :: Data.Text.Internal.Text,
    -- | tickSize
    getApiV3ExchangeInfoResponseBody200SymbolsFiltersTickSize :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3ExchangeInfoResponseBody200SymbolsFilters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["filterType" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFiltersFilterType obj] : ["maxPrice" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFiltersMaxPrice obj] : ["minPrice" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFiltersMinPrice obj] : ["tickSize" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFiltersTickSize obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["filterType" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFiltersFilterType obj] : ["maxPrice" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFiltersMaxPrice obj] : ["minPrice" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFiltersMinPrice obj] : ["tickSize" Data.Aeson.Types.ToJSON..= getApiV3ExchangeInfoResponseBody200SymbolsFiltersTickSize obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3ExchangeInfoResponseBody200SymbolsFilters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3ExchangeInfoResponseBody200SymbolsFilters" (\obj -> (((GHC.Base.pure GetApiV3ExchangeInfoResponseBody200SymbolsFilters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "filterType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "maxPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "minPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tickSize"))

-- | Create a new 'GetApiV3ExchangeInfoResponseBody200SymbolsFilters' with all required fields.
mkGetApiV3ExchangeInfoResponseBody200SymbolsFilters ::
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsFiltersFilterType'
  Data.Text.Internal.Text ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsFiltersMaxPrice'
  Data.Text.Internal.Text ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsFiltersMinPrice'
  Data.Text.Internal.Text ->
  -- | 'getApiV3ExchangeInfoResponseBody200SymbolsFiltersTickSize'
  Data.Text.Internal.Text ->
  GetApiV3ExchangeInfoResponseBody200SymbolsFilters
mkGetApiV3ExchangeInfoResponseBody200SymbolsFilters getApiV3ExchangeInfoResponseBody200SymbolsFiltersFilterType getApiV3ExchangeInfoResponseBody200SymbolsFiltersMaxPrice getApiV3ExchangeInfoResponseBody200SymbolsFiltersMinPrice getApiV3ExchangeInfoResponseBody200SymbolsFiltersTickSize =
  GetApiV3ExchangeInfoResponseBody200SymbolsFilters
    { getApiV3ExchangeInfoResponseBody200SymbolsFiltersFilterType = getApiV3ExchangeInfoResponseBody200SymbolsFiltersFilterType,
      getApiV3ExchangeInfoResponseBody200SymbolsFiltersMaxPrice = getApiV3ExchangeInfoResponseBody200SymbolsFiltersMaxPrice,
      getApiV3ExchangeInfoResponseBody200SymbolsFiltersMinPrice = getApiV3ExchangeInfoResponseBody200SymbolsFiltersMinPrice,
      getApiV3ExchangeInfoResponseBody200SymbolsFiltersTickSize = getApiV3ExchangeInfoResponseBody200SymbolsFiltersTickSize
    }

-- | > GET /api/v3/exchangeInfo
--
-- The same as 'getApiV3ExchangeInfo' but accepts an explicit configuration.
getApiV3ExchangeInfoWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3ExchangeInfoParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetApiV3ExchangeInfoResponse)
getApiV3ExchangeInfoWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetApiV3ExchangeInfoResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3ExchangeInfoResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetApiV3ExchangeInfoResponseBody200
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3ExchangeInfoResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/exchangeInfo")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "permissions") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQueryPermissions parameters) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /api/v3/exchangeInfo
--
-- The same as 'getApiV3ExchangeInfo' but returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3ExchangeInfoRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3ExchangeInfoParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3ExchangeInfoRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/exchangeInfo")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "permissions") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQueryPermissions parameters) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /api/v3/exchangeInfo
--
-- The same as 'getApiV3ExchangeInfo' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3ExchangeInfoWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3ExchangeInfoParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3ExchangeInfoWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/exchangeInfo")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "permissions") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3ExchangeInfoParametersQueryPermissions parameters) (Data.Text.pack "form") GHC.Types.False
          ]
      )
