{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1BlvtSubscribe
module Binance.Operations.PostSapiV1BlvtSubscribe where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/blvt/subscribe
--
-- Weight(IP): 1
postSapiV1BlvtSubscribe ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BlvtSubscribeParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1BlvtSubscribeResponse)
postSapiV1BlvtSubscribe parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1BlvtSubscribeResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BlvtSubscribeResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1BlvtSubscribeResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BlvtSubscribeResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BlvtSubscribeResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/blvt/subscribe")
        [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryTokenName parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "cost") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryCost parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BlvtSubscribeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/blvt\/subscribe.POST.parameters@ in the specification.
data PostSapiV1BlvtSubscribeParameters = PostSapiV1BlvtSubscribeParameters
  { -- | queryCost: Represents the parameter named \'cost\'
    --
    -- Spot balance
    postSapiV1BlvtSubscribeParametersQueryCost :: GHC.Types.Double,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1BlvtSubscribeParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1BlvtSubscribeParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1BlvtSubscribeParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryTokenName: Represents the parameter named \'tokenName\'
    --
    -- BTCDOWN, BTCUP
    postSapiV1BlvtSubscribeParametersQueryTokenName :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BlvtSubscribeParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryCost" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeParametersQueryCost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BlvtSubscribeParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeParametersQueryTimestamp obj] : ["queryTokenName" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeParametersQueryTokenName obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryCost" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeParametersQueryCost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BlvtSubscribeParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeParametersQueryTimestamp obj] : ["queryTokenName" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeParametersQueryTokenName obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BlvtSubscribeParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BlvtSubscribeParameters" (\obj -> ((((GHC.Base.pure PostSapiV1BlvtSubscribeParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryCost")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTokenName"))

-- | Create a new 'PostSapiV1BlvtSubscribeParameters' with all required fields.
mkPostSapiV1BlvtSubscribeParameters ::
  -- | 'postSapiV1BlvtSubscribeParametersQueryCost'
  GHC.Types.Double ->
  -- | 'postSapiV1BlvtSubscribeParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BlvtSubscribeParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'postSapiV1BlvtSubscribeParametersQueryTokenName'
  Data.Text.Internal.Text ->
  PostSapiV1BlvtSubscribeParameters
mkPostSapiV1BlvtSubscribeParameters postSapiV1BlvtSubscribeParametersQueryCost postSapiV1BlvtSubscribeParametersQuerySignature postSapiV1BlvtSubscribeParametersQueryTimestamp postSapiV1BlvtSubscribeParametersQueryTokenName =
  PostSapiV1BlvtSubscribeParameters
    { postSapiV1BlvtSubscribeParametersQueryCost = postSapiV1BlvtSubscribeParametersQueryCost,
      postSapiV1BlvtSubscribeParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1BlvtSubscribeParametersQuerySignature = postSapiV1BlvtSubscribeParametersQuerySignature,
      postSapiV1BlvtSubscribeParametersQueryTimestamp = postSapiV1BlvtSubscribeParametersQueryTimestamp,
      postSapiV1BlvtSubscribeParametersQueryTokenName = postSapiV1BlvtSubscribeParametersQueryTokenName
    }

-- | Represents a response of the operation 'postSapiV1BlvtSubscribe'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1BlvtSubscribeResponseError' is used.
data PostSapiV1BlvtSubscribeResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1BlvtSubscribeResponseError GHC.Base.String
  | -- | Subscription Info
    PostSapiV1BlvtSubscribeResponse200 PostSapiV1BlvtSubscribeResponseBody200
  | -- | Bad Request
    PostSapiV1BlvtSubscribeResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1BlvtSubscribeResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/blvt\/subscribe.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1BlvtSubscribeResponseBody200 = PostSapiV1BlvtSubscribeResponseBody200
  { -- | amount: subscribed token amount
    postSapiV1BlvtSubscribeResponseBody200Amount :: Data.Text.Internal.Text,
    -- | cost: subscription cost in usdt
    postSapiV1BlvtSubscribeResponseBody200Cost :: Data.Text.Internal.Text,
    -- | id
    postSapiV1BlvtSubscribeResponseBody200Id :: GHC.Types.Double,
    -- | status: S, P, and F for \"success\", \"pending\", and \"failure\"
    postSapiV1BlvtSubscribeResponseBody200Status :: Data.Text.Internal.Text,
    -- | timestamp
    postSapiV1BlvtSubscribeResponseBody200Timestamp :: GHC.Int.Int64,
    -- | tokenName
    postSapiV1BlvtSubscribeResponseBody200TokenName :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BlvtSubscribeResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Amount obj] : ["cost" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Cost obj] : ["id" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Id obj] : ["status" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Status obj] : ["timestamp" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Timestamp obj] : ["tokenName" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200TokenName obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Amount obj] : ["cost" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Cost obj] : ["id" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Id obj] : ["status" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Status obj] : ["timestamp" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200Timestamp obj] : ["tokenName" Data.Aeson.Types.ToJSON..= postSapiV1BlvtSubscribeResponseBody200TokenName obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BlvtSubscribeResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BlvtSubscribeResponseBody200" (\obj -> (((((GHC.Base.pure PostSapiV1BlvtSubscribeResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cost")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokenName"))

-- | Create a new 'PostSapiV1BlvtSubscribeResponseBody200' with all required fields.
mkPostSapiV1BlvtSubscribeResponseBody200 ::
  -- | 'postSapiV1BlvtSubscribeResponseBody200Amount'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BlvtSubscribeResponseBody200Cost'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BlvtSubscribeResponseBody200Id'
  GHC.Types.Double ->
  -- | 'postSapiV1BlvtSubscribeResponseBody200Status'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BlvtSubscribeResponseBody200Timestamp'
  GHC.Int.Int64 ->
  -- | 'postSapiV1BlvtSubscribeResponseBody200TokenName'
  Data.Text.Internal.Text ->
  PostSapiV1BlvtSubscribeResponseBody200
mkPostSapiV1BlvtSubscribeResponseBody200 postSapiV1BlvtSubscribeResponseBody200Amount postSapiV1BlvtSubscribeResponseBody200Cost postSapiV1BlvtSubscribeResponseBody200Id postSapiV1BlvtSubscribeResponseBody200Status postSapiV1BlvtSubscribeResponseBody200Timestamp postSapiV1BlvtSubscribeResponseBody200TokenName =
  PostSapiV1BlvtSubscribeResponseBody200
    { postSapiV1BlvtSubscribeResponseBody200Amount = postSapiV1BlvtSubscribeResponseBody200Amount,
      postSapiV1BlvtSubscribeResponseBody200Cost = postSapiV1BlvtSubscribeResponseBody200Cost,
      postSapiV1BlvtSubscribeResponseBody200Id = postSapiV1BlvtSubscribeResponseBody200Id,
      postSapiV1BlvtSubscribeResponseBody200Status = postSapiV1BlvtSubscribeResponseBody200Status,
      postSapiV1BlvtSubscribeResponseBody200Timestamp = postSapiV1BlvtSubscribeResponseBody200Timestamp,
      postSapiV1BlvtSubscribeResponseBody200TokenName = postSapiV1BlvtSubscribeResponseBody200TokenName
    }

-- | > POST /sapi/v1/blvt/subscribe
--
-- The same as 'postSapiV1BlvtSubscribe' but accepts an explicit configuration.
postSapiV1BlvtSubscribeWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BlvtSubscribeParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1BlvtSubscribeResponse)
postSapiV1BlvtSubscribeWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1BlvtSubscribeResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BlvtSubscribeResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1BlvtSubscribeResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BlvtSubscribeResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BlvtSubscribeResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/blvt/subscribe")
          [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryTokenName parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "cost") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryCost parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BlvtSubscribeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/blvt/subscribe
--
-- The same as 'postSapiV1BlvtSubscribe' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BlvtSubscribeRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BlvtSubscribeParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BlvtSubscribeRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/blvt/subscribe")
        [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryTokenName parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "cost") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryCost parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BlvtSubscribeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/blvt/subscribe
--
-- The same as 'postSapiV1BlvtSubscribe' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BlvtSubscribeWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BlvtSubscribeParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BlvtSubscribeWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/blvt/subscribe")
          [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryTokenName parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "cost") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryCost parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BlvtSubscribeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtSubscribeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
