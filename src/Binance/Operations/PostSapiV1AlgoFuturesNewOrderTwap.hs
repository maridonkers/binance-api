{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1AlgoFuturesNewOrderTwap
module Binance.Operations.PostSapiV1AlgoFuturesNewOrderTwap where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/algo/futures/newOrderTwap
--
-- Send in a Twap new order. Only support on USDⓈ-M Contracts.
--
-- You need to enable Futures Trading Permission for the api key which requests this endpoint.
-- Base URL: https:\/\/api.binance.com
--
-- - Total Algo open orders max allowed: 10 orders.
-- - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
-- - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints（GET sapi\/v1\/algo\/futures\/openOrders or GET sapi\/v1\/algo\/futures\/historicalOrders） to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it.
-- - quantity * 60 \/ duration should be larger than minQty
-- - duration cannot be less than 5 mins or more than 24 hours.
-- - For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.
--
-- Weight(UID): 3000
postSapiV1AlgoFuturesNewOrderTwap ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AlgoFuturesNewOrderTwapParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1AlgoFuturesNewOrderTwapResponse)
postSapiV1AlgoFuturesNewOrderTwap parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1AlgoFuturesNewOrderTwapResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AlgoFuturesNewOrderTwapResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1AlgoFuturesNewOrderTwapResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AlgoFuturesNewOrderTwapResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AlgoFuturesNewOrderTwapResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/algo/futures/newOrderTwap")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "positionSide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "duration") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "clientAlgoId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryClientAlgoId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "reduceOnly") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryReduceOnly parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limitPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryLimitPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/algo\/futures\/newOrderTwap.POST.parameters@ in the specification.
data PostSapiV1AlgoFuturesNewOrderTwapParameters = PostSapiV1AlgoFuturesNewOrderTwapParameters
  { -- | queryClientAlgoId: Represents the parameter named \'clientAlgoId\'
    --
    -- A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
    postSapiV1AlgoFuturesNewOrderTwapParametersQueryClientAlgoId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryDuration: Represents the parameter named \'duration\'
    --
    -- Duration for TWAP orders in seconds. [300, 86400];Less than 5min => defaults to 5 min; Greater than 24h => defaults to 24h
    postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration :: GHC.Int.Int64,
    -- | queryLimitPrice: Represents the parameter named \'limitPrice\'
    --
    -- Limit price of the order; If it is not sent, will place order by market price by default
    postSapiV1AlgoFuturesNewOrderTwapParametersQueryLimitPrice :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryPositionSide: Represents the parameter named \'positionSide\'
    --
    -- Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
    postSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide :: (GHC.Maybe.Maybe PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide),
    -- | queryQuantity: Represents the parameter named \'quantity\'
    --
    -- Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
    postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity :: GHC.Types.Double,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1AlgoFuturesNewOrderTwapParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryReduceOnly: Represents the parameter named \'reduceOnly\'
    --
    -- \'true\' or \'false\'. Default \'false\'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
    postSapiV1AlgoFuturesNewOrderTwapParametersQueryReduceOnly :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | querySide: Represents the parameter named \'side\'
    postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide :: PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySide,
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AlgoFuturesNewOrderTwapParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClientAlgoId" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryClientAlgoId obj) : ["queryDuration" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimitPrice" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPositionSide" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide obj) : ["queryQuantity" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryRecvWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryReduceOnly" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryReduceOnly obj) : ["querySide" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClientAlgoId" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryClientAlgoId obj) : ["queryDuration" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimitPrice" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryLimitPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPositionSide" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide obj) : ["queryQuantity" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryRecvWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryReduceOnly" Data.Aeson.Types.ToJSON..=)) (postSapiV1AlgoFuturesNewOrderTwapParametersQueryReduceOnly obj) : ["querySide" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AlgoFuturesNewOrderTwapParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AlgoFuturesNewOrderTwapParameters" (\obj -> ((((((((((GHC.Base.pure PostSapiV1AlgoFuturesNewOrderTwapParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryClientAlgoId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryDuration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimitPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPositionSide")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryReduceOnly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySide")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1AlgoFuturesNewOrderTwapParameters' with all required fields.
mkPostSapiV1AlgoFuturesNewOrderTwapParameters ::
  -- | 'postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration'
  GHC.Int.Int64 ->
  -- | 'postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity'
  GHC.Types.Double ->
  -- | 'postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide'
  PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySide ->
  -- | 'postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1AlgoFuturesNewOrderTwapParameters
mkPostSapiV1AlgoFuturesNewOrderTwapParameters postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp =
  PostSapiV1AlgoFuturesNewOrderTwapParameters
    { postSapiV1AlgoFuturesNewOrderTwapParametersQueryClientAlgoId = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration = postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration,
      postSapiV1AlgoFuturesNewOrderTwapParametersQueryLimitPrice = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity = postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity,
      postSapiV1AlgoFuturesNewOrderTwapParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderTwapParametersQueryReduceOnly = GHC.Maybe.Nothing,
      postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide = postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide,
      postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature = postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature,
      postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol = postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol,
      postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp = postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/algo\/futures\/newOrderTwap.POST.parameters.properties.queryPositionSide@ in the specification.
--
-- Represents the parameter named \'positionSide\'
--
-- Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
data PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"BOTH"@
    PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideEnumBOTH
  | -- | Represents the JSON value @"LONG"@
    PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideEnumLONG
  | -- | Represents the JSON value @"SHORT"@
    PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideEnumSHORT
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide where
  toJSON (PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideOther val) = val
  toJSON (PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideEnumBOTH) = "BOTH"
  toJSON (PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideEnumLONG) = "LONG"
  toJSON (PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideEnumSHORT) = "SHORT"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "BOTH" -> PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideEnumBOTH
            | val GHC.Classes.== "LONG" -> PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideEnumLONG
            | val GHC.Classes.== "SHORT" -> PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideEnumSHORT
            | GHC.Base.otherwise -> PostSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSideOther val
      )

-- | Defines the enum schema located at @paths.\/sapi\/v1\/algo\/futures\/newOrderTwap.POST.parameters.properties.querySide@ in the specification.
--
-- Represents the parameter named \'side\'
data PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySide
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"SELL"@
    PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideEnumSELL
  | -- | Represents the JSON value @"BUY"@
    PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideEnumBUY
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySide where
  toJSON (PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideOther val) = val
  toJSON (PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideEnumSELL) = "SELL"
  toJSON (PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideEnumBUY) = "BUY"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySide where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "SELL" -> PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideEnumSELL
            | val GHC.Classes.== "BUY" -> PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideEnumBUY
            | GHC.Base.otherwise -> PostSapiV1AlgoFuturesNewOrderTwapParametersQuerySideOther val
      )

-- | Represents a response of the operation 'postSapiV1AlgoFuturesNewOrderTwap'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1AlgoFuturesNewOrderTwapResponseError' is used.
data PostSapiV1AlgoFuturesNewOrderTwapResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1AlgoFuturesNewOrderTwapResponseError GHC.Base.String
  | -- | Time-Weighted Average Price(Twap) New Order
    PostSapiV1AlgoFuturesNewOrderTwapResponse200 PostSapiV1AlgoFuturesNewOrderTwapResponseBody200
  | -- | Bad Request
    PostSapiV1AlgoFuturesNewOrderTwapResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1AlgoFuturesNewOrderTwapResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/algo\/futures\/newOrderTwap.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1AlgoFuturesNewOrderTwapResponseBody200 = PostSapiV1AlgoFuturesNewOrderTwapResponseBody200
  { -- | clientAlgoId
    postSapiV1AlgoFuturesNewOrderTwapResponseBody200ClientAlgoId :: Data.Text.Internal.Text,
    -- | code
    postSapiV1AlgoFuturesNewOrderTwapResponseBody200Code :: GHC.Int.Int64,
    -- | msg
    postSapiV1AlgoFuturesNewOrderTwapResponseBody200Msg :: Data.Text.Internal.Text,
    -- | success
    postSapiV1AlgoFuturesNewOrderTwapResponseBody200Success :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AlgoFuturesNewOrderTwapResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientAlgoId" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapResponseBody200ClientAlgoId obj] : ["code" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapResponseBody200Code obj] : ["msg" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapResponseBody200Msg obj] : ["success" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapResponseBody200Success obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientAlgoId" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapResponseBody200ClientAlgoId obj] : ["code" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapResponseBody200Code obj] : ["msg" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapResponseBody200Msg obj] : ["success" Data.Aeson.Types.ToJSON..= postSapiV1AlgoFuturesNewOrderTwapResponseBody200Success obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AlgoFuturesNewOrderTwapResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AlgoFuturesNewOrderTwapResponseBody200" (\obj -> (((GHC.Base.pure PostSapiV1AlgoFuturesNewOrderTwapResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientAlgoId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "msg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success"))

-- | Create a new 'PostSapiV1AlgoFuturesNewOrderTwapResponseBody200' with all required fields.
mkPostSapiV1AlgoFuturesNewOrderTwapResponseBody200 ::
  -- | 'postSapiV1AlgoFuturesNewOrderTwapResponseBody200ClientAlgoId'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AlgoFuturesNewOrderTwapResponseBody200Code'
  GHC.Int.Int64 ->
  -- | 'postSapiV1AlgoFuturesNewOrderTwapResponseBody200Msg'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AlgoFuturesNewOrderTwapResponseBody200Success'
  GHC.Types.Bool ->
  PostSapiV1AlgoFuturesNewOrderTwapResponseBody200
mkPostSapiV1AlgoFuturesNewOrderTwapResponseBody200 postSapiV1AlgoFuturesNewOrderTwapResponseBody200ClientAlgoId postSapiV1AlgoFuturesNewOrderTwapResponseBody200Code postSapiV1AlgoFuturesNewOrderTwapResponseBody200Msg postSapiV1AlgoFuturesNewOrderTwapResponseBody200Success =
  PostSapiV1AlgoFuturesNewOrderTwapResponseBody200
    { postSapiV1AlgoFuturesNewOrderTwapResponseBody200ClientAlgoId = postSapiV1AlgoFuturesNewOrderTwapResponseBody200ClientAlgoId,
      postSapiV1AlgoFuturesNewOrderTwapResponseBody200Code = postSapiV1AlgoFuturesNewOrderTwapResponseBody200Code,
      postSapiV1AlgoFuturesNewOrderTwapResponseBody200Msg = postSapiV1AlgoFuturesNewOrderTwapResponseBody200Msg,
      postSapiV1AlgoFuturesNewOrderTwapResponseBody200Success = postSapiV1AlgoFuturesNewOrderTwapResponseBody200Success
    }

-- | > POST /sapi/v1/algo/futures/newOrderTwap
--
-- The same as 'postSapiV1AlgoFuturesNewOrderTwap' but accepts an explicit configuration.
postSapiV1AlgoFuturesNewOrderTwapWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AlgoFuturesNewOrderTwapParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1AlgoFuturesNewOrderTwapResponse)
postSapiV1AlgoFuturesNewOrderTwapWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1AlgoFuturesNewOrderTwapResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AlgoFuturesNewOrderTwapResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1AlgoFuturesNewOrderTwapResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AlgoFuturesNewOrderTwapResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AlgoFuturesNewOrderTwapResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/algo/futures/newOrderTwap")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "positionSide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "duration") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "clientAlgoId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryClientAlgoId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "reduceOnly") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryReduceOnly parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limitPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryLimitPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/algo/futures/newOrderTwap
--
-- The same as 'postSapiV1AlgoFuturesNewOrderTwap' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AlgoFuturesNewOrderTwapRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AlgoFuturesNewOrderTwapParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AlgoFuturesNewOrderTwapRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/algo/futures/newOrderTwap")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "positionSide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "duration") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "clientAlgoId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryClientAlgoId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "reduceOnly") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryReduceOnly parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limitPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryLimitPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/algo/futures/newOrderTwap
--
-- The same as 'postSapiV1AlgoFuturesNewOrderTwap' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AlgoFuturesNewOrderTwapWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AlgoFuturesNewOrderTwapParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AlgoFuturesNewOrderTwapWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/algo/futures/newOrderTwap")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "positionSide") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryPositionSide parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "duration") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryDuration parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "clientAlgoId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryClientAlgoId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "reduceOnly") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryReduceOnly parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limitPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryLimitPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AlgoFuturesNewOrderTwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AlgoFuturesNewOrderTwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
