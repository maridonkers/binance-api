{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1SubAccountStatus
module Binance.Operations.GetSapiV1SubAccountStatus where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/sub-account/status
--
-- - If no \`email\` sent, all sub-accounts\' information will be returned.
--
-- Weight(IP): 10
getSapiV1SubAccountStatus ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountStatusParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountStatusResponse)
getSapiV1SubAccountStatus parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1SubAccountStatusResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountStatusResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1SubAccountStatusResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountStatusResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountStatusResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/status")
        [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountStatusParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountStatusParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountStatusParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountStatusParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/status.GET.parameters@ in the specification.
data GetSapiV1SubAccountStatusParameters = GetSapiV1SubAccountStatusParameters
  { -- | queryEmail: Represents the parameter named \'email\'
    --
    -- Sub-account email
    getSapiV1SubAccountStatusParametersQueryEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1SubAccountStatusParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1SubAccountStatusParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1SubAccountStatusParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountStatusParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountStatusParametersQueryEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountStatusParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountStatusParametersQueryEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountStatusParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountStatusParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountStatusParameters" (\obj -> (((GHC.Base.pure GetSapiV1SubAccountStatusParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEmail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1SubAccountStatusParameters' with all required fields.
mkGetSapiV1SubAccountStatusParameters ::
  -- | 'getSapiV1SubAccountStatusParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountStatusParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1SubAccountStatusParameters
mkGetSapiV1SubAccountStatusParameters getSapiV1SubAccountStatusParametersQuerySignature getSapiV1SubAccountStatusParametersQueryTimestamp =
  GetSapiV1SubAccountStatusParameters
    { getSapiV1SubAccountStatusParametersQueryEmail = GHC.Maybe.Nothing,
      getSapiV1SubAccountStatusParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1SubAccountStatusParametersQuerySignature = getSapiV1SubAccountStatusParametersQuerySignature,
      getSapiV1SubAccountStatusParametersQueryTimestamp = getSapiV1SubAccountStatusParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1SubAccountStatus'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1SubAccountStatusResponseError' is used.
data GetSapiV1SubAccountStatusResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1SubAccountStatusResponseError GHC.Base.String
  | -- | Status on Margin\/Futures
    GetSapiV1SubAccountStatusResponse200 ([GetSapiV1SubAccountStatusResponseBody200])
  | -- | Bad Request
    GetSapiV1SubAccountStatusResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1SubAccountStatusResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/status.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1SubAccountStatusResponseBody200 = GetSapiV1SubAccountStatusResponseBody200
  { -- | email
    getSapiV1SubAccountStatusResponseBody200Email :: Data.Text.Internal.Text,
    -- | insertTime: sub account create time
    getSapiV1SubAccountStatusResponseBody200InsertTime :: GHC.Int.Int64,
    -- | isFutureEnabled
    getSapiV1SubAccountStatusResponseBody200IsFutureEnabled :: GHC.Types.Bool,
    -- | isMarginEnabled
    getSapiV1SubAccountStatusResponseBody200IsMarginEnabled :: GHC.Types.Bool,
    -- | isSubUserEnabled
    getSapiV1SubAccountStatusResponseBody200IsSubUserEnabled :: GHC.Types.Bool,
    -- | isUserActive
    getSapiV1SubAccountStatusResponseBody200IsUserActive :: GHC.Types.Bool,
    -- | mobile: user mobile number
    getSapiV1SubAccountStatusResponseBody200Mobile :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountStatusResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["email" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200Email obj] : ["insertTime" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200InsertTime obj] : ["isFutureEnabled" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200IsFutureEnabled obj] : ["isMarginEnabled" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200IsMarginEnabled obj] : ["isSubUserEnabled" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200IsSubUserEnabled obj] : ["isUserActive" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200IsUserActive obj] : ["mobile" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200Mobile obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["email" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200Email obj] : ["insertTime" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200InsertTime obj] : ["isFutureEnabled" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200IsFutureEnabled obj] : ["isMarginEnabled" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200IsMarginEnabled obj] : ["isSubUserEnabled" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200IsSubUserEnabled obj] : ["isUserActive" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200IsUserActive obj] : ["mobile" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountStatusResponseBody200Mobile obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountStatusResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountStatusResponseBody200" (\obj -> ((((((GHC.Base.pure GetSapiV1SubAccountStatusResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "insertTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isFutureEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMarginEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isSubUserEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isUserActive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "mobile"))

-- | Create a new 'GetSapiV1SubAccountStatusResponseBody200' with all required fields.
mkGetSapiV1SubAccountStatusResponseBody200 ::
  -- | 'getSapiV1SubAccountStatusResponseBody200Email'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountStatusResponseBody200InsertTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1SubAccountStatusResponseBody200IsFutureEnabled'
  GHC.Types.Bool ->
  -- | 'getSapiV1SubAccountStatusResponseBody200IsMarginEnabled'
  GHC.Types.Bool ->
  -- | 'getSapiV1SubAccountStatusResponseBody200IsSubUserEnabled'
  GHC.Types.Bool ->
  -- | 'getSapiV1SubAccountStatusResponseBody200IsUserActive'
  GHC.Types.Bool ->
  -- | 'getSapiV1SubAccountStatusResponseBody200Mobile'
  GHC.Int.Int64 ->
  GetSapiV1SubAccountStatusResponseBody200
mkGetSapiV1SubAccountStatusResponseBody200 getSapiV1SubAccountStatusResponseBody200Email getSapiV1SubAccountStatusResponseBody200InsertTime getSapiV1SubAccountStatusResponseBody200IsFutureEnabled getSapiV1SubAccountStatusResponseBody200IsMarginEnabled getSapiV1SubAccountStatusResponseBody200IsSubUserEnabled getSapiV1SubAccountStatusResponseBody200IsUserActive getSapiV1SubAccountStatusResponseBody200Mobile =
  GetSapiV1SubAccountStatusResponseBody200
    { getSapiV1SubAccountStatusResponseBody200Email = getSapiV1SubAccountStatusResponseBody200Email,
      getSapiV1SubAccountStatusResponseBody200InsertTime = getSapiV1SubAccountStatusResponseBody200InsertTime,
      getSapiV1SubAccountStatusResponseBody200IsFutureEnabled = getSapiV1SubAccountStatusResponseBody200IsFutureEnabled,
      getSapiV1SubAccountStatusResponseBody200IsMarginEnabled = getSapiV1SubAccountStatusResponseBody200IsMarginEnabled,
      getSapiV1SubAccountStatusResponseBody200IsSubUserEnabled = getSapiV1SubAccountStatusResponseBody200IsSubUserEnabled,
      getSapiV1SubAccountStatusResponseBody200IsUserActive = getSapiV1SubAccountStatusResponseBody200IsUserActive,
      getSapiV1SubAccountStatusResponseBody200Mobile = getSapiV1SubAccountStatusResponseBody200Mobile
    }

-- | > GET /sapi/v1/sub-account/status
--
-- The same as 'getSapiV1SubAccountStatus' but accepts an explicit configuration.
getSapiV1SubAccountStatusWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountStatusParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountStatusResponse)
getSapiV1SubAccountStatusWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1SubAccountStatusResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountStatusResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1SubAccountStatusResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountStatusResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountStatusResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/status")
          [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountStatusParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountStatusParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountStatusParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountStatusParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/sub-account/status
--
-- The same as 'getSapiV1SubAccountStatus' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountStatusRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountStatusParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountStatusRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/status")
        [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountStatusParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountStatusParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountStatusParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountStatusParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/sub-account/status
--
-- The same as 'getSapiV1SubAccountStatus' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountStatusWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountStatusParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountStatusWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/status")
          [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountStatusParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountStatusParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountStatusParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountStatusParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
