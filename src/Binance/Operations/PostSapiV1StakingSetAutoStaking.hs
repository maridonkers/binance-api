{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1StakingSetAutoStaking
module Binance.Operations.PostSapiV1StakingSetAutoStaking where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/staking/setAutoStaking
--
-- Set auto staking on Locked Staking or Locked DeFi Staking
--
-- Weight(IP): 1
postSapiV1StakingSetAutoStaking ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1StakingSetAutoStakingParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1StakingSetAutoStakingResponse)
postSapiV1StakingSetAutoStaking parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1StakingSetAutoStakingResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1StakingSetAutoStakingResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1StakingSetAutoStakingResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1StakingSetAutoStakingResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1StakingSetAutoStakingResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/staking/setAutoStaking")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "positionId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryPositionId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "renewable") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryRenewable parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingSetAutoStakingParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/setAutoStaking.POST.parameters@ in the specification.
data PostSapiV1StakingSetAutoStakingParameters = PostSapiV1StakingSetAutoStakingParameters
  { -- | queryPositionId: Represents the parameter named \'positionId\'
    postSapiV1StakingSetAutoStakingParametersQueryPositionId :: Data.Text.Internal.Text,
    -- | queryProduct: Represents the parameter named \'product\'
    --
    -- * \`STAKING\` - for Locked Staking
    -- * \`L_DEFI\` - for locked DeFi Staking
    postSapiV1StakingSetAutoStakingParametersQueryProduct :: Data.Text.Internal.Text,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1StakingSetAutoStakingParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryRenewable: Represents the parameter named \'renewable\'
    --
    -- true or false
    postSapiV1StakingSetAutoStakingParametersQueryRenewable :: Data.Text.Internal.Text,
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1StakingSetAutoStakingParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1StakingSetAutoStakingParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1StakingSetAutoStakingParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryPositionId" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQueryPositionId obj] : ["queryProduct" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQueryProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1StakingSetAutoStakingParametersQueryRecvWindow obj) : ["queryRenewable" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQueryRenewable obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryPositionId" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQueryPositionId obj] : ["queryProduct" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQueryProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1StakingSetAutoStakingParametersQueryRecvWindow obj) : ["queryRenewable" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQueryRenewable obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1StakingSetAutoStakingParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1StakingSetAutoStakingParameters" (\obj -> (((((GHC.Base.pure PostSapiV1StakingSetAutoStakingParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryPositionId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryRenewable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1StakingSetAutoStakingParameters' with all required fields.
mkPostSapiV1StakingSetAutoStakingParameters ::
  -- | 'postSapiV1StakingSetAutoStakingParametersQueryPositionId'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1StakingSetAutoStakingParametersQueryProduct'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1StakingSetAutoStakingParametersQueryRenewable'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1StakingSetAutoStakingParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1StakingSetAutoStakingParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1StakingSetAutoStakingParameters
mkPostSapiV1StakingSetAutoStakingParameters postSapiV1StakingSetAutoStakingParametersQueryPositionId postSapiV1StakingSetAutoStakingParametersQueryProduct postSapiV1StakingSetAutoStakingParametersQueryRenewable postSapiV1StakingSetAutoStakingParametersQuerySignature postSapiV1StakingSetAutoStakingParametersQueryTimestamp =
  PostSapiV1StakingSetAutoStakingParameters
    { postSapiV1StakingSetAutoStakingParametersQueryPositionId = postSapiV1StakingSetAutoStakingParametersQueryPositionId,
      postSapiV1StakingSetAutoStakingParametersQueryProduct = postSapiV1StakingSetAutoStakingParametersQueryProduct,
      postSapiV1StakingSetAutoStakingParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1StakingSetAutoStakingParametersQueryRenewable = postSapiV1StakingSetAutoStakingParametersQueryRenewable,
      postSapiV1StakingSetAutoStakingParametersQuerySignature = postSapiV1StakingSetAutoStakingParametersQuerySignature,
      postSapiV1StakingSetAutoStakingParametersQueryTimestamp = postSapiV1StakingSetAutoStakingParametersQueryTimestamp
    }

-- | Represents a response of the operation 'postSapiV1StakingSetAutoStaking'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1StakingSetAutoStakingResponseError' is used.
data PostSapiV1StakingSetAutoStakingResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1StakingSetAutoStakingResponseError GHC.Base.String
  | -- | Success.
    PostSapiV1StakingSetAutoStakingResponse200 PostSapiV1StakingSetAutoStakingResponseBody200
  | -- | Bad Request
    PostSapiV1StakingSetAutoStakingResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1StakingSetAutoStakingResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/setAutoStaking.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1StakingSetAutoStakingResponseBody200 = PostSapiV1StakingSetAutoStakingResponseBody200
  { -- | success
    postSapiV1StakingSetAutoStakingResponseBody200Success :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1StakingSetAutoStakingResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["success" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingResponseBody200Success obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["success" Data.Aeson.Types.ToJSON..= postSapiV1StakingSetAutoStakingResponseBody200Success obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1StakingSetAutoStakingResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1StakingSetAutoStakingResponseBody200" (\obj -> GHC.Base.pure PostSapiV1StakingSetAutoStakingResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success"))

-- | Create a new 'PostSapiV1StakingSetAutoStakingResponseBody200' with all required fields.
mkPostSapiV1StakingSetAutoStakingResponseBody200 ::
  -- | 'postSapiV1StakingSetAutoStakingResponseBody200Success'
  GHC.Types.Bool ->
  PostSapiV1StakingSetAutoStakingResponseBody200
mkPostSapiV1StakingSetAutoStakingResponseBody200 postSapiV1StakingSetAutoStakingResponseBody200Success = PostSapiV1StakingSetAutoStakingResponseBody200 {postSapiV1StakingSetAutoStakingResponseBody200Success = postSapiV1StakingSetAutoStakingResponseBody200Success}

-- | > POST /sapi/v1/staking/setAutoStaking
--
-- The same as 'postSapiV1StakingSetAutoStaking' but accepts an explicit configuration.
postSapiV1StakingSetAutoStakingWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1StakingSetAutoStakingParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1StakingSetAutoStakingResponse)
postSapiV1StakingSetAutoStakingWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1StakingSetAutoStakingResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1StakingSetAutoStakingResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1StakingSetAutoStakingResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1StakingSetAutoStakingResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1StakingSetAutoStakingResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/staking/setAutoStaking")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "positionId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryPositionId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "renewable") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryRenewable parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingSetAutoStakingParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/staking/setAutoStaking
--
-- The same as 'postSapiV1StakingSetAutoStaking' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1StakingSetAutoStakingRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1StakingSetAutoStakingParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1StakingSetAutoStakingRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/staking/setAutoStaking")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "positionId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryPositionId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "renewable") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryRenewable parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingSetAutoStakingParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/staking/setAutoStaking
--
-- The same as 'postSapiV1StakingSetAutoStaking' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1StakingSetAutoStakingWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1StakingSetAutoStakingParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1StakingSetAutoStakingWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/staking/setAutoStaking")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "positionId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryPositionId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "renewable") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryRenewable parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingSetAutoStakingParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingSetAutoStakingParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
