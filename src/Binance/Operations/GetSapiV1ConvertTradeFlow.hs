{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1ConvertTradeFlow
module Binance.Operations.GetSapiV1ConvertTradeFlow where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/convert/tradeFlow
--
-- - The max interval between startTime and endTime is 30 days.
--
-- Weight(UID): 100
getSapiV1ConvertTradeFlow ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1ConvertTradeFlowParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1ConvertTradeFlowResponse)
getSapiV1ConvertTradeFlow parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1ConvertTradeFlowResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1ConvertTradeFlowResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1ConvertTradeFlowResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1ConvertTradeFlowResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1ConvertTradeFlowResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/convert/tradeFlow")
        [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryStartTime parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryEndTime parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1ConvertTradeFlowParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1ConvertTradeFlowParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/convert\/tradeFlow.GET.parameters@ in the specification.
data GetSapiV1ConvertTradeFlowParameters = GetSapiV1ConvertTradeFlowParameters
  { -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1ConvertTradeFlowParametersQueryEndTime :: GHC.Int.Int64,
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- default 100, max 1000
    getSapiV1ConvertTradeFlowParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1ConvertTradeFlowParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1ConvertTradeFlowParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1ConvertTradeFlowParametersQueryStartTime :: GHC.Int.Int64,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1ConvertTradeFlowParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1ConvertTradeFlowParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryEndTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowParametersQueryEndTime obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1ConvertTradeFlowParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1ConvertTradeFlowParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowParametersQuerySignature obj] : ["queryStartTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowParametersQueryStartTime obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryEndTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowParametersQueryEndTime obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1ConvertTradeFlowParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1ConvertTradeFlowParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowParametersQuerySignature obj] : ["queryStartTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowParametersQueryStartTime obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1ConvertTradeFlowParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1ConvertTradeFlowParameters" (\obj -> (((((GHC.Base.pure GetSapiV1ConvertTradeFlowParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1ConvertTradeFlowParameters' with all required fields.
mkGetSapiV1ConvertTradeFlowParameters ::
  -- | 'getSapiV1ConvertTradeFlowParametersQueryEndTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1ConvertTradeFlowParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1ConvertTradeFlowParametersQueryStartTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1ConvertTradeFlowParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1ConvertTradeFlowParameters
mkGetSapiV1ConvertTradeFlowParameters getSapiV1ConvertTradeFlowParametersQueryEndTime getSapiV1ConvertTradeFlowParametersQuerySignature getSapiV1ConvertTradeFlowParametersQueryStartTime getSapiV1ConvertTradeFlowParametersQueryTimestamp =
  GetSapiV1ConvertTradeFlowParameters
    { getSapiV1ConvertTradeFlowParametersQueryEndTime = getSapiV1ConvertTradeFlowParametersQueryEndTime,
      getSapiV1ConvertTradeFlowParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1ConvertTradeFlowParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1ConvertTradeFlowParametersQuerySignature = getSapiV1ConvertTradeFlowParametersQuerySignature,
      getSapiV1ConvertTradeFlowParametersQueryStartTime = getSapiV1ConvertTradeFlowParametersQueryStartTime,
      getSapiV1ConvertTradeFlowParametersQueryTimestamp = getSapiV1ConvertTradeFlowParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1ConvertTradeFlow'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1ConvertTradeFlowResponseError' is used.
data GetSapiV1ConvertTradeFlowResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1ConvertTradeFlowResponseError GHC.Base.String
  | -- | Convert Trade History
    GetSapiV1ConvertTradeFlowResponse200 GetSapiV1ConvertTradeFlowResponseBody200
  | -- | Bad Request
    GetSapiV1ConvertTradeFlowResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1ConvertTradeFlowResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/convert\/tradeFlow.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1ConvertTradeFlowResponseBody200 = GetSapiV1ConvertTradeFlowResponseBody200
  { -- | endTime
    getSapiV1ConvertTradeFlowResponseBody200EndTime :: GHC.Int.Int64,
    -- | limit
    getSapiV1ConvertTradeFlowResponseBody200Limit :: GHC.Int.Int32,
    -- | list
    getSapiV1ConvertTradeFlowResponseBody200List :: ([GetSapiV1ConvertTradeFlowResponseBody200List]),
    -- | moreData
    getSapiV1ConvertTradeFlowResponseBody200MoreData :: GHC.Types.Bool,
    -- | startTime
    getSapiV1ConvertTradeFlowResponseBody200StartTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1ConvertTradeFlowResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["endTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200EndTime obj] : ["limit" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200Limit obj] : ["list" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200List obj] : ["moreData" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200MoreData obj] : ["startTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200StartTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["endTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200EndTime obj] : ["limit" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200Limit obj] : ["list" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200List obj] : ["moreData" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200MoreData obj] : ["startTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200StartTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1ConvertTradeFlowResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1ConvertTradeFlowResponseBody200" (\obj -> ((((GHC.Base.pure GetSapiV1ConvertTradeFlowResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "endTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "limit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "list")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "moreData")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "startTime"))

-- | Create a new 'GetSapiV1ConvertTradeFlowResponseBody200' with all required fields.
mkGetSapiV1ConvertTradeFlowResponseBody200 ::
  -- | 'getSapiV1ConvertTradeFlowResponseBody200EndTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200Limit'
  GHC.Int.Int32 ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200List'
  [GetSapiV1ConvertTradeFlowResponseBody200List] ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200MoreData'
  GHC.Types.Bool ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200StartTime'
  GHC.Int.Int64 ->
  GetSapiV1ConvertTradeFlowResponseBody200
mkGetSapiV1ConvertTradeFlowResponseBody200 getSapiV1ConvertTradeFlowResponseBody200EndTime getSapiV1ConvertTradeFlowResponseBody200Limit getSapiV1ConvertTradeFlowResponseBody200List getSapiV1ConvertTradeFlowResponseBody200MoreData getSapiV1ConvertTradeFlowResponseBody200StartTime =
  GetSapiV1ConvertTradeFlowResponseBody200
    { getSapiV1ConvertTradeFlowResponseBody200EndTime = getSapiV1ConvertTradeFlowResponseBody200EndTime,
      getSapiV1ConvertTradeFlowResponseBody200Limit = getSapiV1ConvertTradeFlowResponseBody200Limit,
      getSapiV1ConvertTradeFlowResponseBody200List = getSapiV1ConvertTradeFlowResponseBody200List,
      getSapiV1ConvertTradeFlowResponseBody200MoreData = getSapiV1ConvertTradeFlowResponseBody200MoreData,
      getSapiV1ConvertTradeFlowResponseBody200StartTime = getSapiV1ConvertTradeFlowResponseBody200StartTime
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/convert\/tradeFlow.GET.responses.200.content.application\/json.schema.properties.list.items@ in the specification.
data GetSapiV1ConvertTradeFlowResponseBody200List = GetSapiV1ConvertTradeFlowResponseBody200List
  { -- | createTime
    getSapiV1ConvertTradeFlowResponseBody200ListCreateTime :: GHC.Int.Int64,
    -- | fromAmount
    getSapiV1ConvertTradeFlowResponseBody200ListFromAmount :: Data.Text.Internal.Text,
    -- | fromAsset
    getSapiV1ConvertTradeFlowResponseBody200ListFromAsset :: Data.Text.Internal.Text,
    -- | inverseRatio: inverse price
    getSapiV1ConvertTradeFlowResponseBody200ListInverseRatio :: Data.Text.Internal.Text,
    -- | orderId
    getSapiV1ConvertTradeFlowResponseBody200ListOrderId :: GHC.Int.Int64,
    -- | orderStatus
    getSapiV1ConvertTradeFlowResponseBody200ListOrderStatus :: Data.Text.Internal.Text,
    -- | quoteId
    getSapiV1ConvertTradeFlowResponseBody200ListQuoteId :: Data.Text.Internal.Text,
    -- | ratio: price ratio
    getSapiV1ConvertTradeFlowResponseBody200ListRatio :: Data.Text.Internal.Text,
    -- | toAmount
    getSapiV1ConvertTradeFlowResponseBody200ListToAmount :: Data.Text.Internal.Text,
    -- | toAsset
    getSapiV1ConvertTradeFlowResponseBody200ListToAsset :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1ConvertTradeFlowResponseBody200List where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["createTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListCreateTime obj] : ["fromAmount" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListFromAmount obj] : ["fromAsset" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListFromAsset obj] : ["inverseRatio" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListInverseRatio obj] : ["orderId" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListOrderId obj] : ["orderStatus" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListOrderStatus obj] : ["quoteId" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListQuoteId obj] : ["ratio" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListRatio obj] : ["toAmount" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListToAmount obj] : ["toAsset" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListToAsset obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["createTime" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListCreateTime obj] : ["fromAmount" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListFromAmount obj] : ["fromAsset" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListFromAsset obj] : ["inverseRatio" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListInverseRatio obj] : ["orderId" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListOrderId obj] : ["orderStatus" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListOrderStatus obj] : ["quoteId" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListQuoteId obj] : ["ratio" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListRatio obj] : ["toAmount" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListToAmount obj] : ["toAsset" Data.Aeson.Types.ToJSON..= getSapiV1ConvertTradeFlowResponseBody200ListToAsset obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1ConvertTradeFlowResponseBody200List where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1ConvertTradeFlowResponseBody200List" (\obj -> (((((((((GHC.Base.pure GetSapiV1ConvertTradeFlowResponseBody200List GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "createTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fromAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fromAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "inverseRatio")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ratio")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "toAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "toAsset"))

-- | Create a new 'GetSapiV1ConvertTradeFlowResponseBody200List' with all required fields.
mkGetSapiV1ConvertTradeFlowResponseBody200List ::
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListCreateTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListFromAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListFromAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListInverseRatio'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListOrderId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListOrderStatus'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListQuoteId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListRatio'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListToAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1ConvertTradeFlowResponseBody200ListToAsset'
  Data.Text.Internal.Text ->
  GetSapiV1ConvertTradeFlowResponseBody200List
mkGetSapiV1ConvertTradeFlowResponseBody200List getSapiV1ConvertTradeFlowResponseBody200ListCreateTime getSapiV1ConvertTradeFlowResponseBody200ListFromAmount getSapiV1ConvertTradeFlowResponseBody200ListFromAsset getSapiV1ConvertTradeFlowResponseBody200ListInverseRatio getSapiV1ConvertTradeFlowResponseBody200ListOrderId getSapiV1ConvertTradeFlowResponseBody200ListOrderStatus getSapiV1ConvertTradeFlowResponseBody200ListQuoteId getSapiV1ConvertTradeFlowResponseBody200ListRatio getSapiV1ConvertTradeFlowResponseBody200ListToAmount getSapiV1ConvertTradeFlowResponseBody200ListToAsset =
  GetSapiV1ConvertTradeFlowResponseBody200List
    { getSapiV1ConvertTradeFlowResponseBody200ListCreateTime = getSapiV1ConvertTradeFlowResponseBody200ListCreateTime,
      getSapiV1ConvertTradeFlowResponseBody200ListFromAmount = getSapiV1ConvertTradeFlowResponseBody200ListFromAmount,
      getSapiV1ConvertTradeFlowResponseBody200ListFromAsset = getSapiV1ConvertTradeFlowResponseBody200ListFromAsset,
      getSapiV1ConvertTradeFlowResponseBody200ListInverseRatio = getSapiV1ConvertTradeFlowResponseBody200ListInverseRatio,
      getSapiV1ConvertTradeFlowResponseBody200ListOrderId = getSapiV1ConvertTradeFlowResponseBody200ListOrderId,
      getSapiV1ConvertTradeFlowResponseBody200ListOrderStatus = getSapiV1ConvertTradeFlowResponseBody200ListOrderStatus,
      getSapiV1ConvertTradeFlowResponseBody200ListQuoteId = getSapiV1ConvertTradeFlowResponseBody200ListQuoteId,
      getSapiV1ConvertTradeFlowResponseBody200ListRatio = getSapiV1ConvertTradeFlowResponseBody200ListRatio,
      getSapiV1ConvertTradeFlowResponseBody200ListToAmount = getSapiV1ConvertTradeFlowResponseBody200ListToAmount,
      getSapiV1ConvertTradeFlowResponseBody200ListToAsset = getSapiV1ConvertTradeFlowResponseBody200ListToAsset
    }

-- | > GET /sapi/v1/convert/tradeFlow
--
-- The same as 'getSapiV1ConvertTradeFlow' but accepts an explicit configuration.
getSapiV1ConvertTradeFlowWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1ConvertTradeFlowParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1ConvertTradeFlowResponse)
getSapiV1ConvertTradeFlowWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1ConvertTradeFlowResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1ConvertTradeFlowResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1ConvertTradeFlowResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1ConvertTradeFlowResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1ConvertTradeFlowResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/convert/tradeFlow")
          [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryStartTime parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryEndTime parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1ConvertTradeFlowParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1ConvertTradeFlowParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/convert/tradeFlow
--
-- The same as 'getSapiV1ConvertTradeFlow' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1ConvertTradeFlowRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1ConvertTradeFlowParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1ConvertTradeFlowRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/convert/tradeFlow")
        [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryStartTime parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryEndTime parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1ConvertTradeFlowParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1ConvertTradeFlowParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/convert/tradeFlow
--
-- The same as 'getSapiV1ConvertTradeFlow' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1ConvertTradeFlowWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1ConvertTradeFlowParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1ConvertTradeFlowWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/convert/tradeFlow")
          [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryStartTime parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryEndTime parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1ConvertTradeFlowParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1ConvertTradeFlowParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1ConvertTradeFlowParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
