{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1PayTransactions
module Binance.Operations.GetSapiV1PayTransactions where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/pay/transactions
--
-- - If startTime and endTime are not sent, the recent 90 days\' data will be returned.
-- - The max interval between startTime and endTime is 90 days.
-- - Support for querying orders within the last 18 months.
--
-- Weight(UID): 3000
getSapiV1PayTransactions ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1PayTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1PayTransactionsResponse)
getSapiV1PayTransactions parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1PayTransactionsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1PayTransactionsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1PayTransactionsResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1PayTransactionsResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1PayTransactionsResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/pay/transactions")
        [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1PayTransactionsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1PayTransactionsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/pay\/transactions.GET.parameters@ in the specification.
data GetSapiV1PayTransactionsParameters = GetSapiV1PayTransactionsParameters
  { -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1PayTransactionsParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- default 100, max 100
    getSapiV1PayTransactionsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1PayTransactionsParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1PayTransactionsParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1PayTransactionsParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1PayTransactionsParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1PayTransactionsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1PayTransactionsParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1PayTransactionsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1PayTransactionsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1PayTransactionsParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1PayTransactionsParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1PayTransactionsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1PayTransactionsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1PayTransactionsParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1PayTransactionsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1PayTransactionsParameters" (\obj -> (((((GHC.Base.pure GetSapiV1PayTransactionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1PayTransactionsParameters' with all required fields.
mkGetSapiV1PayTransactionsParameters ::
  -- | 'getSapiV1PayTransactionsParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1PayTransactionsParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1PayTransactionsParameters
mkGetSapiV1PayTransactionsParameters getSapiV1PayTransactionsParametersQuerySignature getSapiV1PayTransactionsParametersQueryTimestamp =
  GetSapiV1PayTransactionsParameters
    { getSapiV1PayTransactionsParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1PayTransactionsParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1PayTransactionsParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1PayTransactionsParametersQuerySignature = getSapiV1PayTransactionsParametersQuerySignature,
      getSapiV1PayTransactionsParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1PayTransactionsParametersQueryTimestamp = getSapiV1PayTransactionsParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1PayTransactions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1PayTransactionsResponseError' is used.
data GetSapiV1PayTransactionsResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1PayTransactionsResponseError GHC.Base.String
  | -- | Pay History
    GetSapiV1PayTransactionsResponse200 GetSapiV1PayTransactionsResponseBody200
  | -- | Bad Request
    GetSapiV1PayTransactionsResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1PayTransactionsResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/pay\/transactions.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1PayTransactionsResponseBody200 = GetSapiV1PayTransactionsResponseBody200
  { -- | code
    getSapiV1PayTransactionsResponseBody200Code :: Data.Text.Internal.Text,
    -- | data
    getSapiV1PayTransactionsResponseBody200Data :: ([GetSapiV1PayTransactionsResponseBody200Data]),
    -- | message
    getSapiV1PayTransactionsResponseBody200Message :: Data.Text.Internal.Text,
    -- | success
    getSapiV1PayTransactionsResponseBody200Success :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1PayTransactionsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200Data obj] : ["message" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200Message obj] : ["success" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200Success obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200Data obj] : ["message" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200Message obj] : ["success" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200Success obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1PayTransactionsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1PayTransactionsResponseBody200" (\obj -> (((GHC.Base.pure GetSapiV1PayTransactionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success"))

-- | Create a new 'GetSapiV1PayTransactionsResponseBody200' with all required fields.
mkGetSapiV1PayTransactionsResponseBody200 ::
  -- | 'getSapiV1PayTransactionsResponseBody200Code'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1PayTransactionsResponseBody200Data'
  [GetSapiV1PayTransactionsResponseBody200Data] ->
  -- | 'getSapiV1PayTransactionsResponseBody200Message'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1PayTransactionsResponseBody200Success'
  GHC.Types.Bool ->
  GetSapiV1PayTransactionsResponseBody200
mkGetSapiV1PayTransactionsResponseBody200 getSapiV1PayTransactionsResponseBody200Code getSapiV1PayTransactionsResponseBody200Data getSapiV1PayTransactionsResponseBody200Message getSapiV1PayTransactionsResponseBody200Success =
  GetSapiV1PayTransactionsResponseBody200
    { getSapiV1PayTransactionsResponseBody200Code = getSapiV1PayTransactionsResponseBody200Code,
      getSapiV1PayTransactionsResponseBody200Data = getSapiV1PayTransactionsResponseBody200Data,
      getSapiV1PayTransactionsResponseBody200Message = getSapiV1PayTransactionsResponseBody200Message,
      getSapiV1PayTransactionsResponseBody200Success = getSapiV1PayTransactionsResponseBody200Success
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/pay\/transactions.GET.responses.200.content.application\/json.schema.properties.data.items@ in the specification.
data GetSapiV1PayTransactionsResponseBody200Data = GetSapiV1PayTransactionsResponseBody200Data
  { -- | amount: order amount(up to 8 decimal places), positive is income, negative is expenditure
    getSapiV1PayTransactionsResponseBody200DataAmount :: Data.Text.Internal.Text,
    -- | currency
    getSapiV1PayTransactionsResponseBody200DataCurrency :: Data.Text.Internal.Text,
    -- | fundsDetail
    getSapiV1PayTransactionsResponseBody200DataFundsDetail :: ([GetSapiV1PayTransactionsResponseBody200DataFundsDetail]),
    -- | orderType: Enum：PAY(C2B Merchant Acquiring Payment), PAY_REFUND(C2B Merchant Acquiring Payment,refund), C2C(C2C Transfer Payment),CRYPTO_BOX(Crypto box), CRYPTO_BOX_RF(Crypto Box, refund), C2C_HOLDING(Transfer to new Binance user), C2C_HOLDING_RF(Transfer to new Binance user,refund), PAYOUT(B2C Disbursement Payment)
    getSapiV1PayTransactionsResponseBody200DataOrderType :: Data.Text.Internal.Text,
    -- | transactionId
    getSapiV1PayTransactionsResponseBody200DataTransactionId :: Data.Text.Internal.Text,
    -- | transactionTime
    getSapiV1PayTransactionsResponseBody200DataTransactionTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1PayTransactionsResponseBody200Data where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataAmount obj] : ["currency" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataCurrency obj] : ["fundsDetail" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataFundsDetail obj] : ["orderType" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataOrderType obj] : ["transactionId" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataTransactionId obj] : ["transactionTime" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataTransactionTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataAmount obj] : ["currency" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataCurrency obj] : ["fundsDetail" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataFundsDetail obj] : ["orderType" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataOrderType obj] : ["transactionId" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataTransactionId obj] : ["transactionTime" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataTransactionTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1PayTransactionsResponseBody200Data where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1PayTransactionsResponseBody200Data" (\obj -> (((((GHC.Base.pure GetSapiV1PayTransactionsResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fundsDetail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactionId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactionTime"))

-- | Create a new 'GetSapiV1PayTransactionsResponseBody200Data' with all required fields.
mkGetSapiV1PayTransactionsResponseBody200Data ::
  -- | 'getSapiV1PayTransactionsResponseBody200DataAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1PayTransactionsResponseBody200DataCurrency'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1PayTransactionsResponseBody200DataFundsDetail'
  [GetSapiV1PayTransactionsResponseBody200DataFundsDetail] ->
  -- | 'getSapiV1PayTransactionsResponseBody200DataOrderType'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1PayTransactionsResponseBody200DataTransactionId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1PayTransactionsResponseBody200DataTransactionTime'
  GHC.Int.Int64 ->
  GetSapiV1PayTransactionsResponseBody200Data
mkGetSapiV1PayTransactionsResponseBody200Data getSapiV1PayTransactionsResponseBody200DataAmount getSapiV1PayTransactionsResponseBody200DataCurrency getSapiV1PayTransactionsResponseBody200DataFundsDetail getSapiV1PayTransactionsResponseBody200DataOrderType getSapiV1PayTransactionsResponseBody200DataTransactionId getSapiV1PayTransactionsResponseBody200DataTransactionTime =
  GetSapiV1PayTransactionsResponseBody200Data
    { getSapiV1PayTransactionsResponseBody200DataAmount = getSapiV1PayTransactionsResponseBody200DataAmount,
      getSapiV1PayTransactionsResponseBody200DataCurrency = getSapiV1PayTransactionsResponseBody200DataCurrency,
      getSapiV1PayTransactionsResponseBody200DataFundsDetail = getSapiV1PayTransactionsResponseBody200DataFundsDetail,
      getSapiV1PayTransactionsResponseBody200DataOrderType = getSapiV1PayTransactionsResponseBody200DataOrderType,
      getSapiV1PayTransactionsResponseBody200DataTransactionId = getSapiV1PayTransactionsResponseBody200DataTransactionId,
      getSapiV1PayTransactionsResponseBody200DataTransactionTime = getSapiV1PayTransactionsResponseBody200DataTransactionTime
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/pay\/transactions.GET.responses.200.content.application\/json.schema.properties.data.items.properties.fundsDetail.items@ in the specification.
data GetSapiV1PayTransactionsResponseBody200DataFundsDetail = GetSapiV1PayTransactionsResponseBody200DataFundsDetail
  { -- | amount
    getSapiV1PayTransactionsResponseBody200DataFundsDetailAmount :: Data.Text.Internal.Text,
    -- | currency
    getSapiV1PayTransactionsResponseBody200DataFundsDetailCurrency :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1PayTransactionsResponseBody200DataFundsDetail where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataFundsDetailAmount obj] : ["currency" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataFundsDetailCurrency obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataFundsDetailAmount obj] : ["currency" Data.Aeson.Types.ToJSON..= getSapiV1PayTransactionsResponseBody200DataFundsDetailCurrency obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1PayTransactionsResponseBody200DataFundsDetail where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1PayTransactionsResponseBody200DataFundsDetail" (\obj -> (GHC.Base.pure GetSapiV1PayTransactionsResponseBody200DataFundsDetail GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency"))

-- | Create a new 'GetSapiV1PayTransactionsResponseBody200DataFundsDetail' with all required fields.
mkGetSapiV1PayTransactionsResponseBody200DataFundsDetail ::
  -- | 'getSapiV1PayTransactionsResponseBody200DataFundsDetailAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1PayTransactionsResponseBody200DataFundsDetailCurrency'
  Data.Text.Internal.Text ->
  GetSapiV1PayTransactionsResponseBody200DataFundsDetail
mkGetSapiV1PayTransactionsResponseBody200DataFundsDetail getSapiV1PayTransactionsResponseBody200DataFundsDetailAmount getSapiV1PayTransactionsResponseBody200DataFundsDetailCurrency =
  GetSapiV1PayTransactionsResponseBody200DataFundsDetail
    { getSapiV1PayTransactionsResponseBody200DataFundsDetailAmount = getSapiV1PayTransactionsResponseBody200DataFundsDetailAmount,
      getSapiV1PayTransactionsResponseBody200DataFundsDetailCurrency = getSapiV1PayTransactionsResponseBody200DataFundsDetailCurrency
    }

-- | > GET /sapi/v1/pay/transactions
--
-- The same as 'getSapiV1PayTransactions' but accepts an explicit configuration.
getSapiV1PayTransactionsWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1PayTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1PayTransactionsResponse)
getSapiV1PayTransactionsWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1PayTransactionsResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1PayTransactionsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1PayTransactionsResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1PayTransactionsResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1PayTransactionsResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/pay/transactions")
          [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1PayTransactionsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1PayTransactionsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/pay/transactions
--
-- The same as 'getSapiV1PayTransactions' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1PayTransactionsRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1PayTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1PayTransactionsRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/pay/transactions")
        [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1PayTransactionsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1PayTransactionsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/pay/transactions
--
-- The same as 'getSapiV1PayTransactions' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1PayTransactionsWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1PayTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1PayTransactionsWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/pay/transactions")
          [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1PayTransactionsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1PayTransactionsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1PayTransactionsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
