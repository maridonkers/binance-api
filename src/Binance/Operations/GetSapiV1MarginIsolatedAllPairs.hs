{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MarginIsolatedAllPairs
module Binance.Operations.GetSapiV1MarginIsolatedAllPairs where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/margin/isolated/allPairs
--
-- Weight(IP): 10
getSapiV1MarginIsolatedAllPairs ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedAllPairsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MarginIsolatedAllPairsResponse)
getSapiV1MarginIsolatedAllPairs parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginIsolatedAllPairsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginIsolatedAllPairsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1MarginIsolatedAllPairsResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginIsolatedAllPairsResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginIsolatedAllPairsResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/margin/isolated/allPairs")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedAllPairsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAllPairsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/isolated\/allPairs.GET.parameters@ in the specification.
data GetSapiV1MarginIsolatedAllPairsParameters = GetSapiV1MarginIsolatedAllPairsParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1MarginIsolatedAllPairsParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1MarginIsolatedAllPairsParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginIsolatedAllPairsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginIsolatedAllPairsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginIsolatedAllPairsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginIsolatedAllPairsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginIsolatedAllPairsParameters" (\obj -> ((GHC.Base.pure GetSapiV1MarginIsolatedAllPairsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1MarginIsolatedAllPairsParameters' with all required fields.
mkGetSapiV1MarginIsolatedAllPairsParameters ::
  -- | 'getSapiV1MarginIsolatedAllPairsParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1MarginIsolatedAllPairsParameters
mkGetSapiV1MarginIsolatedAllPairsParameters getSapiV1MarginIsolatedAllPairsParametersQuerySignature getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp =
  GetSapiV1MarginIsolatedAllPairsParameters
    { getSapiV1MarginIsolatedAllPairsParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1MarginIsolatedAllPairsParametersQuerySignature = getSapiV1MarginIsolatedAllPairsParametersQuerySignature,
      getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp = getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1MarginIsolatedAllPairs'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MarginIsolatedAllPairsResponseError' is used.
data GetSapiV1MarginIsolatedAllPairsResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MarginIsolatedAllPairsResponseError GHC.Base.String
  | -- | All Isolated Margin Symbols
    GetSapiV1MarginIsolatedAllPairsResponse200 ([GetSapiV1MarginIsolatedAllPairsResponseBody200])
  | -- | Bad Request
    GetSapiV1MarginIsolatedAllPairsResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1MarginIsolatedAllPairsResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/isolated\/allPairs.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1MarginIsolatedAllPairsResponseBody200 = GetSapiV1MarginIsolatedAllPairsResponseBody200
  { -- | base
    getSapiV1MarginIsolatedAllPairsResponseBody200Base :: Data.Text.Internal.Text,
    -- | isBuyAllowed
    getSapiV1MarginIsolatedAllPairsResponseBody200IsBuyAllowed :: GHC.Types.Bool,
    -- | isMarginTrade
    getSapiV1MarginIsolatedAllPairsResponseBody200IsMarginTrade :: GHC.Types.Bool,
    -- | isSellAllowed
    getSapiV1MarginIsolatedAllPairsResponseBody200IsSellAllowed :: GHC.Types.Bool,
    -- | quote
    getSapiV1MarginIsolatedAllPairsResponseBody200Quote :: Data.Text.Internal.Text,
    -- | symbol
    getSapiV1MarginIsolatedAllPairsResponseBody200Symbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginIsolatedAllPairsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["base" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200Base obj] : ["isBuyAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200IsBuyAllowed obj] : ["isMarginTrade" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200IsMarginTrade obj] : ["isSellAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200IsSellAllowed obj] : ["quote" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200Quote obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200Symbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["base" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200Base obj] : ["isBuyAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200IsBuyAllowed obj] : ["isMarginTrade" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200IsMarginTrade obj] : ["isSellAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200IsSellAllowed obj] : ["quote" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200Quote obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAllPairsResponseBody200Symbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginIsolatedAllPairsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginIsolatedAllPairsResponseBody200" (\obj -> (((((GHC.Base.pure GetSapiV1MarginIsolatedAllPairsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "base")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBuyAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMarginTrade")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isSellAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quote")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'GetSapiV1MarginIsolatedAllPairsResponseBody200' with all required fields.
mkGetSapiV1MarginIsolatedAllPairsResponseBody200 ::
  -- | 'getSapiV1MarginIsolatedAllPairsResponseBody200Base'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginIsolatedAllPairsResponseBody200IsBuyAllowed'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginIsolatedAllPairsResponseBody200IsMarginTrade'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginIsolatedAllPairsResponseBody200IsSellAllowed'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginIsolatedAllPairsResponseBody200Quote'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginIsolatedAllPairsResponseBody200Symbol'
  Data.Text.Internal.Text ->
  GetSapiV1MarginIsolatedAllPairsResponseBody200
mkGetSapiV1MarginIsolatedAllPairsResponseBody200 getSapiV1MarginIsolatedAllPairsResponseBody200Base getSapiV1MarginIsolatedAllPairsResponseBody200IsBuyAllowed getSapiV1MarginIsolatedAllPairsResponseBody200IsMarginTrade getSapiV1MarginIsolatedAllPairsResponseBody200IsSellAllowed getSapiV1MarginIsolatedAllPairsResponseBody200Quote getSapiV1MarginIsolatedAllPairsResponseBody200Symbol =
  GetSapiV1MarginIsolatedAllPairsResponseBody200
    { getSapiV1MarginIsolatedAllPairsResponseBody200Base = getSapiV1MarginIsolatedAllPairsResponseBody200Base,
      getSapiV1MarginIsolatedAllPairsResponseBody200IsBuyAllowed = getSapiV1MarginIsolatedAllPairsResponseBody200IsBuyAllowed,
      getSapiV1MarginIsolatedAllPairsResponseBody200IsMarginTrade = getSapiV1MarginIsolatedAllPairsResponseBody200IsMarginTrade,
      getSapiV1MarginIsolatedAllPairsResponseBody200IsSellAllowed = getSapiV1MarginIsolatedAllPairsResponseBody200IsSellAllowed,
      getSapiV1MarginIsolatedAllPairsResponseBody200Quote = getSapiV1MarginIsolatedAllPairsResponseBody200Quote,
      getSapiV1MarginIsolatedAllPairsResponseBody200Symbol = getSapiV1MarginIsolatedAllPairsResponseBody200Symbol
    }

-- | > GET /sapi/v1/margin/isolated/allPairs
--
-- The same as 'getSapiV1MarginIsolatedAllPairs' but accepts an explicit configuration.
getSapiV1MarginIsolatedAllPairsWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedAllPairsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MarginIsolatedAllPairsResponse)
getSapiV1MarginIsolatedAllPairsWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MarginIsolatedAllPairsResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginIsolatedAllPairsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1MarginIsolatedAllPairsResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginIsolatedAllPairsResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginIsolatedAllPairsResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/margin/isolated/allPairs")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedAllPairsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAllPairsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/margin/isolated/allPairs
--
-- The same as 'getSapiV1MarginIsolatedAllPairs' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginIsolatedAllPairsRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedAllPairsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginIsolatedAllPairsRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/margin/isolated/allPairs")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedAllPairsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAllPairsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/margin/isolated/allPairs
--
-- The same as 'getSapiV1MarginIsolatedAllPairs' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginIsolatedAllPairsWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedAllPairsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginIsolatedAllPairsWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/margin/isolated/allPairs")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedAllPairsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAllPairsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAllPairsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
