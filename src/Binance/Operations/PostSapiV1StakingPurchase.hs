{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1StakingPurchase
module Binance.Operations.PostSapiV1StakingPurchase where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/staking/purchase
--
-- Weight(IP): 1
postSapiV1StakingPurchase ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1StakingPurchaseParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1StakingPurchaseResponse)
postSapiV1StakingPurchase parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1StakingPurchaseResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1StakingPurchaseResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1StakingPurchaseResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1StakingPurchaseResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1StakingPurchaseResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/staking/purchase")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "renewable") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingPurchaseParametersQueryRenewable parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingPurchaseParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/purchase.POST.parameters@ in the specification.
data PostSapiV1StakingPurchaseParameters = PostSapiV1StakingPurchaseParameters
  { -- | queryAmount: Represents the parameter named \'amount\'
    postSapiV1StakingPurchaseParametersQueryAmount :: GHC.Types.Double,
    -- | queryProduct: Represents the parameter named \'product\'
    --
    -- * \`STAKING\` - for Locked Staking
    -- * \`F_DEFI\` - for flexible DeFi Staking
    -- * \`L_DEFI\` - for locked DeFi Staking
    postSapiV1StakingPurchaseParametersQueryProduct :: Data.Text.Internal.Text,
    -- | queryProductId: Represents the parameter named \'productId\'
    postSapiV1StakingPurchaseParametersQueryProductId :: Data.Text.Internal.Text,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1StakingPurchaseParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryRenewable: Represents the parameter named \'renewable\'
    --
    -- true or false, default false. Active if product is \`STAKING\` or \`L_DEFI\`
    postSapiV1StakingPurchaseParametersQueryRenewable :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1StakingPurchaseParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1StakingPurchaseParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1StakingPurchaseParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQueryAmount obj] : ["queryProduct" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQueryProduct obj] : ["queryProductId" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQueryProductId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1StakingPurchaseParametersQueryRecvWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRenewable" Data.Aeson.Types.ToJSON..=)) (postSapiV1StakingPurchaseParametersQueryRenewable obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQueryAmount obj] : ["queryProduct" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQueryProduct obj] : ["queryProductId" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQueryProductId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1StakingPurchaseParametersQueryRecvWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRenewable" Data.Aeson.Types.ToJSON..=)) (postSapiV1StakingPurchaseParametersQueryRenewable obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1StakingPurchaseParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1StakingPurchaseParameters" (\obj -> ((((((GHC.Base.pure PostSapiV1StakingPurchaseParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryProductId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRenewable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1StakingPurchaseParameters' with all required fields.
mkPostSapiV1StakingPurchaseParameters ::
  -- | 'postSapiV1StakingPurchaseParametersQueryAmount'
  GHC.Types.Double ->
  -- | 'postSapiV1StakingPurchaseParametersQueryProduct'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1StakingPurchaseParametersQueryProductId'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1StakingPurchaseParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1StakingPurchaseParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1StakingPurchaseParameters
mkPostSapiV1StakingPurchaseParameters postSapiV1StakingPurchaseParametersQueryAmount postSapiV1StakingPurchaseParametersQueryProduct postSapiV1StakingPurchaseParametersQueryProductId postSapiV1StakingPurchaseParametersQuerySignature postSapiV1StakingPurchaseParametersQueryTimestamp =
  PostSapiV1StakingPurchaseParameters
    { postSapiV1StakingPurchaseParametersQueryAmount = postSapiV1StakingPurchaseParametersQueryAmount,
      postSapiV1StakingPurchaseParametersQueryProduct = postSapiV1StakingPurchaseParametersQueryProduct,
      postSapiV1StakingPurchaseParametersQueryProductId = postSapiV1StakingPurchaseParametersQueryProductId,
      postSapiV1StakingPurchaseParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1StakingPurchaseParametersQueryRenewable = GHC.Maybe.Nothing,
      postSapiV1StakingPurchaseParametersQuerySignature = postSapiV1StakingPurchaseParametersQuerySignature,
      postSapiV1StakingPurchaseParametersQueryTimestamp = postSapiV1StakingPurchaseParametersQueryTimestamp
    }

-- | Represents a response of the operation 'postSapiV1StakingPurchase'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1StakingPurchaseResponseError' is used.
data PostSapiV1StakingPurchaseResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1StakingPurchaseResponseError GHC.Base.String
  | -- | Position Id.
    PostSapiV1StakingPurchaseResponse200 PostSapiV1StakingPurchaseResponseBody200
  | -- | Bad Request
    PostSapiV1StakingPurchaseResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1StakingPurchaseResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/purchase.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1StakingPurchaseResponseBody200 = PostSapiV1StakingPurchaseResponseBody200
  { -- | positionId
    postSapiV1StakingPurchaseResponseBody200PositionId :: Data.Text.Internal.Text,
    -- | success
    postSapiV1StakingPurchaseResponseBody200Success :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1StakingPurchaseResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["positionId" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseResponseBody200PositionId obj] : ["success" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseResponseBody200Success obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["positionId" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseResponseBody200PositionId obj] : ["success" Data.Aeson.Types.ToJSON..= postSapiV1StakingPurchaseResponseBody200Success obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1StakingPurchaseResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1StakingPurchaseResponseBody200" (\obj -> (GHC.Base.pure PostSapiV1StakingPurchaseResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "positionId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success"))

-- | Create a new 'PostSapiV1StakingPurchaseResponseBody200' with all required fields.
mkPostSapiV1StakingPurchaseResponseBody200 ::
  -- | 'postSapiV1StakingPurchaseResponseBody200PositionId'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1StakingPurchaseResponseBody200Success'
  GHC.Types.Bool ->
  PostSapiV1StakingPurchaseResponseBody200
mkPostSapiV1StakingPurchaseResponseBody200 postSapiV1StakingPurchaseResponseBody200PositionId postSapiV1StakingPurchaseResponseBody200Success =
  PostSapiV1StakingPurchaseResponseBody200
    { postSapiV1StakingPurchaseResponseBody200PositionId = postSapiV1StakingPurchaseResponseBody200PositionId,
      postSapiV1StakingPurchaseResponseBody200Success = postSapiV1StakingPurchaseResponseBody200Success
    }

-- | > POST /sapi/v1/staking/purchase
--
-- The same as 'postSapiV1StakingPurchase' but accepts an explicit configuration.
postSapiV1StakingPurchaseWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1StakingPurchaseParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1StakingPurchaseResponse)
postSapiV1StakingPurchaseWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1StakingPurchaseResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1StakingPurchaseResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1StakingPurchaseResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1StakingPurchaseResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1StakingPurchaseResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/staking/purchase")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "renewable") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingPurchaseParametersQueryRenewable parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingPurchaseParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/staking/purchase
--
-- The same as 'postSapiV1StakingPurchase' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1StakingPurchaseRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1StakingPurchaseParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1StakingPurchaseRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/staking/purchase")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "renewable") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingPurchaseParametersQueryRenewable parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingPurchaseParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/staking/purchase
--
-- The same as 'postSapiV1StakingPurchase' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1StakingPurchaseWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1StakingPurchaseParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1StakingPurchaseWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/staking/purchase")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "renewable") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingPurchaseParametersQueryRenewable parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1StakingPurchaseParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1StakingPurchaseParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
