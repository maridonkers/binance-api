{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getApiV3RateLimitOrder
module Binance.Operations.GetApiV3RateLimitOrder where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /api/v3/rateLimit/order
--
-- Displays the user\'s current order count usage for all intervals.
--
-- Weight(IP): 20
getApiV3RateLimitOrder ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3RateLimitOrderParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetApiV3RateLimitOrderResponse)
getApiV3RateLimitOrder parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetApiV3RateLimitOrderResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3RateLimitOrderResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetApiV3RateLimitOrderResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3RateLimitOrderResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3RateLimitOrderResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/rateLimit/order")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3RateLimitOrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3RateLimitOrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3RateLimitOrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/rateLimit\/order.GET.parameters@ in the specification.
data GetApiV3RateLimitOrderParameters = GetApiV3RateLimitOrderParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getApiV3RateLimitOrderParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getApiV3RateLimitOrderParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getApiV3RateLimitOrderParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3RateLimitOrderParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getApiV3RateLimitOrderParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getApiV3RateLimitOrderParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3RateLimitOrderParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3RateLimitOrderParameters" (\obj -> ((GHC.Base.pure GetApiV3RateLimitOrderParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetApiV3RateLimitOrderParameters' with all required fields.
mkGetApiV3RateLimitOrderParameters ::
  -- | 'getApiV3RateLimitOrderParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getApiV3RateLimitOrderParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetApiV3RateLimitOrderParameters
mkGetApiV3RateLimitOrderParameters getApiV3RateLimitOrderParametersQuerySignature getApiV3RateLimitOrderParametersQueryTimestamp =
  GetApiV3RateLimitOrderParameters
    { getApiV3RateLimitOrderParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getApiV3RateLimitOrderParametersQuerySignature = getApiV3RateLimitOrderParametersQuerySignature,
      getApiV3RateLimitOrderParametersQueryTimestamp = getApiV3RateLimitOrderParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getApiV3RateLimitOrder'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApiV3RateLimitOrderResponseError' is used.
data GetApiV3RateLimitOrderResponse
  = -- | Means either no matching case available or a parse error
    GetApiV3RateLimitOrderResponseError GHC.Base.String
  | -- | Order rate limits
    GetApiV3RateLimitOrderResponse200 ([GetApiV3RateLimitOrderResponseBody200])
  | -- | Bad Request
    GetApiV3RateLimitOrderResponse400 Error
  | -- | Unauthorized Request
    GetApiV3RateLimitOrderResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/api\/v3\/rateLimit\/order.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetApiV3RateLimitOrderResponseBody200 = GetApiV3RateLimitOrderResponseBody200
  { -- | count
    getApiV3RateLimitOrderResponseBody200Count :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | interval
    getApiV3RateLimitOrderResponseBody200Interval :: Data.Text.Internal.Text,
    -- | intervalNum
    getApiV3RateLimitOrderResponseBody200IntervalNum :: GHC.Int.Int32,
    -- | limit
    getApiV3RateLimitOrderResponseBody200Limit :: GHC.Int.Int32,
    -- | rateLimitType
    getApiV3RateLimitOrderResponseBody200RateLimitType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3RateLimitOrderResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("count" Data.Aeson.Types.ToJSON..=)) (getApiV3RateLimitOrderResponseBody200Count obj) : ["interval" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderResponseBody200Interval obj] : ["intervalNum" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderResponseBody200IntervalNum obj] : ["limit" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderResponseBody200Limit obj] : ["rateLimitType" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderResponseBody200RateLimitType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("count" Data.Aeson.Types.ToJSON..=)) (getApiV3RateLimitOrderResponseBody200Count obj) : ["interval" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderResponseBody200Interval obj] : ["intervalNum" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderResponseBody200IntervalNum obj] : ["limit" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderResponseBody200Limit obj] : ["rateLimitType" Data.Aeson.Types.ToJSON..= getApiV3RateLimitOrderResponseBody200RateLimitType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3RateLimitOrderResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3RateLimitOrderResponseBody200" (\obj -> ((((GHC.Base.pure GetApiV3RateLimitOrderResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "intervalNum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "limit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rateLimitType"))

-- | Create a new 'GetApiV3RateLimitOrderResponseBody200' with all required fields.
mkGetApiV3RateLimitOrderResponseBody200 ::
  -- | 'getApiV3RateLimitOrderResponseBody200Interval'
  Data.Text.Internal.Text ->
  -- | 'getApiV3RateLimitOrderResponseBody200IntervalNum'
  GHC.Int.Int32 ->
  -- | 'getApiV3RateLimitOrderResponseBody200Limit'
  GHC.Int.Int32 ->
  -- | 'getApiV3RateLimitOrderResponseBody200RateLimitType'
  Data.Text.Internal.Text ->
  GetApiV3RateLimitOrderResponseBody200
mkGetApiV3RateLimitOrderResponseBody200 getApiV3RateLimitOrderResponseBody200Interval getApiV3RateLimitOrderResponseBody200IntervalNum getApiV3RateLimitOrderResponseBody200Limit getApiV3RateLimitOrderResponseBody200RateLimitType =
  GetApiV3RateLimitOrderResponseBody200
    { getApiV3RateLimitOrderResponseBody200Count = GHC.Maybe.Nothing,
      getApiV3RateLimitOrderResponseBody200Interval = getApiV3RateLimitOrderResponseBody200Interval,
      getApiV3RateLimitOrderResponseBody200IntervalNum = getApiV3RateLimitOrderResponseBody200IntervalNum,
      getApiV3RateLimitOrderResponseBody200Limit = getApiV3RateLimitOrderResponseBody200Limit,
      getApiV3RateLimitOrderResponseBody200RateLimitType = getApiV3RateLimitOrderResponseBody200RateLimitType
    }

-- | > GET /api/v3/rateLimit/order
--
-- The same as 'getApiV3RateLimitOrder' but accepts an explicit configuration.
getApiV3RateLimitOrderWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3RateLimitOrderParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetApiV3RateLimitOrderResponse)
getApiV3RateLimitOrderWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetApiV3RateLimitOrderResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3RateLimitOrderResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetApiV3RateLimitOrderResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3RateLimitOrderResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3RateLimitOrderResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/rateLimit/order")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3RateLimitOrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3RateLimitOrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3RateLimitOrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /api/v3/rateLimit/order
--
-- The same as 'getApiV3RateLimitOrder' but returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3RateLimitOrderRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3RateLimitOrderParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3RateLimitOrderRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/rateLimit/order")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3RateLimitOrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3RateLimitOrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3RateLimitOrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /api/v3/rateLimit/order
--
-- The same as 'getApiV3RateLimitOrder' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3RateLimitOrderWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3RateLimitOrderParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3RateLimitOrderWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/rateLimit/order")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3RateLimitOrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3RateLimitOrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3RateLimitOrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
