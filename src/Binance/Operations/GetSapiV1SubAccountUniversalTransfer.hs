{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1SubAccountUniversalTransfer
module Binance.Operations.GetSapiV1SubAccountUniversalTransfer where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/sub-account/universalTransfer
--
-- - \`fromEmail\` and \`toEmail\` cannot be sent at the same time.
-- - Return \`fromEmail\` equal master account email by default.
-- - The query time period must be less then 30 days.
-- - If startTime and endTime not sent, return records of the last 30 days by default.
--
-- Weight(IP): 1
getSapiV1SubAccountUniversalTransfer ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountUniversalTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountUniversalTransferResponse)
getSapiV1SubAccountUniversalTransfer parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1SubAccountUniversalTransferResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountUniversalTransferResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1SubAccountUniversalTransferResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountUniversalTransferResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountUniversalTransferResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/universalTransfer")
        [ Binance.Common.QueryParameter (Data.Text.pack "fromEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryFromEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "toEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryToEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryClientTranId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountUniversalTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountUniversalTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/universalTransfer.GET.parameters@ in the specification.
data GetSapiV1SubAccountUniversalTransferParameters = GetSapiV1SubAccountUniversalTransferParameters
  { -- | queryClientTranId: Represents the parameter named \'clientTranId\'
    getSapiV1SubAccountUniversalTransferParametersQueryClientTranId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1SubAccountUniversalTransferParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryFromEmail: Represents the parameter named \'fromEmail\'
    --
    -- Sub-account email
    getSapiV1SubAccountUniversalTransferParametersQueryFromEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- Default 500, Max 500
    getSapiV1SubAccountUniversalTransferParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- Default 1
    getSapiV1SubAccountUniversalTransferParametersQueryPage :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1SubAccountUniversalTransferParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1SubAccountUniversalTransferParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1SubAccountUniversalTransferParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1SubAccountUniversalTransferParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryToEmail: Represents the parameter named \'toEmail\'
    --
    -- Sub-account email
    getSapiV1SubAccountUniversalTransferParametersQueryToEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountUniversalTransferParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClientTranId" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryClientTranId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFromEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryFromEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryToEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryToEmail obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClientTranId" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryClientTranId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFromEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryFromEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryToEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountUniversalTransferParametersQueryToEmail obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountUniversalTransferParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountUniversalTransferParameters" (\obj -> (((((((((GHC.Base.pure GetSapiV1SubAccountUniversalTransferParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryClientTranId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFromEmail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryToEmail"))

-- | Create a new 'GetSapiV1SubAccountUniversalTransferParameters' with all required fields.
mkGetSapiV1SubAccountUniversalTransferParameters ::
  -- | 'getSapiV1SubAccountUniversalTransferParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountUniversalTransferParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1SubAccountUniversalTransferParameters
mkGetSapiV1SubAccountUniversalTransferParameters getSapiV1SubAccountUniversalTransferParametersQuerySignature getSapiV1SubAccountUniversalTransferParametersQueryTimestamp =
  GetSapiV1SubAccountUniversalTransferParameters
    { getSapiV1SubAccountUniversalTransferParametersQueryClientTranId = GHC.Maybe.Nothing,
      getSapiV1SubAccountUniversalTransferParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1SubAccountUniversalTransferParametersQueryFromEmail = GHC.Maybe.Nothing,
      getSapiV1SubAccountUniversalTransferParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1SubAccountUniversalTransferParametersQueryPage = GHC.Maybe.Nothing,
      getSapiV1SubAccountUniversalTransferParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1SubAccountUniversalTransferParametersQuerySignature = getSapiV1SubAccountUniversalTransferParametersQuerySignature,
      getSapiV1SubAccountUniversalTransferParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1SubAccountUniversalTransferParametersQueryTimestamp = getSapiV1SubAccountUniversalTransferParametersQueryTimestamp,
      getSapiV1SubAccountUniversalTransferParametersQueryToEmail = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getSapiV1SubAccountUniversalTransfer'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1SubAccountUniversalTransferResponseError' is used.
data GetSapiV1SubAccountUniversalTransferResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1SubAccountUniversalTransferResponseError GHC.Base.String
  | -- | Transfer History
    GetSapiV1SubAccountUniversalTransferResponse200 ([GetSapiV1SubAccountUniversalTransferResponseBody200])
  | -- | Bad Request
    GetSapiV1SubAccountUniversalTransferResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1SubAccountUniversalTransferResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/universalTransfer.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1SubAccountUniversalTransferResponseBody200 = GetSapiV1SubAccountUniversalTransferResponseBody200
  { -- | amount
    getSapiV1SubAccountUniversalTransferResponseBody200Amount :: Data.Text.Internal.Text,
    -- | asset
    getSapiV1SubAccountUniversalTransferResponseBody200Asset :: Data.Text.Internal.Text,
    -- | clientTranId
    getSapiV1SubAccountUniversalTransferResponseBody200ClientTranId :: Data.Text.Internal.Text,
    -- | createTimeStamp
    getSapiV1SubAccountUniversalTransferResponseBody200CreateTimeStamp :: GHC.Int.Int64,
    -- | fromAccountType
    getSapiV1SubAccountUniversalTransferResponseBody200FromAccountType :: Data.Text.Internal.Text,
    -- | fromEmail
    getSapiV1SubAccountUniversalTransferResponseBody200FromEmail :: Data.Text.Internal.Text,
    -- | status
    getSapiV1SubAccountUniversalTransferResponseBody200Status :: Data.Text.Internal.Text,
    -- | toAccountType
    getSapiV1SubAccountUniversalTransferResponseBody200ToAccountType :: Data.Text.Internal.Text,
    -- | toEmail
    getSapiV1SubAccountUniversalTransferResponseBody200ToEmail :: Data.Text.Internal.Text,
    -- | tranId
    getSapiV1SubAccountUniversalTransferResponseBody200TranId :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountUniversalTransferResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200Amount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200Asset obj] : ["clientTranId" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200ClientTranId obj] : ["createTimeStamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200CreateTimeStamp obj] : ["fromAccountType" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200FromAccountType obj] : ["fromEmail" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200FromEmail obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200Status obj] : ["toAccountType" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200ToAccountType obj] : ["toEmail" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200ToEmail obj] : ["tranId" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200TranId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200Amount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200Asset obj] : ["clientTranId" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200ClientTranId obj] : ["createTimeStamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200CreateTimeStamp obj] : ["fromAccountType" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200FromAccountType obj] : ["fromEmail" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200FromEmail obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200Status obj] : ["toAccountType" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200ToAccountType obj] : ["toEmail" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200ToEmail obj] : ["tranId" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountUniversalTransferResponseBody200TranId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountUniversalTransferResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountUniversalTransferResponseBody200" (\obj -> (((((((((GHC.Base.pure GetSapiV1SubAccountUniversalTransferResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientTranId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "createTimeStamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fromAccountType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fromEmail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "toAccountType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "toEmail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tranId"))

-- | Create a new 'GetSapiV1SubAccountUniversalTransferResponseBody200' with all required fields.
mkGetSapiV1SubAccountUniversalTransferResponseBody200 ::
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200Amount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200Asset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200ClientTranId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200CreateTimeStamp'
  GHC.Int.Int64 ->
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200FromAccountType'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200FromEmail'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200Status'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200ToAccountType'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200ToEmail'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountUniversalTransferResponseBody200TranId'
  GHC.Int.Int64 ->
  GetSapiV1SubAccountUniversalTransferResponseBody200
mkGetSapiV1SubAccountUniversalTransferResponseBody200 getSapiV1SubAccountUniversalTransferResponseBody200Amount getSapiV1SubAccountUniversalTransferResponseBody200Asset getSapiV1SubAccountUniversalTransferResponseBody200ClientTranId getSapiV1SubAccountUniversalTransferResponseBody200CreateTimeStamp getSapiV1SubAccountUniversalTransferResponseBody200FromAccountType getSapiV1SubAccountUniversalTransferResponseBody200FromEmail getSapiV1SubAccountUniversalTransferResponseBody200Status getSapiV1SubAccountUniversalTransferResponseBody200ToAccountType getSapiV1SubAccountUniversalTransferResponseBody200ToEmail getSapiV1SubAccountUniversalTransferResponseBody200TranId =
  GetSapiV1SubAccountUniversalTransferResponseBody200
    { getSapiV1SubAccountUniversalTransferResponseBody200Amount = getSapiV1SubAccountUniversalTransferResponseBody200Amount,
      getSapiV1SubAccountUniversalTransferResponseBody200Asset = getSapiV1SubAccountUniversalTransferResponseBody200Asset,
      getSapiV1SubAccountUniversalTransferResponseBody200ClientTranId = getSapiV1SubAccountUniversalTransferResponseBody200ClientTranId,
      getSapiV1SubAccountUniversalTransferResponseBody200CreateTimeStamp = getSapiV1SubAccountUniversalTransferResponseBody200CreateTimeStamp,
      getSapiV1SubAccountUniversalTransferResponseBody200FromAccountType = getSapiV1SubAccountUniversalTransferResponseBody200FromAccountType,
      getSapiV1SubAccountUniversalTransferResponseBody200FromEmail = getSapiV1SubAccountUniversalTransferResponseBody200FromEmail,
      getSapiV1SubAccountUniversalTransferResponseBody200Status = getSapiV1SubAccountUniversalTransferResponseBody200Status,
      getSapiV1SubAccountUniversalTransferResponseBody200ToAccountType = getSapiV1SubAccountUniversalTransferResponseBody200ToAccountType,
      getSapiV1SubAccountUniversalTransferResponseBody200ToEmail = getSapiV1SubAccountUniversalTransferResponseBody200ToEmail,
      getSapiV1SubAccountUniversalTransferResponseBody200TranId = getSapiV1SubAccountUniversalTransferResponseBody200TranId
    }

-- | > GET /sapi/v1/sub-account/universalTransfer
--
-- The same as 'getSapiV1SubAccountUniversalTransfer' but accepts an explicit configuration.
getSapiV1SubAccountUniversalTransferWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountUniversalTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountUniversalTransferResponse)
getSapiV1SubAccountUniversalTransferWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1SubAccountUniversalTransferResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountUniversalTransferResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1SubAccountUniversalTransferResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountUniversalTransferResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountUniversalTransferResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/universalTransfer")
          [ Binance.Common.QueryParameter (Data.Text.pack "fromEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryFromEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "toEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryToEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryClientTranId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountUniversalTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountUniversalTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/sub-account/universalTransfer
--
-- The same as 'getSapiV1SubAccountUniversalTransfer' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountUniversalTransferRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountUniversalTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountUniversalTransferRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/universalTransfer")
        [ Binance.Common.QueryParameter (Data.Text.pack "fromEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryFromEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "toEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryToEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryClientTranId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountUniversalTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountUniversalTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/sub-account/universalTransfer
--
-- The same as 'getSapiV1SubAccountUniversalTransfer' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountUniversalTransferWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountUniversalTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountUniversalTransferWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/universalTransfer")
          [ Binance.Common.QueryParameter (Data.Text.pack "fromEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryFromEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "toEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryToEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryClientTranId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountUniversalTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountUniversalTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountUniversalTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
