{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MiningPubCoinList
module Binance.Operations.GetSapiV1MiningPubCoinList where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/mining/pub/coinList
--
-- Weight(IP): 1
getSapiV1MiningPubCoinList ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPubCoinListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MiningPubCoinListResponse)
getSapiV1MiningPubCoinList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MiningPubCoinListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPubCoinListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1MiningPubCoinListResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPubCoinListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/mining/pub/coinList")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPubCoinListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubCoinListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubCoinListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/pub\/coinList.GET.parameters@ in the specification.
data GetSapiV1MiningPubCoinListParameters = GetSapiV1MiningPubCoinListParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1MiningPubCoinListParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1MiningPubCoinListParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1MiningPubCoinListParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPubCoinListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPubCoinListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPubCoinListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPubCoinListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPubCoinListParameters" (\obj -> ((GHC.Base.pure GetSapiV1MiningPubCoinListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1MiningPubCoinListParameters' with all required fields.
mkGetSapiV1MiningPubCoinListParameters ::
  -- | 'getSapiV1MiningPubCoinListParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPubCoinListParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1MiningPubCoinListParameters
mkGetSapiV1MiningPubCoinListParameters getSapiV1MiningPubCoinListParametersQuerySignature getSapiV1MiningPubCoinListParametersQueryTimestamp =
  GetSapiV1MiningPubCoinListParameters
    { getSapiV1MiningPubCoinListParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1MiningPubCoinListParametersQuerySignature = getSapiV1MiningPubCoinListParametersQuerySignature,
      getSapiV1MiningPubCoinListParametersQueryTimestamp = getSapiV1MiningPubCoinListParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1MiningPubCoinList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MiningPubCoinListResponseError' is used.
data GetSapiV1MiningPubCoinListResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MiningPubCoinListResponseError GHC.Base.String
  | -- | Coin information
    GetSapiV1MiningPubCoinListResponse200 GetSapiV1MiningPubCoinListResponseBody200
  | -- | Bad Request
    GetSapiV1MiningPubCoinListResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/pub\/coinList.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1MiningPubCoinListResponseBody200 = GetSapiV1MiningPubCoinListResponseBody200
  { -- | code
    getSapiV1MiningPubCoinListResponseBody200Code :: GHC.Int.Int64,
    -- | data
    getSapiV1MiningPubCoinListResponseBody200Data :: ([GetSapiV1MiningPubCoinListResponseBody200Data]),
    -- | msg
    getSapiV1MiningPubCoinListResponseBody200Msg :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPubCoinListResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200Data obj] : ["msg" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200Msg obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200Data obj] : ["msg" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200Msg obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPubCoinListResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPubCoinListResponseBody200" (\obj -> ((GHC.Base.pure GetSapiV1MiningPubCoinListResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "msg"))

-- | Create a new 'GetSapiV1MiningPubCoinListResponseBody200' with all required fields.
mkGetSapiV1MiningPubCoinListResponseBody200 ::
  -- | 'getSapiV1MiningPubCoinListResponseBody200Code'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPubCoinListResponseBody200Data'
  [GetSapiV1MiningPubCoinListResponseBody200Data] ->
  -- | 'getSapiV1MiningPubCoinListResponseBody200Msg'
  Data.Text.Internal.Text ->
  GetSapiV1MiningPubCoinListResponseBody200
mkGetSapiV1MiningPubCoinListResponseBody200 getSapiV1MiningPubCoinListResponseBody200Code getSapiV1MiningPubCoinListResponseBody200Data getSapiV1MiningPubCoinListResponseBody200Msg =
  GetSapiV1MiningPubCoinListResponseBody200
    { getSapiV1MiningPubCoinListResponseBody200Code = getSapiV1MiningPubCoinListResponseBody200Code,
      getSapiV1MiningPubCoinListResponseBody200Data = getSapiV1MiningPubCoinListResponseBody200Data,
      getSapiV1MiningPubCoinListResponseBody200Msg = getSapiV1MiningPubCoinListResponseBody200Msg
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/pub\/coinList.GET.responses.200.content.application\/json.schema.properties.data.items@ in the specification.
data GetSapiV1MiningPubCoinListResponseBody200Data = GetSapiV1MiningPubCoinListResponseBody200Data
  { -- | algoId
    getSapiV1MiningPubCoinListResponseBody200DataAlgoId :: GHC.Int.Int64,
    -- | algoName
    getSapiV1MiningPubCoinListResponseBody200DataAlgoName :: Data.Text.Internal.Text,
    -- | coinId
    getSapiV1MiningPubCoinListResponseBody200DataCoinId :: GHC.Int.Int64,
    -- | coinName
    getSapiV1MiningPubCoinListResponseBody200DataCoinName :: Data.Text.Internal.Text,
    -- | poolIndex
    getSapiV1MiningPubCoinListResponseBody200DataPoolIndex :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPubCoinListResponseBody200Data where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["algoId" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataAlgoId obj] : ["algoName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataAlgoName obj] : ["coinId" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataCoinId obj] : ["coinName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataCoinName obj] : ["poolIndex" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataPoolIndex obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["algoId" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataAlgoId obj] : ["algoName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataAlgoName obj] : ["coinId" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataCoinId obj] : ["coinName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataCoinName obj] : ["poolIndex" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubCoinListResponseBody200DataPoolIndex obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPubCoinListResponseBody200Data where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPubCoinListResponseBody200Data" (\obj -> ((((GHC.Base.pure GetSapiV1MiningPubCoinListResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "algoId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "algoName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "coinId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "coinName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolIndex"))

-- | Create a new 'GetSapiV1MiningPubCoinListResponseBody200Data' with all required fields.
mkGetSapiV1MiningPubCoinListResponseBody200Data ::
  -- | 'getSapiV1MiningPubCoinListResponseBody200DataAlgoId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPubCoinListResponseBody200DataAlgoName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPubCoinListResponseBody200DataCoinId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPubCoinListResponseBody200DataCoinName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPubCoinListResponseBody200DataPoolIndex'
  GHC.Int.Int64 ->
  GetSapiV1MiningPubCoinListResponseBody200Data
mkGetSapiV1MiningPubCoinListResponseBody200Data getSapiV1MiningPubCoinListResponseBody200DataAlgoId getSapiV1MiningPubCoinListResponseBody200DataAlgoName getSapiV1MiningPubCoinListResponseBody200DataCoinId getSapiV1MiningPubCoinListResponseBody200DataCoinName getSapiV1MiningPubCoinListResponseBody200DataPoolIndex =
  GetSapiV1MiningPubCoinListResponseBody200Data
    { getSapiV1MiningPubCoinListResponseBody200DataAlgoId = getSapiV1MiningPubCoinListResponseBody200DataAlgoId,
      getSapiV1MiningPubCoinListResponseBody200DataAlgoName = getSapiV1MiningPubCoinListResponseBody200DataAlgoName,
      getSapiV1MiningPubCoinListResponseBody200DataCoinId = getSapiV1MiningPubCoinListResponseBody200DataCoinId,
      getSapiV1MiningPubCoinListResponseBody200DataCoinName = getSapiV1MiningPubCoinListResponseBody200DataCoinName,
      getSapiV1MiningPubCoinListResponseBody200DataPoolIndex = getSapiV1MiningPubCoinListResponseBody200DataPoolIndex
    }

-- | > GET /sapi/v1/mining/pub/coinList
--
-- The same as 'getSapiV1MiningPubCoinList' but accepts an explicit configuration.
getSapiV1MiningPubCoinListWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPubCoinListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MiningPubCoinListResponse)
getSapiV1MiningPubCoinListWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MiningPubCoinListResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPubCoinListResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1MiningPubCoinListResponseBody200
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPubCoinListResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/mining/pub/coinList")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPubCoinListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubCoinListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubCoinListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/mining/pub/coinList
--
-- The same as 'getSapiV1MiningPubCoinList' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MiningPubCoinListRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPubCoinListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MiningPubCoinListRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/mining/pub/coinList")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPubCoinListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubCoinListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubCoinListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/mining/pub/coinList
--
-- The same as 'getSapiV1MiningPubCoinList' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MiningPubCoinListWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPubCoinListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MiningPubCoinListWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/mining/pub/coinList")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPubCoinListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubCoinListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubCoinListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
