{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1AssetGetFundingAsset
module Binance.Operations.PostSapiV1AssetGetFundingAsset where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/asset/get-funding-asset
--
-- - Currently supports querying the following business assetsï¼šBinance Pay, Binance Card, Binance Gift Card, Stock Token
--
-- Weight(IP): 1
postSapiV1AssetGetFundingAsset ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetGetFundingAssetParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1AssetGetFundingAssetResponse)
postSapiV1AssetGetFundingAsset parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1AssetGetFundingAssetResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetGetFundingAssetResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([PostSapiV1AssetGetFundingAssetResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetGetFundingAssetResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetGetFundingAssetResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/asset/get-funding-asset")
        [ Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "needBtcValuation") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetGetFundingAssetParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetGetFundingAssetParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/get-funding-asset.POST.parameters@ in the specification.
data PostSapiV1AssetGetFundingAssetParameters = PostSapiV1AssetGetFundingAssetParameters
  { -- | queryAsset: Represents the parameter named \'asset\'
    postSapiV1AssetGetFundingAssetParametersQueryAsset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryNeedBtcValuation: Represents the parameter named \'needBtcValuation\'
    postSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation :: (GHC.Maybe.Maybe PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1AssetGetFundingAssetParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1AssetGetFundingAssetParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1AssetGetFundingAssetParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetGetFundingAssetParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetGetFundingAssetParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNeedBtcValuation" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetGetFundingAssetParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetGetFundingAssetParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNeedBtcValuation" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetGetFundingAssetParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetGetFundingAssetParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetGetFundingAssetParameters" (\obj -> ((((GHC.Base.pure PostSapiV1AssetGetFundingAssetParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryNeedBtcValuation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1AssetGetFundingAssetParameters' with all required fields.
mkPostSapiV1AssetGetFundingAssetParameters ::
  -- | 'postSapiV1AssetGetFundingAssetParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetGetFundingAssetParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1AssetGetFundingAssetParameters
mkPostSapiV1AssetGetFundingAssetParameters postSapiV1AssetGetFundingAssetParametersQuerySignature postSapiV1AssetGetFundingAssetParametersQueryTimestamp =
  PostSapiV1AssetGetFundingAssetParameters
    { postSapiV1AssetGetFundingAssetParametersQueryAsset = GHC.Maybe.Nothing,
      postSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation = GHC.Maybe.Nothing,
      postSapiV1AssetGetFundingAssetParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1AssetGetFundingAssetParametersQuerySignature = postSapiV1AssetGetFundingAssetParametersQuerySignature,
      postSapiV1AssetGetFundingAssetParametersQueryTimestamp = postSapiV1AssetGetFundingAssetParametersQueryTimestamp
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/asset\/get-funding-asset.POST.parameters.properties.queryNeedBtcValuation@ in the specification.
--
-- Represents the parameter named \'needBtcValuation\'
data PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"true"@
    PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationEnumTrue
  | -- | Represents the JSON value @"false"@
    PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationEnumFalse
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation where
  toJSON (PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationOther val) = val
  toJSON (PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationEnumTrue) = "true"
  toJSON (PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationEnumFalse) = "false"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "true" -> PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationEnumTrue
            | val GHC.Classes.== "false" -> PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationEnumFalse
            | GHC.Base.otherwise -> PostSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuationOther val
      )

-- | Represents a response of the operation 'postSapiV1AssetGetFundingAsset'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1AssetGetFundingAssetResponseError' is used.
data PostSapiV1AssetGetFundingAssetResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1AssetGetFundingAssetResponseError GHC.Base.String
  | -- | Funding asset detail
    PostSapiV1AssetGetFundingAssetResponse200 ([PostSapiV1AssetGetFundingAssetResponseBody200])
  | -- | Bad Request
    PostSapiV1AssetGetFundingAssetResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1AssetGetFundingAssetResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/get-funding-asset.POST.responses.200.content.application\/json.schema.items@ in the specification.
data PostSapiV1AssetGetFundingAssetResponseBody200 = PostSapiV1AssetGetFundingAssetResponseBody200
  { -- | asset
    postSapiV1AssetGetFundingAssetResponseBody200Asset :: Data.Text.Internal.Text,
    -- | btcValuation
    postSapiV1AssetGetFundingAssetResponseBody200BtcValuation :: Data.Text.Internal.Text,
    -- | free
    postSapiV1AssetGetFundingAssetResponseBody200Free :: Data.Text.Internal.Text,
    -- | freeze
    postSapiV1AssetGetFundingAssetResponseBody200Freeze :: Data.Text.Internal.Text,
    -- | locked
    postSapiV1AssetGetFundingAssetResponseBody200Locked :: Data.Text.Internal.Text,
    -- | withdrawing
    postSapiV1AssetGetFundingAssetResponseBody200Withdrawing :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetGetFundingAssetResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Asset obj] : ["btcValuation" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200BtcValuation obj] : ["free" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Free obj] : ["freeze" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Freeze obj] : ["locked" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Locked obj] : ["withdrawing" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Withdrawing obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Asset obj] : ["btcValuation" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200BtcValuation obj] : ["free" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Free obj] : ["freeze" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Freeze obj] : ["locked" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Locked obj] : ["withdrawing" Data.Aeson.Types.ToJSON..= postSapiV1AssetGetFundingAssetResponseBody200Withdrawing obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetGetFundingAssetResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetGetFundingAssetResponseBody200" (\obj -> (((((GHC.Base.pure PostSapiV1AssetGetFundingAssetResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "btcValuation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "free")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "freeze")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "locked")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "withdrawing"))

-- | Create a new 'PostSapiV1AssetGetFundingAssetResponseBody200' with all required fields.
mkPostSapiV1AssetGetFundingAssetResponseBody200 ::
  -- | 'postSapiV1AssetGetFundingAssetResponseBody200Asset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetGetFundingAssetResponseBody200BtcValuation'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetGetFundingAssetResponseBody200Free'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetGetFundingAssetResponseBody200Freeze'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetGetFundingAssetResponseBody200Locked'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetGetFundingAssetResponseBody200Withdrawing'
  Data.Text.Internal.Text ->
  PostSapiV1AssetGetFundingAssetResponseBody200
mkPostSapiV1AssetGetFundingAssetResponseBody200 postSapiV1AssetGetFundingAssetResponseBody200Asset postSapiV1AssetGetFundingAssetResponseBody200BtcValuation postSapiV1AssetGetFundingAssetResponseBody200Free postSapiV1AssetGetFundingAssetResponseBody200Freeze postSapiV1AssetGetFundingAssetResponseBody200Locked postSapiV1AssetGetFundingAssetResponseBody200Withdrawing =
  PostSapiV1AssetGetFundingAssetResponseBody200
    { postSapiV1AssetGetFundingAssetResponseBody200Asset = postSapiV1AssetGetFundingAssetResponseBody200Asset,
      postSapiV1AssetGetFundingAssetResponseBody200BtcValuation = postSapiV1AssetGetFundingAssetResponseBody200BtcValuation,
      postSapiV1AssetGetFundingAssetResponseBody200Free = postSapiV1AssetGetFundingAssetResponseBody200Free,
      postSapiV1AssetGetFundingAssetResponseBody200Freeze = postSapiV1AssetGetFundingAssetResponseBody200Freeze,
      postSapiV1AssetGetFundingAssetResponseBody200Locked = postSapiV1AssetGetFundingAssetResponseBody200Locked,
      postSapiV1AssetGetFundingAssetResponseBody200Withdrawing = postSapiV1AssetGetFundingAssetResponseBody200Withdrawing
    }

-- | > POST /sapi/v1/asset/get-funding-asset
--
-- The same as 'postSapiV1AssetGetFundingAsset' but accepts an explicit configuration.
postSapiV1AssetGetFundingAssetWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetGetFundingAssetParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1AssetGetFundingAssetResponse)
postSapiV1AssetGetFundingAssetWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1AssetGetFundingAssetResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetGetFundingAssetResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([PostSapiV1AssetGetFundingAssetResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetGetFundingAssetResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetGetFundingAssetResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/asset/get-funding-asset")
          [ Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "needBtcValuation") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetGetFundingAssetParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetGetFundingAssetParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/asset/get-funding-asset
--
-- The same as 'postSapiV1AssetGetFundingAsset' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AssetGetFundingAssetRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetGetFundingAssetParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AssetGetFundingAssetRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/asset/get-funding-asset")
        [ Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "needBtcValuation") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetGetFundingAssetParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetGetFundingAssetParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/asset/get-funding-asset
--
-- The same as 'postSapiV1AssetGetFundingAsset' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AssetGetFundingAssetWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetGetFundingAssetParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AssetGetFundingAssetWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/asset/get-funding-asset")
          [ Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "needBtcValuation") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryNeedBtcValuation parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetGetFundingAssetParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetGetFundingAssetParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetGetFundingAssetParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
