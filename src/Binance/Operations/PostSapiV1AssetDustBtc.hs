{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1AssetDustBtc
module Binance.Operations.PostSapiV1AssetDustBtc where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/asset/dust-btc
--
-- Weight(IP): 1
postSapiV1AssetDustBtc ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetDustBtcParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1AssetDustBtcResponse)
postSapiV1AssetDustBtc parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1AssetDustBtcResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetDustBtcResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1AssetDustBtcResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetDustBtcResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetDustBtcResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/asset/dust-btc")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetDustBtcParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustBtcParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustBtcParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/dust-btc.POST.parameters@ in the specification.
data PostSapiV1AssetDustBtcParameters = PostSapiV1AssetDustBtcParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1AssetDustBtcParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1AssetDustBtcParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1AssetDustBtcParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetDustBtcParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetDustBtcParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetDustBtcParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetDustBtcParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetDustBtcParameters" (\obj -> ((GHC.Base.pure PostSapiV1AssetDustBtcParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1AssetDustBtcParameters' with all required fields.
mkPostSapiV1AssetDustBtcParameters ::
  -- | 'postSapiV1AssetDustBtcParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustBtcParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1AssetDustBtcParameters
mkPostSapiV1AssetDustBtcParameters postSapiV1AssetDustBtcParametersQuerySignature postSapiV1AssetDustBtcParametersQueryTimestamp =
  PostSapiV1AssetDustBtcParameters
    { postSapiV1AssetDustBtcParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1AssetDustBtcParametersQuerySignature = postSapiV1AssetDustBtcParametersQuerySignature,
      postSapiV1AssetDustBtcParametersQueryTimestamp = postSapiV1AssetDustBtcParametersQueryTimestamp
    }

-- | Represents a response of the operation 'postSapiV1AssetDustBtc'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1AssetDustBtcResponseError' is used.
data PostSapiV1AssetDustBtcResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1AssetDustBtcResponseError GHC.Base.String
  | -- | Account assets available to be converted to BNB
    PostSapiV1AssetDustBtcResponse200 PostSapiV1AssetDustBtcResponseBody200
  | -- | Bad Request
    PostSapiV1AssetDustBtcResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1AssetDustBtcResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/dust-btc.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1AssetDustBtcResponseBody200 = PostSapiV1AssetDustBtcResponseBody200
  { -- | details
    postSapiV1AssetDustBtcResponseBody200Details :: ([PostSapiV1AssetDustBtcResponseBody200Details]),
    -- | dribbletPercentage: Commission fee
    postSapiV1AssetDustBtcResponseBody200DribbletPercentage :: Data.Text.Internal.Text,
    -- | totalTransferBNB
    postSapiV1AssetDustBtcResponseBody200TotalTransferBNB :: Data.Text.Internal.Text,
    -- | totalTransferBtc
    postSapiV1AssetDustBtcResponseBody200TotalTransferBtc :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetDustBtcResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["details" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200Details obj] : ["dribbletPercentage" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DribbletPercentage obj] : ["totalTransferBNB" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200TotalTransferBNB obj] : ["totalTransferBtc" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200TotalTransferBtc obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["details" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200Details obj] : ["dribbletPercentage" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DribbletPercentage obj] : ["totalTransferBNB" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200TotalTransferBNB obj] : ["totalTransferBtc" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200TotalTransferBtc obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetDustBtcResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetDustBtcResponseBody200" (\obj -> (((GHC.Base.pure PostSapiV1AssetDustBtcResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dribbletPercentage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalTransferBNB")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalTransferBtc"))

-- | Create a new 'PostSapiV1AssetDustBtcResponseBody200' with all required fields.
mkPostSapiV1AssetDustBtcResponseBody200 ::
  -- | 'postSapiV1AssetDustBtcResponseBody200Details'
  [PostSapiV1AssetDustBtcResponseBody200Details] ->
  -- | 'postSapiV1AssetDustBtcResponseBody200DribbletPercentage'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustBtcResponseBody200TotalTransferBNB'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustBtcResponseBody200TotalTransferBtc'
  Data.Text.Internal.Text ->
  PostSapiV1AssetDustBtcResponseBody200
mkPostSapiV1AssetDustBtcResponseBody200 postSapiV1AssetDustBtcResponseBody200Details postSapiV1AssetDustBtcResponseBody200DribbletPercentage postSapiV1AssetDustBtcResponseBody200TotalTransferBNB postSapiV1AssetDustBtcResponseBody200TotalTransferBtc =
  PostSapiV1AssetDustBtcResponseBody200
    { postSapiV1AssetDustBtcResponseBody200Details = postSapiV1AssetDustBtcResponseBody200Details,
      postSapiV1AssetDustBtcResponseBody200DribbletPercentage = postSapiV1AssetDustBtcResponseBody200DribbletPercentage,
      postSapiV1AssetDustBtcResponseBody200TotalTransferBNB = postSapiV1AssetDustBtcResponseBody200TotalTransferBNB,
      postSapiV1AssetDustBtcResponseBody200TotalTransferBtc = postSapiV1AssetDustBtcResponseBody200TotalTransferBtc
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/dust-btc.POST.responses.200.content.application\/json.schema.properties.details.items@ in the specification.
data PostSapiV1AssetDustBtcResponseBody200Details = PostSapiV1AssetDustBtcResponseBody200Details
  { -- | amountFree: Convertible amount
    postSapiV1AssetDustBtcResponseBody200DetailsAmountFree :: Data.Text.Internal.Text,
    -- | asset
    postSapiV1AssetDustBtcResponseBody200DetailsAsset :: Data.Text.Internal.Text,
    -- | assetFullName
    postSapiV1AssetDustBtcResponseBody200DetailsAssetFullName :: Data.Text.Internal.Text,
    -- | exchange: Commission fee
    postSapiV1AssetDustBtcResponseBody200DetailsExchange :: Data.Text.Internal.Text,
    -- | toBNB: BNB amount（Not deducted commission fee
    postSapiV1AssetDustBtcResponseBody200DetailsToBNB :: Data.Text.Internal.Text,
    -- | toBNBOffExchange: BNB amount（Deducted commission fee
    postSapiV1AssetDustBtcResponseBody200DetailsToBNBOffExchange :: Data.Text.Internal.Text,
    -- | toBTC: BTC amount
    postSapiV1AssetDustBtcResponseBody200DetailsToBTC :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetDustBtcResponseBody200Details where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amountFree" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsAmountFree obj] : ["asset" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsAsset obj] : ["assetFullName" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsAssetFullName obj] : ["exchange" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsExchange obj] : ["toBNB" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsToBNB obj] : ["toBNBOffExchange" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsToBNBOffExchange obj] : ["toBTC" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsToBTC obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amountFree" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsAmountFree obj] : ["asset" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsAsset obj] : ["assetFullName" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsAssetFullName obj] : ["exchange" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsExchange obj] : ["toBNB" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsToBNB obj] : ["toBNBOffExchange" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsToBNBOffExchange obj] : ["toBTC" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustBtcResponseBody200DetailsToBTC obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetDustBtcResponseBody200Details where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetDustBtcResponseBody200Details" (\obj -> ((((((GHC.Base.pure PostSapiV1AssetDustBtcResponseBody200Details GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amountFree")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assetFullName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "toBNB")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "toBNBOffExchange")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "toBTC"))

-- | Create a new 'PostSapiV1AssetDustBtcResponseBody200Details' with all required fields.
mkPostSapiV1AssetDustBtcResponseBody200Details ::
  -- | 'postSapiV1AssetDustBtcResponseBody200DetailsAmountFree'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustBtcResponseBody200DetailsAsset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustBtcResponseBody200DetailsAssetFullName'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustBtcResponseBody200DetailsExchange'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustBtcResponseBody200DetailsToBNB'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustBtcResponseBody200DetailsToBNBOffExchange'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustBtcResponseBody200DetailsToBTC'
  Data.Text.Internal.Text ->
  PostSapiV1AssetDustBtcResponseBody200Details
mkPostSapiV1AssetDustBtcResponseBody200Details postSapiV1AssetDustBtcResponseBody200DetailsAmountFree postSapiV1AssetDustBtcResponseBody200DetailsAsset postSapiV1AssetDustBtcResponseBody200DetailsAssetFullName postSapiV1AssetDustBtcResponseBody200DetailsExchange postSapiV1AssetDustBtcResponseBody200DetailsToBNB postSapiV1AssetDustBtcResponseBody200DetailsToBNBOffExchange postSapiV1AssetDustBtcResponseBody200DetailsToBTC =
  PostSapiV1AssetDustBtcResponseBody200Details
    { postSapiV1AssetDustBtcResponseBody200DetailsAmountFree = postSapiV1AssetDustBtcResponseBody200DetailsAmountFree,
      postSapiV1AssetDustBtcResponseBody200DetailsAsset = postSapiV1AssetDustBtcResponseBody200DetailsAsset,
      postSapiV1AssetDustBtcResponseBody200DetailsAssetFullName = postSapiV1AssetDustBtcResponseBody200DetailsAssetFullName,
      postSapiV1AssetDustBtcResponseBody200DetailsExchange = postSapiV1AssetDustBtcResponseBody200DetailsExchange,
      postSapiV1AssetDustBtcResponseBody200DetailsToBNB = postSapiV1AssetDustBtcResponseBody200DetailsToBNB,
      postSapiV1AssetDustBtcResponseBody200DetailsToBNBOffExchange = postSapiV1AssetDustBtcResponseBody200DetailsToBNBOffExchange,
      postSapiV1AssetDustBtcResponseBody200DetailsToBTC = postSapiV1AssetDustBtcResponseBody200DetailsToBTC
    }

-- | > POST /sapi/v1/asset/dust-btc
--
-- The same as 'postSapiV1AssetDustBtc' but accepts an explicit configuration.
postSapiV1AssetDustBtcWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetDustBtcParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1AssetDustBtcResponse)
postSapiV1AssetDustBtcWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1AssetDustBtcResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetDustBtcResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1AssetDustBtcResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetDustBtcResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetDustBtcResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/asset/dust-btc")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetDustBtcParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustBtcParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustBtcParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/asset/dust-btc
--
-- The same as 'postSapiV1AssetDustBtc' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AssetDustBtcRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetDustBtcParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AssetDustBtcRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/asset/dust-btc")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetDustBtcParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustBtcParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustBtcParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/asset/dust-btc
--
-- The same as 'postSapiV1AssetDustBtc' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AssetDustBtcWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetDustBtcParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AssetDustBtcWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/asset/dust-btc")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetDustBtcParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustBtcParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustBtcParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
