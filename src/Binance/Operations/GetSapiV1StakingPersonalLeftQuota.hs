{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1StakingPersonalLeftQuota
module Binance.Operations.GetSapiV1StakingPersonalLeftQuota where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/staking/personalLeftQuota
--
-- Weight(IP): 1
getSapiV1StakingPersonalLeftQuota ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingPersonalLeftQuotaParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1StakingPersonalLeftQuotaResponse)
getSapiV1StakingPersonalLeftQuota parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1StakingPersonalLeftQuotaResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingPersonalLeftQuotaResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1StakingPersonalLeftQuotaResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingPersonalLeftQuotaResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingPersonalLeftQuotaResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/staking/personalLeftQuota")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPersonalLeftQuotaParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/personalLeftQuota.GET.parameters@ in the specification.
data GetSapiV1StakingPersonalLeftQuotaParameters = GetSapiV1StakingPersonalLeftQuotaParameters
  { -- | queryProduct: Represents the parameter named \'product\'
    --
    -- * \`STAKING\` - for Locked Staking
    -- * \`F_DEFI\` - for flexible DeFi Staking
    -- * \`L_DEFI\` - for locked DeFi Staking
    getSapiV1StakingPersonalLeftQuotaParametersQueryProduct :: Data.Text.Internal.Text,
    -- | queryProductId: Represents the parameter named \'productId\'
    getSapiV1StakingPersonalLeftQuotaParametersQueryProductId :: Data.Text.Internal.Text,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1StakingPersonalLeftQuotaParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1StakingPersonalLeftQuotaParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingPersonalLeftQuotaParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryProduct" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaParametersQueryProduct obj] : ["queryProductId" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaParametersQueryProductId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPersonalLeftQuotaParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryProduct" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaParametersQueryProduct obj] : ["queryProductId" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaParametersQueryProductId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPersonalLeftQuotaParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingPersonalLeftQuotaParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingPersonalLeftQuotaParameters" (\obj -> ((((GHC.Base.pure GetSapiV1StakingPersonalLeftQuotaParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryProductId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1StakingPersonalLeftQuotaParameters' with all required fields.
mkGetSapiV1StakingPersonalLeftQuotaParameters ::
  -- | 'getSapiV1StakingPersonalLeftQuotaParametersQueryProduct'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPersonalLeftQuotaParametersQueryProductId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPersonalLeftQuotaParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1StakingPersonalLeftQuotaParameters
mkGetSapiV1StakingPersonalLeftQuotaParameters getSapiV1StakingPersonalLeftQuotaParametersQueryProduct getSapiV1StakingPersonalLeftQuotaParametersQueryProductId getSapiV1StakingPersonalLeftQuotaParametersQuerySignature getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp =
  GetSapiV1StakingPersonalLeftQuotaParameters
    { getSapiV1StakingPersonalLeftQuotaParametersQueryProduct = getSapiV1StakingPersonalLeftQuotaParametersQueryProduct,
      getSapiV1StakingPersonalLeftQuotaParametersQueryProductId = getSapiV1StakingPersonalLeftQuotaParametersQueryProductId,
      getSapiV1StakingPersonalLeftQuotaParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1StakingPersonalLeftQuotaParametersQuerySignature = getSapiV1StakingPersonalLeftQuotaParametersQuerySignature,
      getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp = getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1StakingPersonalLeftQuota'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1StakingPersonalLeftQuotaResponseError' is used.
data GetSapiV1StakingPersonalLeftQuotaResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1StakingPersonalLeftQuotaResponseError GHC.Base.String
  | -- | Quota.
    GetSapiV1StakingPersonalLeftQuotaResponse200 ([GetSapiV1StakingPersonalLeftQuotaResponseBody200])
  | -- | Bad Request
    GetSapiV1StakingPersonalLeftQuotaResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1StakingPersonalLeftQuotaResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/personalLeftQuota.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1StakingPersonalLeftQuotaResponseBody200 = GetSapiV1StakingPersonalLeftQuotaResponseBody200
  { -- | leftPersonalQuota
    getSapiV1StakingPersonalLeftQuotaResponseBody200LeftPersonalQuota :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingPersonalLeftQuotaResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["leftPersonalQuota" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaResponseBody200LeftPersonalQuota obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["leftPersonalQuota" Data.Aeson.Types.ToJSON..= getSapiV1StakingPersonalLeftQuotaResponseBody200LeftPersonalQuota obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingPersonalLeftQuotaResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingPersonalLeftQuotaResponseBody200" (\obj -> GHC.Base.pure GetSapiV1StakingPersonalLeftQuotaResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "leftPersonalQuota"))

-- | Create a new 'GetSapiV1StakingPersonalLeftQuotaResponseBody200' with all required fields.
mkGetSapiV1StakingPersonalLeftQuotaResponseBody200 ::
  -- | 'getSapiV1StakingPersonalLeftQuotaResponseBody200LeftPersonalQuota'
  Data.Text.Internal.Text ->
  GetSapiV1StakingPersonalLeftQuotaResponseBody200
mkGetSapiV1StakingPersonalLeftQuotaResponseBody200 getSapiV1StakingPersonalLeftQuotaResponseBody200LeftPersonalQuota = GetSapiV1StakingPersonalLeftQuotaResponseBody200 {getSapiV1StakingPersonalLeftQuotaResponseBody200LeftPersonalQuota = getSapiV1StakingPersonalLeftQuotaResponseBody200LeftPersonalQuota}

-- | > GET /sapi/v1/staking/personalLeftQuota
--
-- The same as 'getSapiV1StakingPersonalLeftQuota' but accepts an explicit configuration.
getSapiV1StakingPersonalLeftQuotaWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingPersonalLeftQuotaParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1StakingPersonalLeftQuotaResponse)
getSapiV1StakingPersonalLeftQuotaWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1StakingPersonalLeftQuotaResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingPersonalLeftQuotaResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1StakingPersonalLeftQuotaResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingPersonalLeftQuotaResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingPersonalLeftQuotaResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/staking/personalLeftQuota")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPersonalLeftQuotaParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/staking/personalLeftQuota
--
-- The same as 'getSapiV1StakingPersonalLeftQuota' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1StakingPersonalLeftQuotaRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingPersonalLeftQuotaParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1StakingPersonalLeftQuotaRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/staking/personalLeftQuota")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPersonalLeftQuotaParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/staking/personalLeftQuota
--
-- The same as 'getSapiV1StakingPersonalLeftQuota' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1StakingPersonalLeftQuotaWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingPersonalLeftQuotaParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1StakingPersonalLeftQuotaWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/staking/personalLeftQuota")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPersonalLeftQuotaParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPersonalLeftQuotaParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
