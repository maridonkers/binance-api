{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postApiV3Order
module Binance.Operations.PostApiV3Order where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /api/v3/order
--
-- Send in a new order.
--
-- - \`LIMIT_MAKER\` are \`LIMIT\` orders that will be rejected if they would immediately match and trade as a taker.
-- - \`STOP_LOSS\` and \`TAKE_PROFIT\` will execute a \`MARKET\` order when the \`stopPrice\` is reached.
-- - Any \`LIMIT\` or \`LIMIT_MAKER\` type order can be made an iceberg order by sending an \`icebergQty\`.
-- - Any order with an \`icebergQty\` MUST have \`timeInForce\` set to \`GTC\`.
-- - \`MARKET\` orders using \`quantity\` specifies how much a user wants to buy or sell based on the market price.
-- - \`MARKET\` orders using \`quoteOrderQty\` specifies the amount the user wants to spend (when buying) or receive (when selling) of the quote asset; the correct quantity will be determined based on the market liquidity and \`quoteOrderQty\`.
-- - \`MARKET\` orders using \`quoteOrderQty\` will not break \`LOT_SIZE\` filter rules; the order will execute a quantity that will have the notional value as close as possible to \`quoteOrderQty\`.
-- - same \`newClientOrderId\` can be accepted only when the previous one is filled, otherwise the order will be rejected.
--
-- Trigger order price rules against market price for both \`MARKET\` and \`LIMIT\` versions:
--
-- - Price above market price: \`STOP_LOSS\` \`BUY\`, \`TAKE_PROFIT\` \`SELL\`
-- - Price below market price: \`STOP_LOSS\` \`SELL\`, \`TAKE_PROFIT\` \`BUY\`
--
--
-- Weight(IP): 1
postApiV3Order ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostApiV3OrderParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostApiV3OrderResponse)
postApiV3Order parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostApiV3OrderResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostApiV3OrderResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostApiV3OrderResponseBody200Variants
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostApiV3OrderResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostApiV3OrderResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/api/v3/order")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timeInForce") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryTimeInForce parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryQuantity parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteOrderQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryQuoteOrderQty parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "strategyId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStrategyId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "strategyType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStrategyType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "stopPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStopPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "trailingDelta") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryTrailingDelta parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "icebergQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryIcebergQty parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newOrderRespType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryNewOrderRespType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/order.POST.parameters@ in the specification.
data PostApiV3OrderParameters = PostApiV3OrderParameters
  { -- | queryIcebergQty: Represents the parameter named \'icebergQty\'
    --
    -- Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
    postApiV3OrderParametersQueryIcebergQty :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryNewClientOrderId: Represents the parameter named \'newClientOrderId\'
    --
    -- Used to uniquely identify this cancel. Automatically generated by default
    postApiV3OrderParametersQueryNewClientOrderId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryNewOrderRespType: Represents the parameter named \'newOrderRespType\'
    --
    -- Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
    postApiV3OrderParametersQueryNewOrderRespType :: (GHC.Maybe.Maybe PostApiV3OrderParametersQueryNewOrderRespType),
    -- | queryPrice: Represents the parameter named \'price\'
    --
    -- Order price
    postApiV3OrderParametersQueryPrice :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryQuantity: Represents the parameter named \'quantity\'
    --
    -- Order quantity
    postApiV3OrderParametersQueryQuantity :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryQuoteOrderQty: Represents the parameter named \'quoteOrderQty\'
    --
    -- Quote quantity
    postApiV3OrderParametersQueryQuoteOrderQty :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postApiV3OrderParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySide: Represents the parameter named \'side\'
    postApiV3OrderParametersQuerySide :: PostApiV3OrderParametersQuerySide,
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postApiV3OrderParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStopPrice: Represents the parameter named \'stopPrice\'
    --
    -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
    postApiV3OrderParametersQueryStopPrice :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryStrategyId: Represents the parameter named \'strategyId\'
    postApiV3OrderParametersQueryStrategyId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryStrategyType: Represents the parameter named \'strategyType\'
    --
    -- The value cannot be less than 1000000.
    postApiV3OrderParametersQueryStrategyType :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    postApiV3OrderParametersQuerySymbol :: Data.Text.Internal.Text,
    -- | queryTimeInForce: Represents the parameter named \'timeInForce\'
    --
    -- Order time in force
    postApiV3OrderParametersQueryTimeInForce :: (GHC.Maybe.Maybe PostApiV3OrderParametersQueryTimeInForce),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postApiV3OrderParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryTrailingDelta: Represents the parameter named \'trailingDelta\'
    --
    -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
    postApiV3OrderParametersQueryTrailingDelta :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryType: Represents the parameter named \'type\'
    --
    -- Order type
    postApiV3OrderParametersQueryType :: PostApiV3OrderParametersQueryType
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryIcebergQty" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryIcebergQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewClientOrderId" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryNewClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewOrderRespType" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryNewOrderRespType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPrice" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuantity" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuoteOrderQty" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryQuoteOrderQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryRecvWindow obj) : ["querySide" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQuerySide obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStopPrice" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryStopPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrategyId" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryStrategyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrategyType" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryStrategyType obj) : ["querySymbol" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQuerySymbol obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTimeInForce" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryTimeInForce obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTrailingDelta" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryTrailingDelta obj) : ["queryType" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQueryType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryIcebergQty" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryIcebergQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewClientOrderId" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryNewClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewOrderRespType" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryNewOrderRespType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPrice" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuantity" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuoteOrderQty" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryQuoteOrderQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryRecvWindow obj) : ["querySide" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQuerySide obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStopPrice" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryStopPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrategyId" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryStrategyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrategyType" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryStrategyType obj) : ["querySymbol" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQuerySymbol obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTimeInForce" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryTimeInForce obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTrailingDelta" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderParametersQueryTrailingDelta obj) : ["queryType" Data.Aeson.Types.ToJSON..= postApiV3OrderParametersQueryType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostApiV3OrderParameters" (\obj -> ((((((((((((((((GHC.Base.pure PostApiV3OrderParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryIcebergQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryNewClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryNewOrderRespType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryQuantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryQuoteOrderQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySide")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStopPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStrategyId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStrategyType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTimeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTrailingDelta")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryType"))

-- | Create a new 'PostApiV3OrderParameters' with all required fields.
mkPostApiV3OrderParameters ::
  -- | 'postApiV3OrderParametersQuerySide'
  PostApiV3OrderParametersQuerySide ->
  -- | 'postApiV3OrderParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postApiV3OrderParametersQuerySymbol'
  Data.Text.Internal.Text ->
  -- | 'postApiV3OrderParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'postApiV3OrderParametersQueryType'
  PostApiV3OrderParametersQueryType ->
  PostApiV3OrderParameters
mkPostApiV3OrderParameters postApiV3OrderParametersQuerySide postApiV3OrderParametersQuerySignature postApiV3OrderParametersQuerySymbol postApiV3OrderParametersQueryTimestamp postApiV3OrderParametersQueryType =
  PostApiV3OrderParameters
    { postApiV3OrderParametersQueryIcebergQty = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryNewClientOrderId = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryNewOrderRespType = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryPrice = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryQuantity = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryQuoteOrderQty = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postApiV3OrderParametersQuerySide = postApiV3OrderParametersQuerySide,
      postApiV3OrderParametersQuerySignature = postApiV3OrderParametersQuerySignature,
      postApiV3OrderParametersQueryStopPrice = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryStrategyId = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryStrategyType = GHC.Maybe.Nothing,
      postApiV3OrderParametersQuerySymbol = postApiV3OrderParametersQuerySymbol,
      postApiV3OrderParametersQueryTimeInForce = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryTimestamp = postApiV3OrderParametersQueryTimestamp,
      postApiV3OrderParametersQueryTrailingDelta = GHC.Maybe.Nothing,
      postApiV3OrderParametersQueryType = postApiV3OrderParametersQueryType
    }

-- | Defines the enum schema located at @paths.\/api\/v3\/order.POST.parameters.properties.queryNewOrderRespType@ in the specification.
--
-- Represents the parameter named \'newOrderRespType\'
--
-- Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
data PostApiV3OrderParametersQueryNewOrderRespType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostApiV3OrderParametersQueryNewOrderRespTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostApiV3OrderParametersQueryNewOrderRespTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"ACK"@
    PostApiV3OrderParametersQueryNewOrderRespTypeEnumACK
  | -- | Represents the JSON value @"RESULT"@
    PostApiV3OrderParametersQueryNewOrderRespTypeEnumRESULT
  | -- | Represents the JSON value @"FULL"@
    PostApiV3OrderParametersQueryNewOrderRespTypeEnumFULL
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderParametersQueryNewOrderRespType where
  toJSON (PostApiV3OrderParametersQueryNewOrderRespTypeOther val) = val
  toJSON (PostApiV3OrderParametersQueryNewOrderRespTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostApiV3OrderParametersQueryNewOrderRespTypeEnumACK) = "ACK"
  toJSON (PostApiV3OrderParametersQueryNewOrderRespTypeEnumRESULT) = "RESULT"
  toJSON (PostApiV3OrderParametersQueryNewOrderRespTypeEnumFULL) = "FULL"

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderParametersQueryNewOrderRespType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ACK" -> PostApiV3OrderParametersQueryNewOrderRespTypeEnumACK
            | val GHC.Classes.== "RESULT" -> PostApiV3OrderParametersQueryNewOrderRespTypeEnumRESULT
            | val GHC.Classes.== "FULL" -> PostApiV3OrderParametersQueryNewOrderRespTypeEnumFULL
            | GHC.Base.otherwise -> PostApiV3OrderParametersQueryNewOrderRespTypeOther val
      )

-- | Defines the enum schema located at @paths.\/api\/v3\/order.POST.parameters.properties.querySide@ in the specification.
--
-- Represents the parameter named \'side\'
data PostApiV3OrderParametersQuerySide
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostApiV3OrderParametersQuerySideOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostApiV3OrderParametersQuerySideTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"SELL"@
    PostApiV3OrderParametersQuerySideEnumSELL
  | -- | Represents the JSON value @"BUY"@
    PostApiV3OrderParametersQuerySideEnumBUY
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderParametersQuerySide where
  toJSON (PostApiV3OrderParametersQuerySideOther val) = val
  toJSON (PostApiV3OrderParametersQuerySideTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostApiV3OrderParametersQuerySideEnumSELL) = "SELL"
  toJSON (PostApiV3OrderParametersQuerySideEnumBUY) = "BUY"

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderParametersQuerySide where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "SELL" -> PostApiV3OrderParametersQuerySideEnumSELL
            | val GHC.Classes.== "BUY" -> PostApiV3OrderParametersQuerySideEnumBUY
            | GHC.Base.otherwise -> PostApiV3OrderParametersQuerySideOther val
      )

-- | Defines the enum schema located at @paths.\/api\/v3\/order.POST.parameters.properties.queryTimeInForce@ in the specification.
--
-- Represents the parameter named \'timeInForce\'
--
-- Order time in force
data PostApiV3OrderParametersQueryTimeInForce
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostApiV3OrderParametersQueryTimeInForceOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostApiV3OrderParametersQueryTimeInForceTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"GTC"@
    PostApiV3OrderParametersQueryTimeInForceEnumGTC
  | -- | Represents the JSON value @"IOC"@
    PostApiV3OrderParametersQueryTimeInForceEnumIOC
  | -- | Represents the JSON value @"FOK"@
    PostApiV3OrderParametersQueryTimeInForceEnumFOK
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderParametersQueryTimeInForce where
  toJSON (PostApiV3OrderParametersQueryTimeInForceOther val) = val
  toJSON (PostApiV3OrderParametersQueryTimeInForceTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostApiV3OrderParametersQueryTimeInForceEnumGTC) = "GTC"
  toJSON (PostApiV3OrderParametersQueryTimeInForceEnumIOC) = "IOC"
  toJSON (PostApiV3OrderParametersQueryTimeInForceEnumFOK) = "FOK"

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderParametersQueryTimeInForce where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "GTC" -> PostApiV3OrderParametersQueryTimeInForceEnumGTC
            | val GHC.Classes.== "IOC" -> PostApiV3OrderParametersQueryTimeInForceEnumIOC
            | val GHC.Classes.== "FOK" -> PostApiV3OrderParametersQueryTimeInForceEnumFOK
            | GHC.Base.otherwise -> PostApiV3OrderParametersQueryTimeInForceOther val
      )

-- | Defines the enum schema located at @paths.\/api\/v3\/order.POST.parameters.properties.queryType@ in the specification.
--
-- Represents the parameter named \'type\'
--
-- Order type
data PostApiV3OrderParametersQueryType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostApiV3OrderParametersQueryTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostApiV3OrderParametersQueryTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"LIMIT"@
    PostApiV3OrderParametersQueryTypeEnumLIMIT
  | -- | Represents the JSON value @"MARKET"@
    PostApiV3OrderParametersQueryTypeEnumMARKET
  | -- | Represents the JSON value @"STOP_LOSS"@
    PostApiV3OrderParametersQueryTypeEnumSTOPLOSS
  | -- | Represents the JSON value @"STOP_LOSS_LIMIT"@
    PostApiV3OrderParametersQueryTypeEnumSTOPLOSSLIMIT
  | -- | Represents the JSON value @"TAKE_PROFIT"@
    PostApiV3OrderParametersQueryTypeEnumTAKEPROFIT
  | -- | Represents the JSON value @"TAKE_PROFIT_LIMIT"@
    PostApiV3OrderParametersQueryTypeEnumTAKEPROFITLIMIT
  | -- | Represents the JSON value @"LIMIT_MAKER"@
    PostApiV3OrderParametersQueryTypeEnumLIMITMAKER
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderParametersQueryType where
  toJSON (PostApiV3OrderParametersQueryTypeOther val) = val
  toJSON (PostApiV3OrderParametersQueryTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostApiV3OrderParametersQueryTypeEnumLIMIT) = "LIMIT"
  toJSON (PostApiV3OrderParametersQueryTypeEnumMARKET) = "MARKET"
  toJSON (PostApiV3OrderParametersQueryTypeEnumSTOPLOSS) = "STOP_LOSS"
  toJSON (PostApiV3OrderParametersQueryTypeEnumSTOPLOSSLIMIT) = "STOP_LOSS_LIMIT"
  toJSON (PostApiV3OrderParametersQueryTypeEnumTAKEPROFIT) = "TAKE_PROFIT"
  toJSON (PostApiV3OrderParametersQueryTypeEnumTAKEPROFITLIMIT) = "TAKE_PROFIT_LIMIT"
  toJSON (PostApiV3OrderParametersQueryTypeEnumLIMITMAKER) = "LIMIT_MAKER"

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderParametersQueryType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "LIMIT" -> PostApiV3OrderParametersQueryTypeEnumLIMIT
            | val GHC.Classes.== "MARKET" -> PostApiV3OrderParametersQueryTypeEnumMARKET
            | val GHC.Classes.== "STOP_LOSS" -> PostApiV3OrderParametersQueryTypeEnumSTOPLOSS
            | val GHC.Classes.== "STOP_LOSS_LIMIT" -> PostApiV3OrderParametersQueryTypeEnumSTOPLOSSLIMIT
            | val GHC.Classes.== "TAKE_PROFIT" -> PostApiV3OrderParametersQueryTypeEnumTAKEPROFIT
            | val GHC.Classes.== "TAKE_PROFIT_LIMIT" -> PostApiV3OrderParametersQueryTypeEnumTAKEPROFITLIMIT
            | val GHC.Classes.== "LIMIT_MAKER" -> PostApiV3OrderParametersQueryTypeEnumLIMITMAKER
            | GHC.Base.otherwise -> PostApiV3OrderParametersQueryTypeOther val
      )

-- | Represents a response of the operation 'postApiV3Order'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostApiV3OrderResponseError' is used.
data PostApiV3OrderResponse
  = -- | Means either no matching case available or a parse error
    PostApiV3OrderResponseError GHC.Base.String
  | -- | Order result
    PostApiV3OrderResponse200 PostApiV3OrderResponseBody200Variants
  | -- | Bad Request
    PostApiV3OrderResponse400 Error
  | -- | Unauthorized Request
    PostApiV3OrderResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the oneOf schema located at @paths.\/api\/v3\/order.POST.responses.200.content.application\/json.schema.oneOf@ in the specification.
data PostApiV3OrderResponseBody200Variants
  = PostApiV3OrderResponseBody200Variant1 OrderResponseAck
  | PostApiV3OrderResponseBody200Variant2 OrderResponseResult
  | PostApiV3OrderResponseBody200Variant3 OrderResponseFull
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderResponseBody200Variants where
  toJSON (PostApiV3OrderResponseBody200Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostApiV3OrderResponseBody200Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostApiV3OrderResponseBody200Variant3 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderResponseBody200Variants where
  parseJSON val = case (PostApiV3OrderResponseBody200Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostApiV3OrderResponseBody200Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostApiV3OrderResponseBody200Variant3 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | > POST /api/v3/order
--
-- The same as 'postApiV3Order' but accepts an explicit configuration.
postApiV3OrderWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostApiV3OrderParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostApiV3OrderResponse)
postApiV3OrderWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostApiV3OrderResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApiV3OrderResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostApiV3OrderResponseBody200Variants
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApiV3OrderResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApiV3OrderResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/api/v3/order")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timeInForce") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryTimeInForce parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryQuantity parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteOrderQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryQuoteOrderQty parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "strategyId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStrategyId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "strategyType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStrategyType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "stopPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStopPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "trailingDelta") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryTrailingDelta parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "icebergQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryIcebergQty parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newOrderRespType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryNewOrderRespType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /api/v3/order
--
-- The same as 'postApiV3Order' but returns the raw 'Data.ByteString.Char8.ByteString'.
postApiV3OrderRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostApiV3OrderParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postApiV3OrderRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/api/v3/order")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timeInForce") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryTimeInForce parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryQuantity parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteOrderQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryQuoteOrderQty parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "strategyId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStrategyId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "strategyType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStrategyType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "stopPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStopPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "trailingDelta") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryTrailingDelta parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "icebergQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryIcebergQty parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newOrderRespType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryNewOrderRespType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /api/v3/order
--
-- The same as 'postApiV3Order' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postApiV3OrderWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostApiV3OrderParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postApiV3OrderWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/api/v3/order")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timeInForce") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryTimeInForce parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryQuantity parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteOrderQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryQuoteOrderQty parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "strategyId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStrategyId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "strategyType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStrategyType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "stopPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryStopPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "trailingDelta") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryTrailingDelta parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "icebergQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryIcebergQty parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newOrderRespType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryNewOrderRespType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
