{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postApiV3OrderTest
module Binance.Operations.PostApiV3OrderTest where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /api/v3/order/test
--
-- Test new order creation and signature\/recvWindow long.
-- Creates and validates a new order but does not send it into the matching engine.
--
-- Weight(IP): 1
postApiV3OrderTest ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostApiV3OrderTestParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostApiV3OrderTestResponse)
postApiV3OrderTest parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostApiV3OrderTestResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostApiV3OrderTestResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Data.Aeson.Types.Internal.Object
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostApiV3OrderTestResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostApiV3OrderTestResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/api/v3/order/test")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timeInForce") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryTimeInForce parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryQuantity parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteOrderQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryQuoteOrderQty parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "strategyId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStrategyId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "strategyType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStrategyType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "stopPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStopPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "trailingDelta") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryTrailingDelta parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "icebergQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryIcebergQty parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newOrderRespType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryNewOrderRespType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/order\/test.POST.parameters@ in the specification.
data PostApiV3OrderTestParameters = PostApiV3OrderTestParameters
  { -- | queryIcebergQty: Represents the parameter named \'icebergQty\'
    --
    -- Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
    postApiV3OrderTestParametersQueryIcebergQty :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryNewClientOrderId: Represents the parameter named \'newClientOrderId\'
    --
    -- Used to uniquely identify this cancel. Automatically generated by default
    postApiV3OrderTestParametersQueryNewClientOrderId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryNewOrderRespType: Represents the parameter named \'newOrderRespType\'
    --
    -- Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
    postApiV3OrderTestParametersQueryNewOrderRespType :: (GHC.Maybe.Maybe PostApiV3OrderTestParametersQueryNewOrderRespType),
    -- | queryPrice: Represents the parameter named \'price\'
    --
    -- Order price
    postApiV3OrderTestParametersQueryPrice :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryQuantity: Represents the parameter named \'quantity\'
    --
    -- Order quantity
    postApiV3OrderTestParametersQueryQuantity :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryQuoteOrderQty: Represents the parameter named \'quoteOrderQty\'
    --
    -- Quote quantity
    postApiV3OrderTestParametersQueryQuoteOrderQty :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postApiV3OrderTestParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySide: Represents the parameter named \'side\'
    postApiV3OrderTestParametersQuerySide :: PostApiV3OrderTestParametersQuerySide,
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postApiV3OrderTestParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStopPrice: Represents the parameter named \'stopPrice\'
    --
    -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
    postApiV3OrderTestParametersQueryStopPrice :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryStrategyId: Represents the parameter named \'strategyId\'
    postApiV3OrderTestParametersQueryStrategyId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryStrategyType: Represents the parameter named \'strategyType\'
    --
    -- The value cannot be less than 1000000.
    postApiV3OrderTestParametersQueryStrategyType :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    postApiV3OrderTestParametersQuerySymbol :: Data.Text.Internal.Text,
    -- | queryTimeInForce: Represents the parameter named \'timeInForce\'
    --
    -- Order time in force
    postApiV3OrderTestParametersQueryTimeInForce :: (GHC.Maybe.Maybe PostApiV3OrderTestParametersQueryTimeInForce),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postApiV3OrderTestParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryTrailingDelta: Represents the parameter named \'trailingDelta\'
    --
    -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
    postApiV3OrderTestParametersQueryTrailingDelta :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryType: Represents the parameter named \'type\'
    --
    -- Order type
    postApiV3OrderTestParametersQueryType :: PostApiV3OrderTestParametersQueryType
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderTestParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryIcebergQty" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryIcebergQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewClientOrderId" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryNewClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewOrderRespType" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryNewOrderRespType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPrice" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuantity" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuoteOrderQty" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryQuoteOrderQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryRecvWindow obj) : ["querySide" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQuerySide obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStopPrice" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryStopPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrategyId" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryStrategyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrategyType" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryStrategyType obj) : ["querySymbol" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQuerySymbol obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTimeInForce" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryTimeInForce obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTrailingDelta" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryTrailingDelta obj) : ["queryType" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQueryType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryIcebergQty" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryIcebergQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewClientOrderId" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryNewClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewOrderRespType" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryNewOrderRespType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPrice" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuantity" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuoteOrderQty" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryQuoteOrderQty obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryRecvWindow obj) : ["querySide" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQuerySide obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStopPrice" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryStopPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrategyId" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryStrategyId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStrategyType" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryStrategyType obj) : ["querySymbol" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQuerySymbol obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTimeInForce" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryTimeInForce obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTrailingDelta" Data.Aeson.Types.ToJSON..=)) (postApiV3OrderTestParametersQueryTrailingDelta obj) : ["queryType" Data.Aeson.Types.ToJSON..= postApiV3OrderTestParametersQueryType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderTestParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostApiV3OrderTestParameters" (\obj -> ((((((((((((((((GHC.Base.pure PostApiV3OrderTestParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryIcebergQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryNewClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryNewOrderRespType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryQuantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryQuoteOrderQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySide")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStopPrice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStrategyId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStrategyType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTimeInForce")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTrailingDelta")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryType"))

-- | Create a new 'PostApiV3OrderTestParameters' with all required fields.
mkPostApiV3OrderTestParameters ::
  -- | 'postApiV3OrderTestParametersQuerySide'
  PostApiV3OrderTestParametersQuerySide ->
  -- | 'postApiV3OrderTestParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postApiV3OrderTestParametersQuerySymbol'
  Data.Text.Internal.Text ->
  -- | 'postApiV3OrderTestParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'postApiV3OrderTestParametersQueryType'
  PostApiV3OrderTestParametersQueryType ->
  PostApiV3OrderTestParameters
mkPostApiV3OrderTestParameters postApiV3OrderTestParametersQuerySide postApiV3OrderTestParametersQuerySignature postApiV3OrderTestParametersQuerySymbol postApiV3OrderTestParametersQueryTimestamp postApiV3OrderTestParametersQueryType =
  PostApiV3OrderTestParameters
    { postApiV3OrderTestParametersQueryIcebergQty = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryNewClientOrderId = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryNewOrderRespType = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryPrice = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryQuantity = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryQuoteOrderQty = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQuerySide = postApiV3OrderTestParametersQuerySide,
      postApiV3OrderTestParametersQuerySignature = postApiV3OrderTestParametersQuerySignature,
      postApiV3OrderTestParametersQueryStopPrice = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryStrategyId = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryStrategyType = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQuerySymbol = postApiV3OrderTestParametersQuerySymbol,
      postApiV3OrderTestParametersQueryTimeInForce = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryTimestamp = postApiV3OrderTestParametersQueryTimestamp,
      postApiV3OrderTestParametersQueryTrailingDelta = GHC.Maybe.Nothing,
      postApiV3OrderTestParametersQueryType = postApiV3OrderTestParametersQueryType
    }

-- | Defines the enum schema located at @paths.\/api\/v3\/order\/test.POST.parameters.properties.queryNewOrderRespType@ in the specification.
--
-- Represents the parameter named \'newOrderRespType\'
--
-- Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
data PostApiV3OrderTestParametersQueryNewOrderRespType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostApiV3OrderTestParametersQueryNewOrderRespTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostApiV3OrderTestParametersQueryNewOrderRespTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"ACK"@
    PostApiV3OrderTestParametersQueryNewOrderRespTypeEnumACK
  | -- | Represents the JSON value @"RESULT"@
    PostApiV3OrderTestParametersQueryNewOrderRespTypeEnumRESULT
  | -- | Represents the JSON value @"FULL"@
    PostApiV3OrderTestParametersQueryNewOrderRespTypeEnumFULL
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderTestParametersQueryNewOrderRespType where
  toJSON (PostApiV3OrderTestParametersQueryNewOrderRespTypeOther val) = val
  toJSON (PostApiV3OrderTestParametersQueryNewOrderRespTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostApiV3OrderTestParametersQueryNewOrderRespTypeEnumACK) = "ACK"
  toJSON (PostApiV3OrderTestParametersQueryNewOrderRespTypeEnumRESULT) = "RESULT"
  toJSON (PostApiV3OrderTestParametersQueryNewOrderRespTypeEnumFULL) = "FULL"

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderTestParametersQueryNewOrderRespType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ACK" -> PostApiV3OrderTestParametersQueryNewOrderRespTypeEnumACK
            | val GHC.Classes.== "RESULT" -> PostApiV3OrderTestParametersQueryNewOrderRespTypeEnumRESULT
            | val GHC.Classes.== "FULL" -> PostApiV3OrderTestParametersQueryNewOrderRespTypeEnumFULL
            | GHC.Base.otherwise -> PostApiV3OrderTestParametersQueryNewOrderRespTypeOther val
      )

-- | Defines the enum schema located at @paths.\/api\/v3\/order\/test.POST.parameters.properties.querySide@ in the specification.
--
-- Represents the parameter named \'side\'
data PostApiV3OrderTestParametersQuerySide
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostApiV3OrderTestParametersQuerySideOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostApiV3OrderTestParametersQuerySideTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"SELL"@
    PostApiV3OrderTestParametersQuerySideEnumSELL
  | -- | Represents the JSON value @"BUY"@
    PostApiV3OrderTestParametersQuerySideEnumBUY
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderTestParametersQuerySide where
  toJSON (PostApiV3OrderTestParametersQuerySideOther val) = val
  toJSON (PostApiV3OrderTestParametersQuerySideTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostApiV3OrderTestParametersQuerySideEnumSELL) = "SELL"
  toJSON (PostApiV3OrderTestParametersQuerySideEnumBUY) = "BUY"

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderTestParametersQuerySide where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "SELL" -> PostApiV3OrderTestParametersQuerySideEnumSELL
            | val GHC.Classes.== "BUY" -> PostApiV3OrderTestParametersQuerySideEnumBUY
            | GHC.Base.otherwise -> PostApiV3OrderTestParametersQuerySideOther val
      )

-- | Defines the enum schema located at @paths.\/api\/v3\/order\/test.POST.parameters.properties.queryTimeInForce@ in the specification.
--
-- Represents the parameter named \'timeInForce\'
--
-- Order time in force
data PostApiV3OrderTestParametersQueryTimeInForce
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostApiV3OrderTestParametersQueryTimeInForceOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostApiV3OrderTestParametersQueryTimeInForceTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"GTC"@
    PostApiV3OrderTestParametersQueryTimeInForceEnumGTC
  | -- | Represents the JSON value @"IOC"@
    PostApiV3OrderTestParametersQueryTimeInForceEnumIOC
  | -- | Represents the JSON value @"FOK"@
    PostApiV3OrderTestParametersQueryTimeInForceEnumFOK
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderTestParametersQueryTimeInForce where
  toJSON (PostApiV3OrderTestParametersQueryTimeInForceOther val) = val
  toJSON (PostApiV3OrderTestParametersQueryTimeInForceTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostApiV3OrderTestParametersQueryTimeInForceEnumGTC) = "GTC"
  toJSON (PostApiV3OrderTestParametersQueryTimeInForceEnumIOC) = "IOC"
  toJSON (PostApiV3OrderTestParametersQueryTimeInForceEnumFOK) = "FOK"

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderTestParametersQueryTimeInForce where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "GTC" -> PostApiV3OrderTestParametersQueryTimeInForceEnumGTC
            | val GHC.Classes.== "IOC" -> PostApiV3OrderTestParametersQueryTimeInForceEnumIOC
            | val GHC.Classes.== "FOK" -> PostApiV3OrderTestParametersQueryTimeInForceEnumFOK
            | GHC.Base.otherwise -> PostApiV3OrderTestParametersQueryTimeInForceOther val
      )

-- | Defines the enum schema located at @paths.\/api\/v3\/order\/test.POST.parameters.properties.queryType@ in the specification.
--
-- Represents the parameter named \'type\'
--
-- Order type
data PostApiV3OrderTestParametersQueryType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostApiV3OrderTestParametersQueryTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostApiV3OrderTestParametersQueryTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"LIMIT"@
    PostApiV3OrderTestParametersQueryTypeEnumLIMIT
  | -- | Represents the JSON value @"MARKET"@
    PostApiV3OrderTestParametersQueryTypeEnumMARKET
  | -- | Represents the JSON value @"STOP_LOSS"@
    PostApiV3OrderTestParametersQueryTypeEnumSTOPLOSS
  | -- | Represents the JSON value @"STOP_LOSS_LIMIT"@
    PostApiV3OrderTestParametersQueryTypeEnumSTOPLOSSLIMIT
  | -- | Represents the JSON value @"TAKE_PROFIT"@
    PostApiV3OrderTestParametersQueryTypeEnumTAKEPROFIT
  | -- | Represents the JSON value @"TAKE_PROFIT_LIMIT"@
    PostApiV3OrderTestParametersQueryTypeEnumTAKEPROFITLIMIT
  | -- | Represents the JSON value @"LIMIT_MAKER"@
    PostApiV3OrderTestParametersQueryTypeEnumLIMITMAKER
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApiV3OrderTestParametersQueryType where
  toJSON (PostApiV3OrderTestParametersQueryTypeOther val) = val
  toJSON (PostApiV3OrderTestParametersQueryTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostApiV3OrderTestParametersQueryTypeEnumLIMIT) = "LIMIT"
  toJSON (PostApiV3OrderTestParametersQueryTypeEnumMARKET) = "MARKET"
  toJSON (PostApiV3OrderTestParametersQueryTypeEnumSTOPLOSS) = "STOP_LOSS"
  toJSON (PostApiV3OrderTestParametersQueryTypeEnumSTOPLOSSLIMIT) = "STOP_LOSS_LIMIT"
  toJSON (PostApiV3OrderTestParametersQueryTypeEnumTAKEPROFIT) = "TAKE_PROFIT"
  toJSON (PostApiV3OrderTestParametersQueryTypeEnumTAKEPROFITLIMIT) = "TAKE_PROFIT_LIMIT"
  toJSON (PostApiV3OrderTestParametersQueryTypeEnumLIMITMAKER) = "LIMIT_MAKER"

instance Data.Aeson.Types.FromJSON.FromJSON PostApiV3OrderTestParametersQueryType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "LIMIT" -> PostApiV3OrderTestParametersQueryTypeEnumLIMIT
            | val GHC.Classes.== "MARKET" -> PostApiV3OrderTestParametersQueryTypeEnumMARKET
            | val GHC.Classes.== "STOP_LOSS" -> PostApiV3OrderTestParametersQueryTypeEnumSTOPLOSS
            | val GHC.Classes.== "STOP_LOSS_LIMIT" -> PostApiV3OrderTestParametersQueryTypeEnumSTOPLOSSLIMIT
            | val GHC.Classes.== "TAKE_PROFIT" -> PostApiV3OrderTestParametersQueryTypeEnumTAKEPROFIT
            | val GHC.Classes.== "TAKE_PROFIT_LIMIT" -> PostApiV3OrderTestParametersQueryTypeEnumTAKEPROFITLIMIT
            | val GHC.Classes.== "LIMIT_MAKER" -> PostApiV3OrderTestParametersQueryTypeEnumLIMITMAKER
            | GHC.Base.otherwise -> PostApiV3OrderTestParametersQueryTypeOther val
      )

-- | Represents a response of the operation 'postApiV3OrderTest'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostApiV3OrderTestResponseError' is used.
data PostApiV3OrderTestResponse
  = -- | Means either no matching case available or a parse error
    PostApiV3OrderTestResponseError GHC.Base.String
  | -- | OK
    PostApiV3OrderTestResponse200 Data.Aeson.Types.Internal.Object
  | -- | Bad Request
    PostApiV3OrderTestResponse400 Error
  | -- | Unauthorized Request
    PostApiV3OrderTestResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | > POST /api/v3/order/test
--
-- The same as 'postApiV3OrderTest' but accepts an explicit configuration.
postApiV3OrderTestWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostApiV3OrderTestParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostApiV3OrderTestResponse)
postApiV3OrderTestWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostApiV3OrderTestResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApiV3OrderTestResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Data.Aeson.Types.Internal.Object
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApiV3OrderTestResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApiV3OrderTestResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/api/v3/order/test")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timeInForce") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryTimeInForce parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryQuantity parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteOrderQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryQuoteOrderQty parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "strategyId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStrategyId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "strategyType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStrategyType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "stopPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStopPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "trailingDelta") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryTrailingDelta parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "icebergQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryIcebergQty parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newOrderRespType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryNewOrderRespType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /api/v3/order/test
--
-- The same as 'postApiV3OrderTest' but returns the raw 'Data.ByteString.Char8.ByteString'.
postApiV3OrderTestRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostApiV3OrderTestParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postApiV3OrderTestRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/api/v3/order/test")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timeInForce") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryTimeInForce parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryQuantity parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteOrderQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryQuoteOrderQty parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "strategyId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStrategyId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "strategyType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStrategyType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "stopPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStopPrice parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "trailingDelta") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryTrailingDelta parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "icebergQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryIcebergQty parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newOrderRespType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryNewOrderRespType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /api/v3/order/test
--
-- The same as 'postApiV3OrderTest' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postApiV3OrderTestWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostApiV3OrderTestParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postApiV3OrderTestWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/api/v3/order/test")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "side") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySide parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timeInForce") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryTimeInForce parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryQuantity parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteOrderQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryQuoteOrderQty parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "price") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "strategyId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStrategyId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "strategyType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStrategyType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "stopPrice") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryStopPrice parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "trailingDelta") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryTrailingDelta parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "icebergQty") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryIcebergQty parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newOrderRespType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryNewOrderRespType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postApiV3OrderTestParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postApiV3OrderTestParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
