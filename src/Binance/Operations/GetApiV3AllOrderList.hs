{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getApiV3AllOrderList
module Binance.Operations.GetApiV3AllOrderList where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /api/v3/allOrderList
--
-- Retrieves all OCO based on provided optional parameters
--
-- Weight(IP): 10
getApiV3AllOrderList ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3AllOrderListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetApiV3AllOrderListResponse)
getApiV3AllOrderList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetApiV3AllOrderListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3AllOrderListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetApiV3AllOrderListResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3AllOrderListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3AllOrderListResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/allOrderList")
        [ Binance.Common.QueryParameter (Data.Text.pack "fromId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryFromId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3AllOrderListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3AllOrderListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/allOrderList.GET.parameters@ in the specification.
data GetApiV3AllOrderListParameters = GetApiV3AllOrderListParameters
  { -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getApiV3AllOrderListParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryFromId: Represents the parameter named \'fromId\'
    --
    -- Trade id to fetch from. Default gets most recent trades.
    getApiV3AllOrderListParametersQueryFromId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- Default 500; max 1000.
    getApiV3AllOrderListParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getApiV3AllOrderListParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getApiV3AllOrderListParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getApiV3AllOrderListParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getApiV3AllOrderListParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3AllOrderListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFromId" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryFromId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFromId" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryFromId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getApiV3AllOrderListParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3AllOrderListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3AllOrderListParameters" (\obj -> ((((((GHC.Base.pure GetApiV3AllOrderListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFromId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetApiV3AllOrderListParameters' with all required fields.
mkGetApiV3AllOrderListParameters ::
  -- | 'getApiV3AllOrderListParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getApiV3AllOrderListParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetApiV3AllOrderListParameters
mkGetApiV3AllOrderListParameters getApiV3AllOrderListParametersQuerySignature getApiV3AllOrderListParametersQueryTimestamp =
  GetApiV3AllOrderListParameters
    { getApiV3AllOrderListParametersQueryEndTime = GHC.Maybe.Nothing,
      getApiV3AllOrderListParametersQueryFromId = GHC.Maybe.Nothing,
      getApiV3AllOrderListParametersQueryLimit = GHC.Maybe.Nothing,
      getApiV3AllOrderListParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getApiV3AllOrderListParametersQuerySignature = getApiV3AllOrderListParametersQuerySignature,
      getApiV3AllOrderListParametersQueryStartTime = GHC.Maybe.Nothing,
      getApiV3AllOrderListParametersQueryTimestamp = getApiV3AllOrderListParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getApiV3AllOrderList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApiV3AllOrderListResponseError' is used.
data GetApiV3AllOrderListResponse
  = -- | Means either no matching case available or a parse error
    GetApiV3AllOrderListResponseError GHC.Base.String
  | -- | List of OCO orders
    GetApiV3AllOrderListResponse200 ([GetApiV3AllOrderListResponseBody200])
  | -- | Bad Request
    GetApiV3AllOrderListResponse400 Error
  | -- | Unauthorized Request
    GetApiV3AllOrderListResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/api\/v3\/allOrderList.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetApiV3AllOrderListResponseBody200 = GetApiV3AllOrderListResponseBody200
  { -- | contingencyType
    getApiV3AllOrderListResponseBody200ContingencyType :: Data.Text.Internal.Text,
    -- | isIsolated
    getApiV3AllOrderListResponseBody200IsIsolated :: GHC.Types.Bool,
    -- | listClientOrderId
    getApiV3AllOrderListResponseBody200ListClientOrderId :: Data.Text.Internal.Text,
    -- | listOrderStatus
    getApiV3AllOrderListResponseBody200ListOrderStatus :: Data.Text.Internal.Text,
    -- | listStatusType
    getApiV3AllOrderListResponseBody200ListStatusType :: Data.Text.Internal.Text,
    -- | orderListId
    getApiV3AllOrderListResponseBody200OrderListId :: GHC.Int.Int64,
    -- | orders
    getApiV3AllOrderListResponseBody200Orders :: ([GetApiV3AllOrderListResponseBody200Orders]),
    -- | symbol
    getApiV3AllOrderListResponseBody200Symbol :: Data.Text.Internal.Text,
    -- | transactionTime
    getApiV3AllOrderListResponseBody200TransactionTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3AllOrderListResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["contingencyType" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200ContingencyType obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200IsIsolated obj] : ["listClientOrderId" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200ListClientOrderId obj] : ["listOrderStatus" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200ListOrderStatus obj] : ["listStatusType" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200ListStatusType obj] : ["orderListId" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200OrderListId obj] : ["orders" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200Orders obj] : ["symbol" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200Symbol obj] : ["transactionTime" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200TransactionTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["contingencyType" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200ContingencyType obj] : ["isIsolated" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200IsIsolated obj] : ["listClientOrderId" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200ListClientOrderId obj] : ["listOrderStatus" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200ListOrderStatus obj] : ["listStatusType" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200ListStatusType obj] : ["orderListId" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200OrderListId obj] : ["orders" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200Orders obj] : ["symbol" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200Symbol obj] : ["transactionTime" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200TransactionTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3AllOrderListResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3AllOrderListResponseBody200" (\obj -> ((((((((GHC.Base.pure GetApiV3AllOrderListResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "contingencyType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isIsolated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listOrderStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listStatusType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orders")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactionTime"))

-- | Create a new 'GetApiV3AllOrderListResponseBody200' with all required fields.
mkGetApiV3AllOrderListResponseBody200 ::
  -- | 'getApiV3AllOrderListResponseBody200ContingencyType'
  Data.Text.Internal.Text ->
  -- | 'getApiV3AllOrderListResponseBody200IsIsolated'
  GHC.Types.Bool ->
  -- | 'getApiV3AllOrderListResponseBody200ListClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'getApiV3AllOrderListResponseBody200ListOrderStatus'
  Data.Text.Internal.Text ->
  -- | 'getApiV3AllOrderListResponseBody200ListStatusType'
  Data.Text.Internal.Text ->
  -- | 'getApiV3AllOrderListResponseBody200OrderListId'
  GHC.Int.Int64 ->
  -- | 'getApiV3AllOrderListResponseBody200Orders'
  [GetApiV3AllOrderListResponseBody200Orders] ->
  -- | 'getApiV3AllOrderListResponseBody200Symbol'
  Data.Text.Internal.Text ->
  -- | 'getApiV3AllOrderListResponseBody200TransactionTime'
  GHC.Int.Int64 ->
  GetApiV3AllOrderListResponseBody200
mkGetApiV3AllOrderListResponseBody200 getApiV3AllOrderListResponseBody200ContingencyType getApiV3AllOrderListResponseBody200IsIsolated getApiV3AllOrderListResponseBody200ListClientOrderId getApiV3AllOrderListResponseBody200ListOrderStatus getApiV3AllOrderListResponseBody200ListStatusType getApiV3AllOrderListResponseBody200OrderListId getApiV3AllOrderListResponseBody200Orders getApiV3AllOrderListResponseBody200Symbol getApiV3AllOrderListResponseBody200TransactionTime =
  GetApiV3AllOrderListResponseBody200
    { getApiV3AllOrderListResponseBody200ContingencyType = getApiV3AllOrderListResponseBody200ContingencyType,
      getApiV3AllOrderListResponseBody200IsIsolated = getApiV3AllOrderListResponseBody200IsIsolated,
      getApiV3AllOrderListResponseBody200ListClientOrderId = getApiV3AllOrderListResponseBody200ListClientOrderId,
      getApiV3AllOrderListResponseBody200ListOrderStatus = getApiV3AllOrderListResponseBody200ListOrderStatus,
      getApiV3AllOrderListResponseBody200ListStatusType = getApiV3AllOrderListResponseBody200ListStatusType,
      getApiV3AllOrderListResponseBody200OrderListId = getApiV3AllOrderListResponseBody200OrderListId,
      getApiV3AllOrderListResponseBody200Orders = getApiV3AllOrderListResponseBody200Orders,
      getApiV3AllOrderListResponseBody200Symbol = getApiV3AllOrderListResponseBody200Symbol,
      getApiV3AllOrderListResponseBody200TransactionTime = getApiV3AllOrderListResponseBody200TransactionTime
    }

-- | Defines the object schema located at @paths.\/api\/v3\/allOrderList.GET.responses.200.content.application\/json.schema.items.properties.orders.items@ in the specification.
data GetApiV3AllOrderListResponseBody200Orders = GetApiV3AllOrderListResponseBody200Orders
  { -- | clientOrderId
    getApiV3AllOrderListResponseBody200OrdersClientOrderId :: Data.Text.Internal.Text,
    -- | orderId
    getApiV3AllOrderListResponseBody200OrdersOrderId :: GHC.Int.Int64,
    -- | symbol
    getApiV3AllOrderListResponseBody200OrdersSymbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3AllOrderListResponseBody200Orders where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200OrdersClientOrderId obj] : ["orderId" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200OrdersOrderId obj] : ["symbol" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200OrdersSymbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientOrderId" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200OrdersClientOrderId obj] : ["orderId" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200OrdersOrderId obj] : ["symbol" Data.Aeson.Types.ToJSON..= getApiV3AllOrderListResponseBody200OrdersSymbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3AllOrderListResponseBody200Orders where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3AllOrderListResponseBody200Orders" (\obj -> ((GHC.Base.pure GetApiV3AllOrderListResponseBody200Orders GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'GetApiV3AllOrderListResponseBody200Orders' with all required fields.
mkGetApiV3AllOrderListResponseBody200Orders ::
  -- | 'getApiV3AllOrderListResponseBody200OrdersClientOrderId'
  Data.Text.Internal.Text ->
  -- | 'getApiV3AllOrderListResponseBody200OrdersOrderId'
  GHC.Int.Int64 ->
  -- | 'getApiV3AllOrderListResponseBody200OrdersSymbol'
  Data.Text.Internal.Text ->
  GetApiV3AllOrderListResponseBody200Orders
mkGetApiV3AllOrderListResponseBody200Orders getApiV3AllOrderListResponseBody200OrdersClientOrderId getApiV3AllOrderListResponseBody200OrdersOrderId getApiV3AllOrderListResponseBody200OrdersSymbol =
  GetApiV3AllOrderListResponseBody200Orders
    { getApiV3AllOrderListResponseBody200OrdersClientOrderId = getApiV3AllOrderListResponseBody200OrdersClientOrderId,
      getApiV3AllOrderListResponseBody200OrdersOrderId = getApiV3AllOrderListResponseBody200OrdersOrderId,
      getApiV3AllOrderListResponseBody200OrdersSymbol = getApiV3AllOrderListResponseBody200OrdersSymbol
    }

-- | > GET /api/v3/allOrderList
--
-- The same as 'getApiV3AllOrderList' but accepts an explicit configuration.
getApiV3AllOrderListWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3AllOrderListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetApiV3AllOrderListResponse)
getApiV3AllOrderListWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetApiV3AllOrderListResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3AllOrderListResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetApiV3AllOrderListResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3AllOrderListResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3AllOrderListResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/allOrderList")
          [ Binance.Common.QueryParameter (Data.Text.pack "fromId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryFromId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3AllOrderListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3AllOrderListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /api/v3/allOrderList
--
-- The same as 'getApiV3AllOrderList' but returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3AllOrderListRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3AllOrderListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3AllOrderListRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/allOrderList")
        [ Binance.Common.QueryParameter (Data.Text.pack "fromId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryFromId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3AllOrderListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3AllOrderListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /api/v3/allOrderList
--
-- The same as 'getApiV3AllOrderList' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3AllOrderListWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3AllOrderListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3AllOrderListWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/allOrderList")
          [ Binance.Common.QueryParameter (Data.Text.pack "fromId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryFromId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3AllOrderListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3AllOrderListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3AllOrderListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
