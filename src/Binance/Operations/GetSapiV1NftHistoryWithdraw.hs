{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1NftHistoryWithdraw
module Binance.Operations.GetSapiV1NftHistoryWithdraw where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/nft/history/withdraw
--
-- - The max interval between startTime and endTime is 90 days.
-- - If startTime and endTime are not sent, the recent 7 days\' data will be returned.
--
-- Weight(UID): 3000
getSapiV1NftHistoryWithdraw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1NftHistoryWithdrawParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1NftHistoryWithdrawResponse)
getSapiV1NftHistoryWithdraw parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1NftHistoryWithdrawResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1NftHistoryWithdrawResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1NftHistoryWithdrawResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1NftHistoryWithdrawResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1NftHistoryWithdrawResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/nft/history/withdraw")
        [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryWithdrawParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryWithdrawParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/nft\/history\/withdraw.GET.parameters@ in the specification.
data GetSapiV1NftHistoryWithdrawParameters = GetSapiV1NftHistoryWithdrawParameters
  { -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1NftHistoryWithdrawParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- Default 50, Max 50
    getSapiV1NftHistoryWithdrawParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- Default 1
    getSapiV1NftHistoryWithdrawParametersQueryPage :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1NftHistoryWithdrawParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1NftHistoryWithdrawParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1NftHistoryWithdrawParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1NftHistoryWithdrawParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1NftHistoryWithdrawParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryWithdrawParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1NftHistoryWithdrawParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1NftHistoryWithdrawParameters" (\obj -> ((((((GHC.Base.pure GetSapiV1NftHistoryWithdrawParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1NftHistoryWithdrawParameters' with all required fields.
mkGetSapiV1NftHistoryWithdrawParameters ::
  -- | 'getSapiV1NftHistoryWithdrawParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryWithdrawParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1NftHistoryWithdrawParameters
mkGetSapiV1NftHistoryWithdrawParameters getSapiV1NftHistoryWithdrawParametersQuerySignature getSapiV1NftHistoryWithdrawParametersQueryTimestamp =
  GetSapiV1NftHistoryWithdrawParameters
    { getSapiV1NftHistoryWithdrawParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1NftHistoryWithdrawParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1NftHistoryWithdrawParametersQueryPage = GHC.Maybe.Nothing,
      getSapiV1NftHistoryWithdrawParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1NftHistoryWithdrawParametersQuerySignature = getSapiV1NftHistoryWithdrawParametersQuerySignature,
      getSapiV1NftHistoryWithdrawParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1NftHistoryWithdrawParametersQueryTimestamp = getSapiV1NftHistoryWithdrawParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1NftHistoryWithdraw'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1NftHistoryWithdrawResponseError' is used.
data GetSapiV1NftHistoryWithdrawResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1NftHistoryWithdrawResponseError GHC.Base.String
  | -- | NFT Withdraw History
    GetSapiV1NftHistoryWithdrawResponse200 GetSapiV1NftHistoryWithdrawResponseBody200
  | -- | Bad Request
    GetSapiV1NftHistoryWithdrawResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1NftHistoryWithdrawResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/nft\/history\/withdraw.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1NftHistoryWithdrawResponseBody200 = GetSapiV1NftHistoryWithdrawResponseBody200
  { -- | list
    getSapiV1NftHistoryWithdrawResponseBody200List :: ([GetSapiV1NftHistoryWithdrawResponseBody200List]),
    -- | total
    getSapiV1NftHistoryWithdrawResponseBody200Total :: GHC.Int.Int32
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1NftHistoryWithdrawResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["list" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200List obj] : ["total" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200Total obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["list" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200List obj] : ["total" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200Total obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1NftHistoryWithdrawResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1NftHistoryWithdrawResponseBody200" (\obj -> (GHC.Base.pure GetSapiV1NftHistoryWithdrawResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "list")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))

-- | Create a new 'GetSapiV1NftHistoryWithdrawResponseBody200' with all required fields.
mkGetSapiV1NftHistoryWithdrawResponseBody200 ::
  -- | 'getSapiV1NftHistoryWithdrawResponseBody200List'
  [GetSapiV1NftHistoryWithdrawResponseBody200List] ->
  -- | 'getSapiV1NftHistoryWithdrawResponseBody200Total'
  GHC.Int.Int32 ->
  GetSapiV1NftHistoryWithdrawResponseBody200
mkGetSapiV1NftHistoryWithdrawResponseBody200 getSapiV1NftHistoryWithdrawResponseBody200List getSapiV1NftHistoryWithdrawResponseBody200Total =
  GetSapiV1NftHistoryWithdrawResponseBody200
    { getSapiV1NftHistoryWithdrawResponseBody200List = getSapiV1NftHistoryWithdrawResponseBody200List,
      getSapiV1NftHistoryWithdrawResponseBody200Total = getSapiV1NftHistoryWithdrawResponseBody200Total
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/nft\/history\/withdraw.GET.responses.200.content.application\/json.schema.properties.list.items@ in the specification.
data GetSapiV1NftHistoryWithdrawResponseBody200List = GetSapiV1NftHistoryWithdrawResponseBody200List
  { -- | contractAdrress
    getSapiV1NftHistoryWithdrawResponseBody200ListContractAdrress :: Data.Text.Internal.Text,
    -- | fee
    getSapiV1NftHistoryWithdrawResponseBody200ListFee :: GHC.Types.Double,
    -- | feeAsset
    getSapiV1NftHistoryWithdrawResponseBody200ListFeeAsset :: Data.Text.Internal.Text,
    -- | network
    getSapiV1NftHistoryWithdrawResponseBody200ListNetwork :: Data.Text.Internal.Text,
    -- | timestamp
    getSapiV1NftHistoryWithdrawResponseBody200ListTimestamp :: GHC.Int.Int64,
    -- | tokenId
    getSapiV1NftHistoryWithdrawResponseBody200ListTokenId :: Data.Text.Internal.Text,
    -- | txID
    getSapiV1NftHistoryWithdrawResponseBody200ListTxID :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1NftHistoryWithdrawResponseBody200List where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["contractAdrress" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListContractAdrress obj] : ["fee" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListFee obj] : ["feeAsset" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListFeeAsset obj] : ["network" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListNetwork obj] : ["timestamp" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListTimestamp obj] : ["tokenId" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListTokenId obj] : ["txID" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListTxID obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["contractAdrress" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListContractAdrress obj] : ["fee" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListFee obj] : ["feeAsset" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListFeeAsset obj] : ["network" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListNetwork obj] : ["timestamp" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListTimestamp obj] : ["tokenId" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListTokenId obj] : ["txID" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryWithdrawResponseBody200ListTxID obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1NftHistoryWithdrawResponseBody200List where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1NftHistoryWithdrawResponseBody200List" (\obj -> ((((((GHC.Base.pure GetSapiV1NftHistoryWithdrawResponseBody200List GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "contractAdrress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "feeAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokenId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "txID"))

-- | Create a new 'GetSapiV1NftHistoryWithdrawResponseBody200List' with all required fields.
mkGetSapiV1NftHistoryWithdrawResponseBody200List ::
  -- | 'getSapiV1NftHistoryWithdrawResponseBody200ListContractAdrress'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryWithdrawResponseBody200ListFee'
  GHC.Types.Double ->
  -- | 'getSapiV1NftHistoryWithdrawResponseBody200ListFeeAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryWithdrawResponseBody200ListNetwork'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryWithdrawResponseBody200ListTimestamp'
  GHC.Int.Int64 ->
  -- | 'getSapiV1NftHistoryWithdrawResponseBody200ListTokenId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryWithdrawResponseBody200ListTxID'
  Data.Text.Internal.Text ->
  GetSapiV1NftHistoryWithdrawResponseBody200List
mkGetSapiV1NftHistoryWithdrawResponseBody200List getSapiV1NftHistoryWithdrawResponseBody200ListContractAdrress getSapiV1NftHistoryWithdrawResponseBody200ListFee getSapiV1NftHistoryWithdrawResponseBody200ListFeeAsset getSapiV1NftHistoryWithdrawResponseBody200ListNetwork getSapiV1NftHistoryWithdrawResponseBody200ListTimestamp getSapiV1NftHistoryWithdrawResponseBody200ListTokenId getSapiV1NftHistoryWithdrawResponseBody200ListTxID =
  GetSapiV1NftHistoryWithdrawResponseBody200List
    { getSapiV1NftHistoryWithdrawResponseBody200ListContractAdrress = getSapiV1NftHistoryWithdrawResponseBody200ListContractAdrress,
      getSapiV1NftHistoryWithdrawResponseBody200ListFee = getSapiV1NftHistoryWithdrawResponseBody200ListFee,
      getSapiV1NftHistoryWithdrawResponseBody200ListFeeAsset = getSapiV1NftHistoryWithdrawResponseBody200ListFeeAsset,
      getSapiV1NftHistoryWithdrawResponseBody200ListNetwork = getSapiV1NftHistoryWithdrawResponseBody200ListNetwork,
      getSapiV1NftHistoryWithdrawResponseBody200ListTimestamp = getSapiV1NftHistoryWithdrawResponseBody200ListTimestamp,
      getSapiV1NftHistoryWithdrawResponseBody200ListTokenId = getSapiV1NftHistoryWithdrawResponseBody200ListTokenId,
      getSapiV1NftHistoryWithdrawResponseBody200ListTxID = getSapiV1NftHistoryWithdrawResponseBody200ListTxID
    }

-- | > GET /sapi/v1/nft/history/withdraw
--
-- The same as 'getSapiV1NftHistoryWithdraw' but accepts an explicit configuration.
getSapiV1NftHistoryWithdrawWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1NftHistoryWithdrawParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1NftHistoryWithdrawResponse)
getSapiV1NftHistoryWithdrawWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1NftHistoryWithdrawResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1NftHistoryWithdrawResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1NftHistoryWithdrawResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1NftHistoryWithdrawResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1NftHistoryWithdrawResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/nft/history/withdraw")
          [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryWithdrawParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryWithdrawParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/nft/history/withdraw
--
-- The same as 'getSapiV1NftHistoryWithdraw' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1NftHistoryWithdrawRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1NftHistoryWithdrawParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1NftHistoryWithdrawRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/nft/history/withdraw")
        [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryWithdrawParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryWithdrawParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/nft/history/withdraw
--
-- The same as 'getSapiV1NftHistoryWithdraw' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1NftHistoryWithdrawWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1NftHistoryWithdrawParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1NftHistoryWithdrawWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/nft/history/withdraw")
          [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryWithdrawParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryWithdrawParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryWithdrawParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
