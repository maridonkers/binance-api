{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1StakingStakingRecord
module Binance.Operations.GetSapiV1StakingStakingRecord where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/staking/stakingRecord
--
-- Weight(IP): 1
getSapiV1StakingStakingRecord ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingStakingRecordParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1StakingStakingRecordResponse)
getSapiV1StakingStakingRecord parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1StakingStakingRecordResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingStakingRecordResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1StakingStakingRecordResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingStakingRecordResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingStakingRecordResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/staking/stakingRecord")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "txnType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryTxnType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/stakingRecord.GET.parameters@ in the specification.
data GetSapiV1StakingStakingRecordParameters = GetSapiV1StakingStakingRecordParameters
  { -- | queryAsset: Represents the parameter named \'asset\'
    getSapiV1StakingStakingRecordParametersQueryAsset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryCurrent: Represents the parameter named \'current\'
    --
    -- Current querying page. Start from 1. Default:1
    getSapiV1StakingStakingRecordParametersQueryCurrent :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1StakingStakingRecordParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryProduct: Represents the parameter named \'product\'
    --
    -- * \`STAKING\` - for Locked Staking
    -- * \`F_DEFI\` - for flexible DeFi Staking
    -- * \`L_DEFI\` - for locked DeFi Staking
    getSapiV1StakingStakingRecordParametersQueryProduct :: Data.Text.Internal.Text,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1StakingStakingRecordParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1StakingStakingRecordParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySize: Represents the parameter named \'size\'
    --
    -- Default:10 Max:100
    getSapiV1StakingStakingRecordParametersQuerySize :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1StakingStakingRecordParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1StakingStakingRecordParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryTxnType: Represents the parameter named \'txnType\'
    --
    -- \`SUBSCRIPTION\`, \`REDEMPTION\`, \`INTEREST\`
    getSapiV1StakingStakingRecordParametersQueryTxnType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingStakingRecordParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCurrent" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryCurrent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryEndTime obj) : ["queryProduct" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordParametersQueryProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySize" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQuerySize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordParametersQueryTimestamp obj] : ["queryTxnType" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordParametersQueryTxnType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCurrent" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryCurrent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryEndTime obj) : ["queryProduct" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordParametersQueryProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySize" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQuerySize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingStakingRecordParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordParametersQueryTimestamp obj] : ["queryTxnType" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordParametersQueryTxnType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingStakingRecordParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingStakingRecordParameters" (\obj -> (((((((((GHC.Base.pure GetSapiV1StakingStakingRecordParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCurrent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTxnType"))

-- | Create a new 'GetSapiV1StakingStakingRecordParameters' with all required fields.
mkGetSapiV1StakingStakingRecordParameters ::
  -- | 'getSapiV1StakingStakingRecordParametersQueryProduct'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingStakingRecordParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingStakingRecordParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'getSapiV1StakingStakingRecordParametersQueryTxnType'
  Data.Text.Internal.Text ->
  GetSapiV1StakingStakingRecordParameters
mkGetSapiV1StakingStakingRecordParameters getSapiV1StakingStakingRecordParametersQueryProduct getSapiV1StakingStakingRecordParametersQuerySignature getSapiV1StakingStakingRecordParametersQueryTimestamp getSapiV1StakingStakingRecordParametersQueryTxnType =
  GetSapiV1StakingStakingRecordParameters
    { getSapiV1StakingStakingRecordParametersQueryAsset = GHC.Maybe.Nothing,
      getSapiV1StakingStakingRecordParametersQueryCurrent = GHC.Maybe.Nothing,
      getSapiV1StakingStakingRecordParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1StakingStakingRecordParametersQueryProduct = getSapiV1StakingStakingRecordParametersQueryProduct,
      getSapiV1StakingStakingRecordParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1StakingStakingRecordParametersQuerySignature = getSapiV1StakingStakingRecordParametersQuerySignature,
      getSapiV1StakingStakingRecordParametersQuerySize = GHC.Maybe.Nothing,
      getSapiV1StakingStakingRecordParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1StakingStakingRecordParametersQueryTimestamp = getSapiV1StakingStakingRecordParametersQueryTimestamp,
      getSapiV1StakingStakingRecordParametersQueryTxnType = getSapiV1StakingStakingRecordParametersQueryTxnType
    }

-- | Represents a response of the operation 'getSapiV1StakingStakingRecord'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1StakingStakingRecordResponseError' is used.
data GetSapiV1StakingStakingRecordResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1StakingStakingRecordResponseError GHC.Base.String
  | -- | Staking History.
    GetSapiV1StakingStakingRecordResponse200 ([GetSapiV1StakingStakingRecordResponseBody200])
  | -- | Bad Request
    GetSapiV1StakingStakingRecordResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1StakingStakingRecordResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/stakingRecord.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1StakingStakingRecordResponseBody200 = GetSapiV1StakingStakingRecordResponseBody200
  { -- | amount
    getSapiV1StakingStakingRecordResponseBody200Amount :: Data.Text.Internal.Text,
    -- | asset
    getSapiV1StakingStakingRecordResponseBody200Asset :: Data.Text.Internal.Text,
    -- | deliverDate
    getSapiV1StakingStakingRecordResponseBody200DeliverDate :: Data.Text.Internal.Text,
    -- | lockPeriod
    getSapiV1StakingStakingRecordResponseBody200LockPeriod :: Data.Text.Internal.Text,
    -- | positionId
    getSapiV1StakingStakingRecordResponseBody200PositionId :: Data.Text.Internal.Text,
    -- | project
    getSapiV1StakingStakingRecordResponseBody200Project :: Data.Text.Internal.Text,
    -- | status
    getSapiV1StakingStakingRecordResponseBody200Status :: Data.Text.Internal.Text,
    -- | time
    getSapiV1StakingStakingRecordResponseBody200Time :: GHC.Int.Int64,
    -- | type
    getSapiV1StakingStakingRecordResponseBody200Type :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingStakingRecordResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Amount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Asset obj] : ["deliverDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200DeliverDate obj] : ["lockPeriod" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200LockPeriod obj] : ["positionId" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200PositionId obj] : ["project" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Project obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Status obj] : ["time" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Time obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Type obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Amount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Asset obj] : ["deliverDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200DeliverDate obj] : ["lockPeriod" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200LockPeriod obj] : ["positionId" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200PositionId obj] : ["project" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Project obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Status obj] : ["time" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Time obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1StakingStakingRecordResponseBody200Type obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingStakingRecordResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingStakingRecordResponseBody200" (\obj -> ((((((((GHC.Base.pure GetSapiV1StakingStakingRecordResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deliverDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lockPeriod")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "positionId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "project")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'GetSapiV1StakingStakingRecordResponseBody200' with all required fields.
mkGetSapiV1StakingStakingRecordResponseBody200 ::
  -- | 'getSapiV1StakingStakingRecordResponseBody200Amount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingStakingRecordResponseBody200Asset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingStakingRecordResponseBody200DeliverDate'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingStakingRecordResponseBody200LockPeriod'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingStakingRecordResponseBody200PositionId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingStakingRecordResponseBody200Project'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingStakingRecordResponseBody200Status'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingStakingRecordResponseBody200Time'
  GHC.Int.Int64 ->
  -- | 'getSapiV1StakingStakingRecordResponseBody200Type'
  Data.Text.Internal.Text ->
  GetSapiV1StakingStakingRecordResponseBody200
mkGetSapiV1StakingStakingRecordResponseBody200 getSapiV1StakingStakingRecordResponseBody200Amount getSapiV1StakingStakingRecordResponseBody200Asset getSapiV1StakingStakingRecordResponseBody200DeliverDate getSapiV1StakingStakingRecordResponseBody200LockPeriod getSapiV1StakingStakingRecordResponseBody200PositionId getSapiV1StakingStakingRecordResponseBody200Project getSapiV1StakingStakingRecordResponseBody200Status getSapiV1StakingStakingRecordResponseBody200Time getSapiV1StakingStakingRecordResponseBody200Type =
  GetSapiV1StakingStakingRecordResponseBody200
    { getSapiV1StakingStakingRecordResponseBody200Amount = getSapiV1StakingStakingRecordResponseBody200Amount,
      getSapiV1StakingStakingRecordResponseBody200Asset = getSapiV1StakingStakingRecordResponseBody200Asset,
      getSapiV1StakingStakingRecordResponseBody200DeliverDate = getSapiV1StakingStakingRecordResponseBody200DeliverDate,
      getSapiV1StakingStakingRecordResponseBody200LockPeriod = getSapiV1StakingStakingRecordResponseBody200LockPeriod,
      getSapiV1StakingStakingRecordResponseBody200PositionId = getSapiV1StakingStakingRecordResponseBody200PositionId,
      getSapiV1StakingStakingRecordResponseBody200Project = getSapiV1StakingStakingRecordResponseBody200Project,
      getSapiV1StakingStakingRecordResponseBody200Status = getSapiV1StakingStakingRecordResponseBody200Status,
      getSapiV1StakingStakingRecordResponseBody200Time = getSapiV1StakingStakingRecordResponseBody200Time,
      getSapiV1StakingStakingRecordResponseBody200Type = getSapiV1StakingStakingRecordResponseBody200Type
    }

-- | > GET /sapi/v1/staking/stakingRecord
--
-- The same as 'getSapiV1StakingStakingRecord' but accepts an explicit configuration.
getSapiV1StakingStakingRecordWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingStakingRecordParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1StakingStakingRecordResponse)
getSapiV1StakingStakingRecordWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1StakingStakingRecordResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingStakingRecordResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1StakingStakingRecordResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingStakingRecordResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingStakingRecordResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/staking/stakingRecord")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "txnType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryTxnType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/staking/stakingRecord
--
-- The same as 'getSapiV1StakingStakingRecord' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1StakingStakingRecordRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingStakingRecordParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1StakingStakingRecordRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/staking/stakingRecord")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "txnType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryTxnType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/staking/stakingRecord
--
-- The same as 'getSapiV1StakingStakingRecord' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1StakingStakingRecordWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingStakingRecordParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1StakingStakingRecordWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/staking/stakingRecord")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "txnType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryTxnType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingStakingRecordParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingStakingRecordParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
