{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BswapAddLiquidityPreview
module Binance.Operations.GetSapiV1BswapAddLiquidityPreview where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/bswap/addLiquidityPreview
--
-- Calculate expected share amount for adding liquidity in single or dual token.
--
-- Weight(IP): 150
getSapiV1BswapAddLiquidityPreview ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapAddLiquidityPreviewParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BswapAddLiquidityPreviewResponse)
getSapiV1BswapAddLiquidityPreview parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BswapAddLiquidityPreviewResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapAddLiquidityPreviewResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1BswapAddLiquidityPreviewResponseBody200Variants
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapAddLiquidityPreviewResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapAddLiquidityPreviewResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/addLiquidityPreview")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapAddLiquidityPreviewParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/addLiquidityPreview.GET.parameters@ in the specification.
data GetSapiV1BswapAddLiquidityPreviewParameters = GetSapiV1BswapAddLiquidityPreviewParameters
  { -- | queryPoolId: Represents the parameter named \'poolId\'
    getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId :: GHC.Int.Int64,
    -- | queryQuoteAsset: Represents the parameter named \'quoteAsset\'
    getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset :: Data.Text.Internal.Text,
    -- | queryQuoteQty: Represents the parameter named \'quoteQty\'
    getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty :: GHC.Types.Double,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1BswapAddLiquidityPreviewParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1BswapAddLiquidityPreviewParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryType: Represents the parameter named \'type\'
    --
    -- * \`SINGLE\` - for adding a single token
    -- * \`COMBINATION\` - for adding dual tokens
    getSapiV1BswapAddLiquidityPreviewParametersQueryType :: GetSapiV1BswapAddLiquidityPreviewParametersQueryType
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapAddLiquidityPreviewParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryPoolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId obj] : ["queryQuoteAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset obj] : ["queryQuoteQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapAddLiquidityPreviewParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp obj] : ["queryType" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryPoolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId obj] : ["queryQuoteAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset obj] : ["queryQuoteQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapAddLiquidityPreviewParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp obj] : ["queryType" Data.Aeson.Types.ToJSON..= getSapiV1BswapAddLiquidityPreviewParametersQueryType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapAddLiquidityPreviewParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapAddLiquidityPreviewParameters" (\obj -> ((((((GHC.Base.pure GetSapiV1BswapAddLiquidityPreviewParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryPoolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuoteAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryType"))

-- | Create a new 'GetSapiV1BswapAddLiquidityPreviewParameters' with all required fields.
mkGetSapiV1BswapAddLiquidityPreviewParameters ::
  -- | 'getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapAddLiquidityPreviewParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapAddLiquidityPreviewParametersQueryType'
  GetSapiV1BswapAddLiquidityPreviewParametersQueryType ->
  GetSapiV1BswapAddLiquidityPreviewParameters
mkGetSapiV1BswapAddLiquidityPreviewParameters getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty getSapiV1BswapAddLiquidityPreviewParametersQuerySignature getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp getSapiV1BswapAddLiquidityPreviewParametersQueryType =
  GetSapiV1BswapAddLiquidityPreviewParameters
    { getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId = getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId,
      getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset = getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset,
      getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty = getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty,
      getSapiV1BswapAddLiquidityPreviewParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1BswapAddLiquidityPreviewParametersQuerySignature = getSapiV1BswapAddLiquidityPreviewParametersQuerySignature,
      getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp = getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp,
      getSapiV1BswapAddLiquidityPreviewParametersQueryType = getSapiV1BswapAddLiquidityPreviewParametersQueryType
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/bswap\/addLiquidityPreview.GET.parameters.properties.queryType@ in the specification.
--
-- Represents the parameter named \'type\'
--
-- * \`SINGLE\` - for adding a single token
-- * \`COMBINATION\` - for adding dual tokens
data GetSapiV1BswapAddLiquidityPreviewParametersQueryType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"SINGLE"@
    GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeEnumSINGLE
  | -- | Represents the JSON value @"COMBINATION"@
    GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeEnumCOMBINATION
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapAddLiquidityPreviewParametersQueryType where
  toJSON (GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeOther val) = val
  toJSON (GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeEnumSINGLE) = "SINGLE"
  toJSON (GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeEnumCOMBINATION) = "COMBINATION"

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapAddLiquidityPreviewParametersQueryType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "SINGLE" -> GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeEnumSINGLE
            | val GHC.Classes.== "COMBINATION" -> GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeEnumCOMBINATION
            | GHC.Base.otherwise -> GetSapiV1BswapAddLiquidityPreviewParametersQueryTypeOther val
      )

-- | Represents a response of the operation 'getSapiV1BswapAddLiquidityPreview'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BswapAddLiquidityPreviewResponseError' is used.
data GetSapiV1BswapAddLiquidityPreviewResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BswapAddLiquidityPreviewResponseError GHC.Base.String
  | -- | Add Liquidity Preview
    GetSapiV1BswapAddLiquidityPreviewResponse200 GetSapiV1BswapAddLiquidityPreviewResponseBody200Variants
  | -- | Bad Request
    GetSapiV1BswapAddLiquidityPreviewResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1BswapAddLiquidityPreviewResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the oneOf schema located at @paths.\/sapi\/v1\/bswap\/addLiquidityPreview.GET.responses.200.content.application\/json.schema.oneOf@ in the specification.
data GetSapiV1BswapAddLiquidityPreviewResponseBody200Variants
  = GetSapiV1BswapAddLiquidityPreviewResponseBody200Variant1 BswapAddLiquidityPreviewCombination
  | GetSapiV1BswapAddLiquidityPreviewResponseBody200Variant2 BswapAddLiquidityPreviewSingle
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapAddLiquidityPreviewResponseBody200Variants where
  toJSON (GetSapiV1BswapAddLiquidityPreviewResponseBody200Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetSapiV1BswapAddLiquidityPreviewResponseBody200Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapAddLiquidityPreviewResponseBody200Variants where
  parseJSON val = case (GetSapiV1BswapAddLiquidityPreviewResponseBody200Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSapiV1BswapAddLiquidityPreviewResponseBody200Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | > GET /sapi/v1/bswap/addLiquidityPreview
--
-- The same as 'getSapiV1BswapAddLiquidityPreview' but accepts an explicit configuration.
getSapiV1BswapAddLiquidityPreviewWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapAddLiquidityPreviewParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BswapAddLiquidityPreviewResponse)
getSapiV1BswapAddLiquidityPreviewWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BswapAddLiquidityPreviewResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapAddLiquidityPreviewResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1BswapAddLiquidityPreviewResponseBody200Variants
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapAddLiquidityPreviewResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapAddLiquidityPreviewResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/addLiquidityPreview")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapAddLiquidityPreviewParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/bswap/addLiquidityPreview
--
-- The same as 'getSapiV1BswapAddLiquidityPreview' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapAddLiquidityPreviewRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapAddLiquidityPreviewParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapAddLiquidityPreviewRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/addLiquidityPreview")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapAddLiquidityPreviewParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/bswap/addLiquidityPreview
--
-- The same as 'getSapiV1BswapAddLiquidityPreview' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapAddLiquidityPreviewWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapAddLiquidityPreviewParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapAddLiquidityPreviewWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/addLiquidityPreview")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapAddLiquidityPreviewParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapAddLiquidityPreviewParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
