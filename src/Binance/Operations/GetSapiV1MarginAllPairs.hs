{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MarginAllPairs
module Binance.Operations.GetSapiV1MarginAllPairs where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/margin/allPairs
--
-- Weight(IP): 1
getSapiV1MarginAllPairs :: forall m. Binance.Common.MonadHTTP m => -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MarginAllPairsResponse)
getSapiV1MarginAllPairs =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginAllPairsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAllPairsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1MarginAllPairsResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAllPairsResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/allPairs") GHC.Base.mempty)

-- | Represents a response of the operation 'getSapiV1MarginAllPairs'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MarginAllPairsResponseError' is used.
data GetSapiV1MarginAllPairsResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MarginAllPairsResponseError GHC.Base.String
  | -- | Margin pairs
    GetSapiV1MarginAllPairsResponse200 ([GetSapiV1MarginAllPairsResponseBody200])
  | -- | Bad Request
    GetSapiV1MarginAllPairsResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/allPairs.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1MarginAllPairsResponseBody200 = GetSapiV1MarginAllPairsResponseBody200
  { -- | base
    getSapiV1MarginAllPairsResponseBody200Base :: Data.Text.Internal.Text,
    -- | id
    getSapiV1MarginAllPairsResponseBody200Id :: GHC.Int.Int64,
    -- | isBuyAllowed
    getSapiV1MarginAllPairsResponseBody200IsBuyAllowed :: GHC.Types.Bool,
    -- | isMarginTrade
    getSapiV1MarginAllPairsResponseBody200IsMarginTrade :: GHC.Types.Bool,
    -- | isSellAllowed
    getSapiV1MarginAllPairsResponseBody200IsSellAllowed :: GHC.Types.Bool,
    -- | quote
    getSapiV1MarginAllPairsResponseBody200Quote :: Data.Text.Internal.Text,
    -- | symbol
    getSapiV1MarginAllPairsResponseBody200Symbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginAllPairsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["base" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200Base obj] : ["id" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200Id obj] : ["isBuyAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200IsBuyAllowed obj] : ["isMarginTrade" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200IsMarginTrade obj] : ["isSellAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200IsSellAllowed obj] : ["quote" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200Quote obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200Symbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["base" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200Base obj] : ["id" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200Id obj] : ["isBuyAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200IsBuyAllowed obj] : ["isMarginTrade" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200IsMarginTrade obj] : ["isSellAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200IsSellAllowed obj] : ["quote" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200Quote obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginAllPairsResponseBody200Symbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginAllPairsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginAllPairsResponseBody200" (\obj -> ((((((GHC.Base.pure GetSapiV1MarginAllPairsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "base")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBuyAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMarginTrade")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isSellAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quote")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'GetSapiV1MarginAllPairsResponseBody200' with all required fields.
mkGetSapiV1MarginAllPairsResponseBody200 ::
  -- | 'getSapiV1MarginAllPairsResponseBody200Base'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginAllPairsResponseBody200Id'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MarginAllPairsResponseBody200IsBuyAllowed'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginAllPairsResponseBody200IsMarginTrade'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginAllPairsResponseBody200IsSellAllowed'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginAllPairsResponseBody200Quote'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginAllPairsResponseBody200Symbol'
  Data.Text.Internal.Text ->
  GetSapiV1MarginAllPairsResponseBody200
mkGetSapiV1MarginAllPairsResponseBody200 getSapiV1MarginAllPairsResponseBody200Base getSapiV1MarginAllPairsResponseBody200Id getSapiV1MarginAllPairsResponseBody200IsBuyAllowed getSapiV1MarginAllPairsResponseBody200IsMarginTrade getSapiV1MarginAllPairsResponseBody200IsSellAllowed getSapiV1MarginAllPairsResponseBody200Quote getSapiV1MarginAllPairsResponseBody200Symbol =
  GetSapiV1MarginAllPairsResponseBody200
    { getSapiV1MarginAllPairsResponseBody200Base = getSapiV1MarginAllPairsResponseBody200Base,
      getSapiV1MarginAllPairsResponseBody200Id = getSapiV1MarginAllPairsResponseBody200Id,
      getSapiV1MarginAllPairsResponseBody200IsBuyAllowed = getSapiV1MarginAllPairsResponseBody200IsBuyAllowed,
      getSapiV1MarginAllPairsResponseBody200IsMarginTrade = getSapiV1MarginAllPairsResponseBody200IsMarginTrade,
      getSapiV1MarginAllPairsResponseBody200IsSellAllowed = getSapiV1MarginAllPairsResponseBody200IsSellAllowed,
      getSapiV1MarginAllPairsResponseBody200Quote = getSapiV1MarginAllPairsResponseBody200Quote,
      getSapiV1MarginAllPairsResponseBody200Symbol = getSapiV1MarginAllPairsResponseBody200Symbol
    }

-- | > GET /sapi/v1/margin/allPairs
--
-- The same as 'getSapiV1MarginAllPairs' but accepts an explicit configuration.
getSapiV1MarginAllPairsWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MarginAllPairsResponse)
getSapiV1MarginAllPairsWithConfiguration config =
  GHC.Base.fmap
    ( \response_3 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginAllPairsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAllPairsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1MarginAllPairsResponseBody200])
                                                      )
                                 | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAllPairsResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_3
          )
          response_3
    )
    (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/allPairs") GHC.Base.mempty)

-- | > GET /sapi/v1/margin/allPairs
--
-- The same as 'getSapiV1MarginAllPairs' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginAllPairsRaw :: forall m. Binance.Common.MonadHTTP m => -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginAllPairsRaw = GHC.Base.id (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/allPairs") GHC.Base.mempty)

-- | > GET /sapi/v1/margin/allPairs
--
-- The same as 'getSapiV1MarginAllPairs' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginAllPairsWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginAllPairsWithConfigurationRaw config = GHC.Base.id (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/allPairs") GHC.Base.mempty)
