{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation deleteApiV3OrderList
module Binance.Operations.DeleteApiV3OrderList where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > DELETE /api/v3/orderList
--
-- Cancel an entire Order List
--
-- Canceling an individual leg will cancel the entire OCO
--
-- Weight(IP): 1
deleteApiV3OrderList ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteApiV3OrderListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteApiV3OrderListResponse)
deleteApiV3OrderList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either DeleteApiV3OrderListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   DeleteApiV3OrderListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            OcoOrder
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   DeleteApiV3OrderListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   DeleteApiV3OrderListResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE")
        (Data.Text.pack "/api/v3/orderList")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "orderListId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryOrderListId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "listClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryListClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/orderList.DELETE.parameters@ in the specification.
data DeleteApiV3OrderListParameters = DeleteApiV3OrderListParameters
  { -- | queryListClientOrderId: Represents the parameter named \'listClientOrderId\'
    --
    -- A unique Id for the entire orderList
    deleteApiV3OrderListParametersQueryListClientOrderId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryNewClientOrderId: Represents the parameter named \'newClientOrderId\'
    --
    -- Used to uniquely identify this cancel. Automatically generated by default
    deleteApiV3OrderListParametersQueryNewClientOrderId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryOrderListId: Represents the parameter named \'orderListId\'
    --
    -- Order list id
    deleteApiV3OrderListParametersQueryOrderListId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    deleteApiV3OrderListParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    deleteApiV3OrderListParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    deleteApiV3OrderListParametersQuerySymbol :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    deleteApiV3OrderListParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteApiV3OrderListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryListClientOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderListParametersQueryListClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewClientOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderListParametersQueryNewClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrderListId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderListParametersQueryOrderListId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= deleteApiV3OrderListParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= deleteApiV3OrderListParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= deleteApiV3OrderListParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryListClientOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderListParametersQueryListClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewClientOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderListParametersQueryNewClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrderListId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderListParametersQueryOrderListId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= deleteApiV3OrderListParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= deleteApiV3OrderListParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= deleteApiV3OrderListParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteApiV3OrderListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteApiV3OrderListParameters" (\obj -> ((((((GHC.Base.pure DeleteApiV3OrderListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryListClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryNewClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrderListId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'DeleteApiV3OrderListParameters' with all required fields.
mkDeleteApiV3OrderListParameters ::
  -- | 'deleteApiV3OrderListParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'deleteApiV3OrderListParametersQuerySymbol'
  Data.Text.Internal.Text ->
  -- | 'deleteApiV3OrderListParametersQueryTimestamp'
  GHC.Int.Int64 ->
  DeleteApiV3OrderListParameters
mkDeleteApiV3OrderListParameters deleteApiV3OrderListParametersQuerySignature deleteApiV3OrderListParametersQuerySymbol deleteApiV3OrderListParametersQueryTimestamp =
  DeleteApiV3OrderListParameters
    { deleteApiV3OrderListParametersQueryListClientOrderId = GHC.Maybe.Nothing,
      deleteApiV3OrderListParametersQueryNewClientOrderId = GHC.Maybe.Nothing,
      deleteApiV3OrderListParametersQueryOrderListId = GHC.Maybe.Nothing,
      deleteApiV3OrderListParametersQueryRecvWindow = GHC.Maybe.Nothing,
      deleteApiV3OrderListParametersQuerySignature = deleteApiV3OrderListParametersQuerySignature,
      deleteApiV3OrderListParametersQuerySymbol = deleteApiV3OrderListParametersQuerySymbol,
      deleteApiV3OrderListParametersQueryTimestamp = deleteApiV3OrderListParametersQueryTimestamp
    }

-- | Represents a response of the operation 'deleteApiV3OrderList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteApiV3OrderListResponseError' is used.
data DeleteApiV3OrderListResponse
  = -- | Means either no matching case available or a parse error
    DeleteApiV3OrderListResponseError GHC.Base.String
  | -- | Report on deleted OCO
    DeleteApiV3OrderListResponse200 OcoOrder
  | -- | Bad Request
    DeleteApiV3OrderListResponse400 Error
  | -- | Unauthorized Request
    DeleteApiV3OrderListResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | > DELETE /api/v3/orderList
--
-- The same as 'deleteApiV3OrderList' but accepts an explicit configuration.
deleteApiV3OrderListWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteApiV3OrderListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response DeleteApiV3OrderListResponse)
deleteApiV3OrderListWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either DeleteApiV3OrderListResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteApiV3OrderListResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              OcoOrder
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteApiV3OrderListResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteApiV3OrderListResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE")
          (Data.Text.pack "/api/v3/orderList")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "orderListId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryOrderListId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "listClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryListClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > DELETE /api/v3/orderList
--
-- The same as 'deleteApiV3OrderList' but returns the raw 'Data.ByteString.Char8.ByteString'.
deleteApiV3OrderListRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteApiV3OrderListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
deleteApiV3OrderListRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE")
        (Data.Text.pack "/api/v3/orderList")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "orderListId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryOrderListId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "listClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryListClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > DELETE /api/v3/orderList
--
-- The same as 'deleteApiV3OrderList' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
deleteApiV3OrderListWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteApiV3OrderListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
deleteApiV3OrderListWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE")
          (Data.Text.pack "/api/v3/orderList")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "orderListId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryOrderListId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "listClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryListClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
