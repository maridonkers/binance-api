{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1FiatOrders
module Binance.Operations.GetSapiV1FiatOrders where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/fiat/orders
--
-- - If beginTime and endTime are not sent, the recent 30-day data will be returned.
--
-- Weight(UID): 90000
getSapiV1FiatOrders ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1FiatOrdersParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1FiatOrdersResponse)
getSapiV1FiatOrders parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1FiatOrdersResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1FiatOrdersResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1FiatOrdersResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1FiatOrdersResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1FiatOrdersResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/fiat/orders")
        [ Binance.Common.QueryParameter (Data.Text.pack "transactionType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQueryTransactionType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "beginTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryBeginTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "rows") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryRows parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/fiat\/orders.GET.parameters@ in the specification.
data GetSapiV1FiatOrdersParameters = GetSapiV1FiatOrdersParameters
  { -- | queryBeginTime: Represents the parameter named \'beginTime\'
    getSapiV1FiatOrdersParametersQueryBeginTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1FiatOrdersParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- Default 1
    getSapiV1FiatOrdersParametersQueryPage :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1FiatOrdersParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryRows: Represents the parameter named \'rows\'
    --
    -- Default 100, max 500
    getSapiV1FiatOrdersParametersQueryRows :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1FiatOrdersParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1FiatOrdersParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryTransactionType: Represents the parameter named \'transactionType\'
    --
    -- * \`0\` - deposit
    -- * \`1\` - withdraw
    getSapiV1FiatOrdersParametersQueryTransactionType :: GetSapiV1FiatOrdersParametersQueryTransactionType
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1FiatOrdersParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBeginTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryBeginTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryRecvWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRows" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryRows obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersParametersQueryTimestamp obj] : ["queryTransactionType" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersParametersQueryTransactionType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBeginTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryBeginTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryRecvWindow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRows" Data.Aeson.Types.ToJSON..=)) (getSapiV1FiatOrdersParametersQueryRows obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersParametersQueryTimestamp obj] : ["queryTransactionType" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersParametersQueryTransactionType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1FiatOrdersParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1FiatOrdersParameters" (\obj -> (((((((GHC.Base.pure GetSapiV1FiatOrdersParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBeginTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRows")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTransactionType"))

-- | Create a new 'GetSapiV1FiatOrdersParameters' with all required fields.
mkGetSapiV1FiatOrdersParameters ::
  -- | 'getSapiV1FiatOrdersParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'getSapiV1FiatOrdersParametersQueryTransactionType'
  GetSapiV1FiatOrdersParametersQueryTransactionType ->
  GetSapiV1FiatOrdersParameters
mkGetSapiV1FiatOrdersParameters getSapiV1FiatOrdersParametersQuerySignature getSapiV1FiatOrdersParametersQueryTimestamp getSapiV1FiatOrdersParametersQueryTransactionType =
  GetSapiV1FiatOrdersParameters
    { getSapiV1FiatOrdersParametersQueryBeginTime = GHC.Maybe.Nothing,
      getSapiV1FiatOrdersParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1FiatOrdersParametersQueryPage = GHC.Maybe.Nothing,
      getSapiV1FiatOrdersParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1FiatOrdersParametersQueryRows = GHC.Maybe.Nothing,
      getSapiV1FiatOrdersParametersQuerySignature = getSapiV1FiatOrdersParametersQuerySignature,
      getSapiV1FiatOrdersParametersQueryTimestamp = getSapiV1FiatOrdersParametersQueryTimestamp,
      getSapiV1FiatOrdersParametersQueryTransactionType = getSapiV1FiatOrdersParametersQueryTransactionType
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/fiat\/orders.GET.parameters.properties.queryTransactionType@ in the specification.
--
-- Represents the parameter named \'transactionType\'
--
-- * \`0\` - deposit
-- * \`1\` - withdraw
data GetSapiV1FiatOrdersParametersQueryTransactionType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetSapiV1FiatOrdersParametersQueryTransactionTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetSapiV1FiatOrdersParametersQueryTransactionTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"0"@
    GetSapiV1FiatOrdersParametersQueryTransactionTypeEnum0
  | -- | Represents the JSON value @"1"@
    GetSapiV1FiatOrdersParametersQueryTransactionTypeEnum1
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1FiatOrdersParametersQueryTransactionType where
  toJSON (GetSapiV1FiatOrdersParametersQueryTransactionTypeOther val) = val
  toJSON (GetSapiV1FiatOrdersParametersQueryTransactionTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetSapiV1FiatOrdersParametersQueryTransactionTypeEnum0) = "0"
  toJSON (GetSapiV1FiatOrdersParametersQueryTransactionTypeEnum1) = "1"

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1FiatOrdersParametersQueryTransactionType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "0" -> GetSapiV1FiatOrdersParametersQueryTransactionTypeEnum0
            | val GHC.Classes.== "1" -> GetSapiV1FiatOrdersParametersQueryTransactionTypeEnum1
            | GHC.Base.otherwise -> GetSapiV1FiatOrdersParametersQueryTransactionTypeOther val
      )

-- | Represents a response of the operation 'getSapiV1FiatOrders'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1FiatOrdersResponseError' is used.
data GetSapiV1FiatOrdersResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1FiatOrdersResponseError GHC.Base.String
  | -- | History of deposit\/withdraw orders
    GetSapiV1FiatOrdersResponse200 GetSapiV1FiatOrdersResponseBody200
  | -- | Bad Request
    GetSapiV1FiatOrdersResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1FiatOrdersResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/fiat\/orders.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1FiatOrdersResponseBody200 = GetSapiV1FiatOrdersResponseBody200
  { -- | code
    getSapiV1FiatOrdersResponseBody200Code :: Data.Text.Internal.Text,
    -- | data
    getSapiV1FiatOrdersResponseBody200Data :: ([GetSapiV1FiatOrdersResponseBody200Data]),
    -- | message
    getSapiV1FiatOrdersResponseBody200Message :: Data.Text.Internal.Text,
    -- | success
    getSapiV1FiatOrdersResponseBody200Success :: GHC.Types.Bool,
    -- | total
    getSapiV1FiatOrdersResponseBody200Total :: GHC.Int.Int32
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1FiatOrdersResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Data obj] : ["message" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Message obj] : ["success" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Success obj] : ["total" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Total obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Data obj] : ["message" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Message obj] : ["success" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Success obj] : ["total" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200Total obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1FiatOrdersResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1FiatOrdersResponseBody200" (\obj -> ((((GHC.Base.pure GetSapiV1FiatOrdersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))

-- | Create a new 'GetSapiV1FiatOrdersResponseBody200' with all required fields.
mkGetSapiV1FiatOrdersResponseBody200 ::
  -- | 'getSapiV1FiatOrdersResponseBody200Code'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersResponseBody200Data'
  [GetSapiV1FiatOrdersResponseBody200Data] ->
  -- | 'getSapiV1FiatOrdersResponseBody200Message'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersResponseBody200Success'
  GHC.Types.Bool ->
  -- | 'getSapiV1FiatOrdersResponseBody200Total'
  GHC.Int.Int32 ->
  GetSapiV1FiatOrdersResponseBody200
mkGetSapiV1FiatOrdersResponseBody200 getSapiV1FiatOrdersResponseBody200Code getSapiV1FiatOrdersResponseBody200Data getSapiV1FiatOrdersResponseBody200Message getSapiV1FiatOrdersResponseBody200Success getSapiV1FiatOrdersResponseBody200Total =
  GetSapiV1FiatOrdersResponseBody200
    { getSapiV1FiatOrdersResponseBody200Code = getSapiV1FiatOrdersResponseBody200Code,
      getSapiV1FiatOrdersResponseBody200Data = getSapiV1FiatOrdersResponseBody200Data,
      getSapiV1FiatOrdersResponseBody200Message = getSapiV1FiatOrdersResponseBody200Message,
      getSapiV1FiatOrdersResponseBody200Success = getSapiV1FiatOrdersResponseBody200Success,
      getSapiV1FiatOrdersResponseBody200Total = getSapiV1FiatOrdersResponseBody200Total
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/fiat\/orders.GET.responses.200.content.application\/json.schema.properties.data.items@ in the specification.
data GetSapiV1FiatOrdersResponseBody200Data = GetSapiV1FiatOrdersResponseBody200Data
  { -- | amount
    getSapiV1FiatOrdersResponseBody200DataAmount :: Data.Text.Internal.Text,
    -- | createTime
    getSapiV1FiatOrdersResponseBody200DataCreateTime :: GHC.Int.Int64,
    -- | fiatCurrency
    getSapiV1FiatOrdersResponseBody200DataFiatCurrency :: Data.Text.Internal.Text,
    -- | indicatedAmount
    getSapiV1FiatOrdersResponseBody200DataIndicatedAmount :: Data.Text.Internal.Text,
    -- | method
    getSapiV1FiatOrdersResponseBody200DataMethod :: Data.Text.Internal.Text,
    -- | orderNo
    getSapiV1FiatOrdersResponseBody200DataOrderNo :: Data.Text.Internal.Text,
    -- | status: Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
    getSapiV1FiatOrdersResponseBody200DataStatus :: Data.Text.Internal.Text,
    -- | totalFee
    getSapiV1FiatOrdersResponseBody200DataTotalFee :: Data.Text.Internal.Text,
    -- | updateTime
    getSapiV1FiatOrdersResponseBody200DataUpdateTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1FiatOrdersResponseBody200Data where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataAmount obj] : ["createTime" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataCreateTime obj] : ["fiatCurrency" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataFiatCurrency obj] : ["indicatedAmount" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataIndicatedAmount obj] : ["method" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataMethod obj] : ["orderNo" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataOrderNo obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataStatus obj] : ["totalFee" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataTotalFee obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataUpdateTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataAmount obj] : ["createTime" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataCreateTime obj] : ["fiatCurrency" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataFiatCurrency obj] : ["indicatedAmount" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataIndicatedAmount obj] : ["method" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataMethod obj] : ["orderNo" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataOrderNo obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataStatus obj] : ["totalFee" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataTotalFee obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1FiatOrdersResponseBody200DataUpdateTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1FiatOrdersResponseBody200Data where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1FiatOrdersResponseBody200Data" (\obj -> ((((((((GHC.Base.pure GetSapiV1FiatOrdersResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "createTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fiatCurrency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "indicatedAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderNo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalFee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updateTime"))

-- | Create a new 'GetSapiV1FiatOrdersResponseBody200Data' with all required fields.
mkGetSapiV1FiatOrdersResponseBody200Data ::
  -- | 'getSapiV1FiatOrdersResponseBody200DataAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersResponseBody200DataCreateTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1FiatOrdersResponseBody200DataFiatCurrency'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersResponseBody200DataIndicatedAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersResponseBody200DataMethod'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersResponseBody200DataOrderNo'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersResponseBody200DataStatus'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersResponseBody200DataTotalFee'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1FiatOrdersResponseBody200DataUpdateTime'
  GHC.Int.Int64 ->
  GetSapiV1FiatOrdersResponseBody200Data
mkGetSapiV1FiatOrdersResponseBody200Data getSapiV1FiatOrdersResponseBody200DataAmount getSapiV1FiatOrdersResponseBody200DataCreateTime getSapiV1FiatOrdersResponseBody200DataFiatCurrency getSapiV1FiatOrdersResponseBody200DataIndicatedAmount getSapiV1FiatOrdersResponseBody200DataMethod getSapiV1FiatOrdersResponseBody200DataOrderNo getSapiV1FiatOrdersResponseBody200DataStatus getSapiV1FiatOrdersResponseBody200DataTotalFee getSapiV1FiatOrdersResponseBody200DataUpdateTime =
  GetSapiV1FiatOrdersResponseBody200Data
    { getSapiV1FiatOrdersResponseBody200DataAmount = getSapiV1FiatOrdersResponseBody200DataAmount,
      getSapiV1FiatOrdersResponseBody200DataCreateTime = getSapiV1FiatOrdersResponseBody200DataCreateTime,
      getSapiV1FiatOrdersResponseBody200DataFiatCurrency = getSapiV1FiatOrdersResponseBody200DataFiatCurrency,
      getSapiV1FiatOrdersResponseBody200DataIndicatedAmount = getSapiV1FiatOrdersResponseBody200DataIndicatedAmount,
      getSapiV1FiatOrdersResponseBody200DataMethod = getSapiV1FiatOrdersResponseBody200DataMethod,
      getSapiV1FiatOrdersResponseBody200DataOrderNo = getSapiV1FiatOrdersResponseBody200DataOrderNo,
      getSapiV1FiatOrdersResponseBody200DataStatus = getSapiV1FiatOrdersResponseBody200DataStatus,
      getSapiV1FiatOrdersResponseBody200DataTotalFee = getSapiV1FiatOrdersResponseBody200DataTotalFee,
      getSapiV1FiatOrdersResponseBody200DataUpdateTime = getSapiV1FiatOrdersResponseBody200DataUpdateTime
    }

-- | > GET /sapi/v1/fiat/orders
--
-- The same as 'getSapiV1FiatOrders' but accepts an explicit configuration.
getSapiV1FiatOrdersWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1FiatOrdersParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1FiatOrdersResponse)
getSapiV1FiatOrdersWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1FiatOrdersResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1FiatOrdersResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1FiatOrdersResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1FiatOrdersResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1FiatOrdersResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/fiat/orders")
          [ Binance.Common.QueryParameter (Data.Text.pack "transactionType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQueryTransactionType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "beginTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryBeginTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "rows") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryRows parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/fiat/orders
--
-- The same as 'getSapiV1FiatOrders' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1FiatOrdersRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1FiatOrdersParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1FiatOrdersRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/fiat/orders")
        [ Binance.Common.QueryParameter (Data.Text.pack "transactionType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQueryTransactionType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "beginTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryBeginTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "rows") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryRows parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/fiat/orders
--
-- The same as 'getSapiV1FiatOrders' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1FiatOrdersWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1FiatOrdersParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1FiatOrdersWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/fiat/orders")
          [ Binance.Common.QueryParameter (Data.Text.pack "transactionType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQueryTransactionType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "beginTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryBeginTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "rows") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryRows parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1FiatOrdersParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1FiatOrdersParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
