{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1AssetTradeFee
module Binance.Operations.GetSapiV1AssetTradeFee where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/asset/tradeFee
--
-- Fetch trade fee
--
-- Weight(IP): 1
getSapiV1AssetTradeFee ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1AssetTradeFeeParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1AssetTradeFeeResponse)
getSapiV1AssetTradeFee parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1AssetTradeFeeResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1AssetTradeFeeResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1AssetTradeFeeResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1AssetTradeFeeResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1AssetTradeFeeResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/asset/tradeFee")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1AssetTradeFeeParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1AssetTradeFeeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1AssetTradeFeeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1AssetTradeFeeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/tradeFee.GET.parameters@ in the specification.
data GetSapiV1AssetTradeFeeParameters = GetSapiV1AssetTradeFeeParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1AssetTradeFeeParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1AssetTradeFeeParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    getSapiV1AssetTradeFeeParametersQuerySymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1AssetTradeFeeParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1AssetTradeFeeParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1AssetTradeFeeParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (getSapiV1AssetTradeFeeParametersQuerySymbol obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1AssetTradeFeeParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (getSapiV1AssetTradeFeeParametersQuerySymbol obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1AssetTradeFeeParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1AssetTradeFeeParameters" (\obj -> (((GHC.Base.pure GetSapiV1AssetTradeFeeParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1AssetTradeFeeParameters' with all required fields.
mkGetSapiV1AssetTradeFeeParameters ::
  -- | 'getSapiV1AssetTradeFeeParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1AssetTradeFeeParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1AssetTradeFeeParameters
mkGetSapiV1AssetTradeFeeParameters getSapiV1AssetTradeFeeParametersQuerySignature getSapiV1AssetTradeFeeParametersQueryTimestamp =
  GetSapiV1AssetTradeFeeParameters
    { getSapiV1AssetTradeFeeParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1AssetTradeFeeParametersQuerySignature = getSapiV1AssetTradeFeeParametersQuerySignature,
      getSapiV1AssetTradeFeeParametersQuerySymbol = GHC.Maybe.Nothing,
      getSapiV1AssetTradeFeeParametersQueryTimestamp = getSapiV1AssetTradeFeeParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1AssetTradeFee'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1AssetTradeFeeResponseError' is used.
data GetSapiV1AssetTradeFeeResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1AssetTradeFeeResponseError GHC.Base.String
  | -- | Trade fee info per symbol
    GetSapiV1AssetTradeFeeResponse200 ([GetSapiV1AssetTradeFeeResponseBody200])
  | -- | Bad Request
    GetSapiV1AssetTradeFeeResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1AssetTradeFeeResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/tradeFee.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1AssetTradeFeeResponseBody200 = GetSapiV1AssetTradeFeeResponseBody200
  { -- | makerCommission
    getSapiV1AssetTradeFeeResponseBody200MakerCommission :: Data.Text.Internal.Text,
    -- | symbol
    getSapiV1AssetTradeFeeResponseBody200Symbol :: Data.Text.Internal.Text,
    -- | takerCommission
    getSapiV1AssetTradeFeeResponseBody200TakerCommission :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1AssetTradeFeeResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["makerCommission" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeResponseBody200MakerCommission obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeResponseBody200Symbol obj] : ["takerCommission" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeResponseBody200TakerCommission obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["makerCommission" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeResponseBody200MakerCommission obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeResponseBody200Symbol obj] : ["takerCommission" Data.Aeson.Types.ToJSON..= getSapiV1AssetTradeFeeResponseBody200TakerCommission obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1AssetTradeFeeResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1AssetTradeFeeResponseBody200" (\obj -> ((GHC.Base.pure GetSapiV1AssetTradeFeeResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "makerCommission")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "takerCommission"))

-- | Create a new 'GetSapiV1AssetTradeFeeResponseBody200' with all required fields.
mkGetSapiV1AssetTradeFeeResponseBody200 ::
  -- | 'getSapiV1AssetTradeFeeResponseBody200MakerCommission'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1AssetTradeFeeResponseBody200Symbol'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1AssetTradeFeeResponseBody200TakerCommission'
  Data.Text.Internal.Text ->
  GetSapiV1AssetTradeFeeResponseBody200
mkGetSapiV1AssetTradeFeeResponseBody200 getSapiV1AssetTradeFeeResponseBody200MakerCommission getSapiV1AssetTradeFeeResponseBody200Symbol getSapiV1AssetTradeFeeResponseBody200TakerCommission =
  GetSapiV1AssetTradeFeeResponseBody200
    { getSapiV1AssetTradeFeeResponseBody200MakerCommission = getSapiV1AssetTradeFeeResponseBody200MakerCommission,
      getSapiV1AssetTradeFeeResponseBody200Symbol = getSapiV1AssetTradeFeeResponseBody200Symbol,
      getSapiV1AssetTradeFeeResponseBody200TakerCommission = getSapiV1AssetTradeFeeResponseBody200TakerCommission
    }

-- | > GET /sapi/v1/asset/tradeFee
--
-- The same as 'getSapiV1AssetTradeFee' but accepts an explicit configuration.
getSapiV1AssetTradeFeeWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1AssetTradeFeeParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1AssetTradeFeeResponse)
getSapiV1AssetTradeFeeWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1AssetTradeFeeResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1AssetTradeFeeResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1AssetTradeFeeResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1AssetTradeFeeResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1AssetTradeFeeResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/asset/tradeFee")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1AssetTradeFeeParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1AssetTradeFeeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1AssetTradeFeeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1AssetTradeFeeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/asset/tradeFee
--
-- The same as 'getSapiV1AssetTradeFee' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1AssetTradeFeeRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1AssetTradeFeeParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1AssetTradeFeeRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/asset/tradeFee")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1AssetTradeFeeParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1AssetTradeFeeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1AssetTradeFeeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1AssetTradeFeeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/asset/tradeFee
--
-- The same as 'getSapiV1AssetTradeFee' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1AssetTradeFeeWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1AssetTradeFeeParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1AssetTradeFeeWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/asset/tradeFee")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1AssetTradeFeeParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1AssetTradeFeeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1AssetTradeFeeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1AssetTradeFeeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
