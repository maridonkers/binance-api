{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1LoanBorrow
module Binance.Operations.PostSapiV1LoanBorrow where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/loan/borrow
--
-- Weight(UID): 6000
postSapiV1LoanBorrow ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1LoanBorrowParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1LoanBorrowResponse)
postSapiV1LoanBorrow parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1LoanBorrowResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1LoanBorrowResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1LoanBorrowResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1LoanBorrowResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1LoanBorrowResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/loan/borrow")
        [ Binance.Common.QueryParameter (Data.Text.pack "loanCoin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryLoanCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "loanAmount") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryLoanAmount parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "collateralCoin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryCollateralCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "collateralAmount") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryCollateralAmount parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "loanTerm") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryLoanTerm parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/loan\/borrow.POST.parameters@ in the specification.
data PostSapiV1LoanBorrowParameters = PostSapiV1LoanBorrowParameters
  { -- | queryCollateralAmount: Represents the parameter named \'collateralAmount\'
    --
    -- Mandatory when loanAmount is empty
    postSapiV1LoanBorrowParametersQueryCollateralAmount :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryCollateralCoin: Represents the parameter named \'collateralCoin\'
    --
    -- Coin used as collateral
    postSapiV1LoanBorrowParametersQueryCollateralCoin :: Data.Text.Internal.Text,
    -- | queryLoanAmount: Represents the parameter named \'loanAmount\'
    --
    -- Mandatory when collateralAmount is empty
    postSapiV1LoanBorrowParametersQueryLoanAmount :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | queryLoanCoin: Represents the parameter named \'loanCoin\'
    --
    -- Coin loaned
    postSapiV1LoanBorrowParametersQueryLoanCoin :: Data.Text.Internal.Text,
    -- | queryLoanTerm: Represents the parameter named \'loanTerm\'
    --
    -- 7\/14\/30\/90\/180 days
    postSapiV1LoanBorrowParametersQueryLoanTerm :: GHC.Int.Int32,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1LoanBorrowParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1LoanBorrowParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1LoanBorrowParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1LoanBorrowParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCollateralAmount" Data.Aeson.Types.ToJSON..=)) (postSapiV1LoanBorrowParametersQueryCollateralAmount obj) : ["queryCollateralCoin" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQueryCollateralCoin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLoanAmount" Data.Aeson.Types.ToJSON..=)) (postSapiV1LoanBorrowParametersQueryLoanAmount obj) : ["queryLoanCoin" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQueryLoanCoin obj] : ["queryLoanTerm" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQueryLoanTerm obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1LoanBorrowParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCollateralAmount" Data.Aeson.Types.ToJSON..=)) (postSapiV1LoanBorrowParametersQueryCollateralAmount obj) : ["queryCollateralCoin" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQueryCollateralCoin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLoanAmount" Data.Aeson.Types.ToJSON..=)) (postSapiV1LoanBorrowParametersQueryLoanAmount obj) : ["queryLoanCoin" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQueryLoanCoin obj] : ["queryLoanTerm" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQueryLoanTerm obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1LoanBorrowParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1LoanBorrowParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1LoanBorrowParameters" (\obj -> (((((((GHC.Base.pure PostSapiV1LoanBorrowParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCollateralAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryCollateralCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLoanAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryLoanCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryLoanTerm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1LoanBorrowParameters' with all required fields.
mkPostSapiV1LoanBorrowParameters ::
  -- | 'postSapiV1LoanBorrowParametersQueryCollateralCoin'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LoanBorrowParametersQueryLoanCoin'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LoanBorrowParametersQueryLoanTerm'
  GHC.Int.Int32 ->
  -- | 'postSapiV1LoanBorrowParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LoanBorrowParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1LoanBorrowParameters
mkPostSapiV1LoanBorrowParameters postSapiV1LoanBorrowParametersQueryCollateralCoin postSapiV1LoanBorrowParametersQueryLoanCoin postSapiV1LoanBorrowParametersQueryLoanTerm postSapiV1LoanBorrowParametersQuerySignature postSapiV1LoanBorrowParametersQueryTimestamp =
  PostSapiV1LoanBorrowParameters
    { postSapiV1LoanBorrowParametersQueryCollateralAmount = GHC.Maybe.Nothing,
      postSapiV1LoanBorrowParametersQueryCollateralCoin = postSapiV1LoanBorrowParametersQueryCollateralCoin,
      postSapiV1LoanBorrowParametersQueryLoanAmount = GHC.Maybe.Nothing,
      postSapiV1LoanBorrowParametersQueryLoanCoin = postSapiV1LoanBorrowParametersQueryLoanCoin,
      postSapiV1LoanBorrowParametersQueryLoanTerm = postSapiV1LoanBorrowParametersQueryLoanTerm,
      postSapiV1LoanBorrowParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1LoanBorrowParametersQuerySignature = postSapiV1LoanBorrowParametersQuerySignature,
      postSapiV1LoanBorrowParametersQueryTimestamp = postSapiV1LoanBorrowParametersQueryTimestamp
    }

-- | Represents a response of the operation 'postSapiV1LoanBorrow'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1LoanBorrowResponseError' is used.
data PostSapiV1LoanBorrowResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1LoanBorrowResponseError GHC.Base.String
  | -- | Borrow Information
    PostSapiV1LoanBorrowResponse200 PostSapiV1LoanBorrowResponseBody200
  | -- | Bad Request
    PostSapiV1LoanBorrowResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1LoanBorrowResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/loan\/borrow.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1LoanBorrowResponseBody200 = PostSapiV1LoanBorrowResponseBody200
  { -- | collateralAmount
    postSapiV1LoanBorrowResponseBody200CollateralAmount :: Data.Text.Internal.Text,
    -- | collateralCoin
    postSapiV1LoanBorrowResponseBody200CollateralCoin :: Data.Text.Internal.Text,
    -- | hourlyInterestRate
    postSapiV1LoanBorrowResponseBody200HourlyInterestRate :: Data.Text.Internal.Text,
    -- | loanAmount
    postSapiV1LoanBorrowResponseBody200LoanAmount :: Data.Text.Internal.Text,
    -- | loanCoin
    postSapiV1LoanBorrowResponseBody200LoanCoin :: Data.Text.Internal.Text,
    -- | orderId
    postSapiV1LoanBorrowResponseBody200OrderId :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1LoanBorrowResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["collateralAmount" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200CollateralAmount obj] : ["collateralCoin" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200CollateralCoin obj] : ["hourlyInterestRate" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200HourlyInterestRate obj] : ["loanAmount" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200LoanAmount obj] : ["loanCoin" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200LoanCoin obj] : ["orderId" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200OrderId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["collateralAmount" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200CollateralAmount obj] : ["collateralCoin" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200CollateralCoin obj] : ["hourlyInterestRate" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200HourlyInterestRate obj] : ["loanAmount" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200LoanAmount obj] : ["loanCoin" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200LoanCoin obj] : ["orderId" Data.Aeson.Types.ToJSON..= postSapiV1LoanBorrowResponseBody200OrderId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1LoanBorrowResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1LoanBorrowResponseBody200" (\obj -> (((((GHC.Base.pure PostSapiV1LoanBorrowResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "collateralAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "collateralCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hourlyInterestRate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "loanAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "loanCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderId"))

-- | Create a new 'PostSapiV1LoanBorrowResponseBody200' with all required fields.
mkPostSapiV1LoanBorrowResponseBody200 ::
  -- | 'postSapiV1LoanBorrowResponseBody200CollateralAmount'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LoanBorrowResponseBody200CollateralCoin'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LoanBorrowResponseBody200HourlyInterestRate'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LoanBorrowResponseBody200LoanAmount'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LoanBorrowResponseBody200LoanCoin'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LoanBorrowResponseBody200OrderId'
  Data.Text.Internal.Text ->
  PostSapiV1LoanBorrowResponseBody200
mkPostSapiV1LoanBorrowResponseBody200 postSapiV1LoanBorrowResponseBody200CollateralAmount postSapiV1LoanBorrowResponseBody200CollateralCoin postSapiV1LoanBorrowResponseBody200HourlyInterestRate postSapiV1LoanBorrowResponseBody200LoanAmount postSapiV1LoanBorrowResponseBody200LoanCoin postSapiV1LoanBorrowResponseBody200OrderId =
  PostSapiV1LoanBorrowResponseBody200
    { postSapiV1LoanBorrowResponseBody200CollateralAmount = postSapiV1LoanBorrowResponseBody200CollateralAmount,
      postSapiV1LoanBorrowResponseBody200CollateralCoin = postSapiV1LoanBorrowResponseBody200CollateralCoin,
      postSapiV1LoanBorrowResponseBody200HourlyInterestRate = postSapiV1LoanBorrowResponseBody200HourlyInterestRate,
      postSapiV1LoanBorrowResponseBody200LoanAmount = postSapiV1LoanBorrowResponseBody200LoanAmount,
      postSapiV1LoanBorrowResponseBody200LoanCoin = postSapiV1LoanBorrowResponseBody200LoanCoin,
      postSapiV1LoanBorrowResponseBody200OrderId = postSapiV1LoanBorrowResponseBody200OrderId
    }

-- | > POST /sapi/v1/loan/borrow
--
-- The same as 'postSapiV1LoanBorrow' but accepts an explicit configuration.
postSapiV1LoanBorrowWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1LoanBorrowParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1LoanBorrowResponse)
postSapiV1LoanBorrowWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1LoanBorrowResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1LoanBorrowResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1LoanBorrowResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1LoanBorrowResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1LoanBorrowResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/loan/borrow")
          [ Binance.Common.QueryParameter (Data.Text.pack "loanCoin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryLoanCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "loanAmount") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryLoanAmount parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "collateralCoin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryCollateralCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "collateralAmount") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryCollateralAmount parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "loanTerm") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryLoanTerm parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/loan/borrow
--
-- The same as 'postSapiV1LoanBorrow' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1LoanBorrowRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1LoanBorrowParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1LoanBorrowRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/loan/borrow")
        [ Binance.Common.QueryParameter (Data.Text.pack "loanCoin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryLoanCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "loanAmount") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryLoanAmount parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "collateralCoin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryCollateralCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "collateralAmount") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryCollateralAmount parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "loanTerm") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryLoanTerm parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/loan/borrow
--
-- The same as 'postSapiV1LoanBorrow' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1LoanBorrowWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1LoanBorrowParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1LoanBorrowWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/loan/borrow")
          [ Binance.Common.QueryParameter (Data.Text.pack "loanCoin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryLoanCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "loanAmount") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryLoanAmount parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "collateralCoin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryCollateralCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "collateralAmount") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryCollateralAmount parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "loanTerm") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryLoanTerm parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LoanBorrowParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LoanBorrowParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
