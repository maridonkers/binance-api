{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MiningPaymentUid
module Binance.Operations.GetSapiV1MiningPaymentUid where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/mining/payment/uid
--
-- Weight(IP): 5
getSapiV1MiningPaymentUid ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPaymentUidParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MiningPaymentUidResponse)
getSapiV1MiningPaymentUid parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MiningPaymentUidResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPaymentUidResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1MiningPaymentUidResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPaymentUidResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPaymentUidResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/mining/payment/uid")
        [ Binance.Common.QueryParameter (Data.Text.pack "algo") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQueryAlgo parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryStartDate parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryEndDate parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "pageIndex") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryPageIndex parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/payment\/uid.GET.parameters@ in the specification.
data GetSapiV1MiningPaymentUidParameters = GetSapiV1MiningPaymentUidParameters
  { -- | queryAlgo: Represents the parameter named \'algo\'
    --
    -- Algorithm(sha256)
    getSapiV1MiningPaymentUidParametersQueryAlgo :: Data.Text.Internal.Text,
    -- | queryEndDate: Represents the parameter named \'endDate\'
    --
    -- Search date, millisecond timestamp, while empty query all
    getSapiV1MiningPaymentUidParametersQueryEndDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPageIndex: Represents the parameter named \'pageIndex\'
    --
    -- Page number, default is first page, start form 1
    getSapiV1MiningPaymentUidParametersQueryPageIndex :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryPageSize: Represents the parameter named \'pageSize\'
    --
    -- Number of pages, minimum 10, maximum 200
    getSapiV1MiningPaymentUidParametersQueryPageSize :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1MiningPaymentUidParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1MiningPaymentUidParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartDate: Represents the parameter named \'startDate\'
    --
    -- Search date, millisecond timestamp, while empty query all
    getSapiV1MiningPaymentUidParametersQueryStartDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1MiningPaymentUidParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPaymentUidParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAlgo" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidParametersQueryAlgo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndDate" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryEndDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPageIndex" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryPageIndex obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPageSize" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartDate" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryStartDate obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAlgo" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidParametersQueryAlgo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndDate" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryEndDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPageIndex" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryPageIndex obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPageSize" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartDate" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentUidParametersQueryStartDate obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPaymentUidParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPaymentUidParameters" (\obj -> (((((((GHC.Base.pure GetSapiV1MiningPaymentUidParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAlgo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPageIndex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPageSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1MiningPaymentUidParameters' with all required fields.
mkGetSapiV1MiningPaymentUidParameters ::
  -- | 'getSapiV1MiningPaymentUidParametersQueryAlgo'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPaymentUidParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPaymentUidParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1MiningPaymentUidParameters
mkGetSapiV1MiningPaymentUidParameters getSapiV1MiningPaymentUidParametersQueryAlgo getSapiV1MiningPaymentUidParametersQuerySignature getSapiV1MiningPaymentUidParametersQueryTimestamp =
  GetSapiV1MiningPaymentUidParameters
    { getSapiV1MiningPaymentUidParametersQueryAlgo = getSapiV1MiningPaymentUidParametersQueryAlgo,
      getSapiV1MiningPaymentUidParametersQueryEndDate = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentUidParametersQueryPageIndex = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentUidParametersQueryPageSize = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentUidParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentUidParametersQuerySignature = getSapiV1MiningPaymentUidParametersQuerySignature,
      getSapiV1MiningPaymentUidParametersQueryStartDate = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentUidParametersQueryTimestamp = getSapiV1MiningPaymentUidParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1MiningPaymentUid'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MiningPaymentUidResponseError' is used.
data GetSapiV1MiningPaymentUidResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MiningPaymentUidResponseError GHC.Base.String
  | -- | Mining account earnings
    GetSapiV1MiningPaymentUidResponse200 GetSapiV1MiningPaymentUidResponseBody200
  | -- | Bad Request
    GetSapiV1MiningPaymentUidResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1MiningPaymentUidResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/payment\/uid.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1MiningPaymentUidResponseBody200 = GetSapiV1MiningPaymentUidResponseBody200
  { -- | code
    getSapiV1MiningPaymentUidResponseBody200Code :: GHC.Int.Int32,
    -- | data
    getSapiV1MiningPaymentUidResponseBody200Data :: GetSapiV1MiningPaymentUidResponseBody200Data,
    -- | msg
    getSapiV1MiningPaymentUidResponseBody200Msg :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPaymentUidResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200Data obj] : ["msg" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200Msg obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200Data obj] : ["msg" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200Msg obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPaymentUidResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPaymentUidResponseBody200" (\obj -> ((GHC.Base.pure GetSapiV1MiningPaymentUidResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "msg"))

-- | Create a new 'GetSapiV1MiningPaymentUidResponseBody200' with all required fields.
mkGetSapiV1MiningPaymentUidResponseBody200 ::
  -- | 'getSapiV1MiningPaymentUidResponseBody200Code'
  GHC.Int.Int32 ->
  -- | 'getSapiV1MiningPaymentUidResponseBody200Data'
  GetSapiV1MiningPaymentUidResponseBody200Data ->
  -- | 'getSapiV1MiningPaymentUidResponseBody200Msg'
  Data.Text.Internal.Text ->
  GetSapiV1MiningPaymentUidResponseBody200
mkGetSapiV1MiningPaymentUidResponseBody200 getSapiV1MiningPaymentUidResponseBody200Code getSapiV1MiningPaymentUidResponseBody200Data getSapiV1MiningPaymentUidResponseBody200Msg =
  GetSapiV1MiningPaymentUidResponseBody200
    { getSapiV1MiningPaymentUidResponseBody200Code = getSapiV1MiningPaymentUidResponseBody200Code,
      getSapiV1MiningPaymentUidResponseBody200Data = getSapiV1MiningPaymentUidResponseBody200Data,
      getSapiV1MiningPaymentUidResponseBody200Msg = getSapiV1MiningPaymentUidResponseBody200Msg
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/payment\/uid.GET.responses.200.content.application\/json.schema.properties.data@ in the specification.
data GetSapiV1MiningPaymentUidResponseBody200Data = GetSapiV1MiningPaymentUidResponseBody200Data
  { -- | accountProfits
    getSapiV1MiningPaymentUidResponseBody200DataAccountProfits :: ([GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits]),
    -- | pageSize
    getSapiV1MiningPaymentUidResponseBody200DataPageSize :: GHC.Int.Int32,
    -- | totalNum
    getSapiV1MiningPaymentUidResponseBody200DataTotalNum :: GHC.Int.Int32
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPaymentUidResponseBody200Data where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["accountProfits" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfits obj] : ["pageSize" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataPageSize obj] : ["totalNum" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataTotalNum obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["accountProfits" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfits obj] : ["pageSize" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataPageSize obj] : ["totalNum" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataTotalNum obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPaymentUidResponseBody200Data where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPaymentUidResponseBody200Data" (\obj -> ((GHC.Base.pure GetSapiV1MiningPaymentUidResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "accountProfits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pageSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalNum"))

-- | Create a new 'GetSapiV1MiningPaymentUidResponseBody200Data' with all required fields.
mkGetSapiV1MiningPaymentUidResponseBody200Data ::
  -- | 'getSapiV1MiningPaymentUidResponseBody200DataAccountProfits'
  [GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits] ->
  -- | 'getSapiV1MiningPaymentUidResponseBody200DataPageSize'
  GHC.Int.Int32 ->
  -- | 'getSapiV1MiningPaymentUidResponseBody200DataTotalNum'
  GHC.Int.Int32 ->
  GetSapiV1MiningPaymentUidResponseBody200Data
mkGetSapiV1MiningPaymentUidResponseBody200Data getSapiV1MiningPaymentUidResponseBody200DataAccountProfits getSapiV1MiningPaymentUidResponseBody200DataPageSize getSapiV1MiningPaymentUidResponseBody200DataTotalNum =
  GetSapiV1MiningPaymentUidResponseBody200Data
    { getSapiV1MiningPaymentUidResponseBody200DataAccountProfits = getSapiV1MiningPaymentUidResponseBody200DataAccountProfits,
      getSapiV1MiningPaymentUidResponseBody200DataPageSize = getSapiV1MiningPaymentUidResponseBody200DataPageSize,
      getSapiV1MiningPaymentUidResponseBody200DataTotalNum = getSapiV1MiningPaymentUidResponseBody200DataTotalNum
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/payment\/uid.GET.responses.200.content.application\/json.schema.properties.data.properties.accountProfits.items@ in the specification.
data GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits = GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits
  { -- | amount
    getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsAmount :: GHC.Types.Double,
    -- | coinName
    getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsCoinName :: Data.Text.Internal.Text,
    -- | puid: puid
    getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsPuid :: GHC.Int.Int32,
    -- | subName: Mining account
    getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsSubName :: Data.Text.Internal.Text,
    -- | time
    getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsTime :: GHC.Int.Int64,
    -- | type: 0:Referral 1:Refund 2:Rebate
    getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsType :: GHC.Int.Int32
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsAmount obj] : ["coinName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsCoinName obj] : ["puid" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsPuid obj] : ["subName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsSubName obj] : ["time" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsTime obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsAmount obj] : ["coinName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsCoinName obj] : ["puid" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsPuid obj] : ["subName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsSubName obj] : ["time" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsTime obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits" (\obj -> (((((GHC.Base.pure GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "coinName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "puid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits' with all required fields.
mkGetSapiV1MiningPaymentUidResponseBody200DataAccountProfits ::
  -- | 'getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsAmount'
  GHC.Types.Double ->
  -- | 'getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsCoinName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsPuid'
  GHC.Int.Int32 ->
  -- | 'getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsSubName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsType'
  GHC.Int.Int32 ->
  GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits
mkGetSapiV1MiningPaymentUidResponseBody200DataAccountProfits getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsAmount getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsCoinName getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsPuid getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsSubName getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsTime getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsType =
  GetSapiV1MiningPaymentUidResponseBody200DataAccountProfits
    { getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsAmount = getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsAmount,
      getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsCoinName = getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsCoinName,
      getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsPuid = getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsPuid,
      getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsSubName = getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsSubName,
      getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsTime = getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsTime,
      getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsType = getSapiV1MiningPaymentUidResponseBody200DataAccountProfitsType
    }

-- | > GET /sapi/v1/mining/payment/uid
--
-- The same as 'getSapiV1MiningPaymentUid' but accepts an explicit configuration.
getSapiV1MiningPaymentUidWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPaymentUidParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MiningPaymentUidResponse)
getSapiV1MiningPaymentUidWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MiningPaymentUidResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPaymentUidResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1MiningPaymentUidResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPaymentUidResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPaymentUidResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/mining/payment/uid")
          [ Binance.Common.QueryParameter (Data.Text.pack "algo") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQueryAlgo parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryStartDate parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryEndDate parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "pageIndex") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryPageIndex parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/mining/payment/uid
--
-- The same as 'getSapiV1MiningPaymentUid' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MiningPaymentUidRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPaymentUidParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MiningPaymentUidRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/mining/payment/uid")
        [ Binance.Common.QueryParameter (Data.Text.pack "algo") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQueryAlgo parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryStartDate parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryEndDate parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "pageIndex") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryPageIndex parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/mining/payment/uid
--
-- The same as 'getSapiV1MiningPaymentUid' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MiningPaymentUidWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPaymentUidParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MiningPaymentUidWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/mining/payment/uid")
          [ Binance.Common.QueryParameter (Data.Text.pack "algo") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQueryAlgo parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryStartDate parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryEndDate parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "pageIndex") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryPageIndex parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentUidParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentUidParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
