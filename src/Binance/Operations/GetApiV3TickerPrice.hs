{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getApiV3TickerPrice
module Binance.Operations.GetApiV3TickerPrice where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /api/v3/ticker/price
--
-- Latest price for a symbol or symbols.
--
-- - If the symbol is not sent, prices for all symbols will be returned in an array.
--
-- Weight(IP):
-- - \`1\` for a single symbol;
-- - \`2\` when the symbol parameter is omitted;
getApiV3TickerPrice ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3TickerPriceParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetApiV3TickerPriceResponse)
getApiV3TickerPrice parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetApiV3TickerPriceResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3TickerPriceResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetApiV3TickerPriceResponseBody200Variants
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3TickerPriceResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/ticker/price")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerPriceParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerPriceParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/ticker\/price.GET.parameters@ in the specification.
data GetApiV3TickerPriceParameters = GetApiV3TickerPriceParameters
  { -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    getApiV3TickerPriceParametersQuerySymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySymbols: Represents the parameter named \'symbols\'
    getApiV3TickerPriceParametersQuerySymbols :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3TickerPriceParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (getApiV3TickerPriceParametersQuerySymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbols" Data.Aeson.Types.ToJSON..=)) (getApiV3TickerPriceParametersQuerySymbols obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (getApiV3TickerPriceParametersQuerySymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbols" Data.Aeson.Types.ToJSON..=)) (getApiV3TickerPriceParametersQuerySymbols obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3TickerPriceParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3TickerPriceParameters" (\obj -> (GHC.Base.pure GetApiV3TickerPriceParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySymbols"))

-- | Create a new 'GetApiV3TickerPriceParameters' with all required fields.
mkGetApiV3TickerPriceParameters :: GetApiV3TickerPriceParameters
mkGetApiV3TickerPriceParameters =
  GetApiV3TickerPriceParameters
    { getApiV3TickerPriceParametersQuerySymbol = GHC.Maybe.Nothing,
      getApiV3TickerPriceParametersQuerySymbols = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getApiV3TickerPrice'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApiV3TickerPriceResponseError' is used.
data GetApiV3TickerPriceResponse
  = -- | Means either no matching case available or a parse error
    GetApiV3TickerPriceResponseError GHC.Base.String
  | -- | Price ticker
    GetApiV3TickerPriceResponse200 GetApiV3TickerPriceResponseBody200Variants
  | -- | Bad Request
    GetApiV3TickerPriceResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the oneOf schema located at @paths.\/api\/v3\/ticker\/price.GET.responses.200.content.application\/json.schema.oneOf@ in the specification.
data GetApiV3TickerPriceResponseBody200Variants
  = GetApiV3TickerPriceResponseBody200Variant1 PriceTicker
  | GetApiV3TickerPriceResponseBody200Variant2 PriceTickerList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3TickerPriceResponseBody200Variants where
  toJSON (GetApiV3TickerPriceResponseBody200Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetApiV3TickerPriceResponseBody200Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3TickerPriceResponseBody200Variants where
  parseJSON val = case (GetApiV3TickerPriceResponseBody200Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetApiV3TickerPriceResponseBody200Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | > GET /api/v3/ticker/price
--
-- The same as 'getApiV3TickerPrice' but accepts an explicit configuration.
getApiV3TickerPriceWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3TickerPriceParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetApiV3TickerPriceResponse)
getApiV3TickerPriceWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetApiV3TickerPriceResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3TickerPriceResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetApiV3TickerPriceResponseBody200Variants
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3TickerPriceResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/ticker/price")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerPriceParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerPriceParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /api/v3/ticker/price
--
-- The same as 'getApiV3TickerPrice' but returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3TickerPriceRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3TickerPriceParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3TickerPriceRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/ticker/price")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerPriceParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerPriceParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /api/v3/ticker/price
--
-- The same as 'getApiV3TickerPrice' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3TickerPriceWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3TickerPriceParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3TickerPriceWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/ticker/price")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerPriceParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerPriceParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False
          ]
      )
