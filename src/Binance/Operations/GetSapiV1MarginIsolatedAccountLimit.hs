{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MarginIsolatedAccountLimit
module Binance.Operations.GetSapiV1MarginIsolatedAccountLimit where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/margin/isolated/accountLimit
--
-- Query enabled isolated margin account limit.
--
-- Weight(IP): 1
getSapiV1MarginIsolatedAccountLimit ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedAccountLimitParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MarginIsolatedAccountLimitResponse)
getSapiV1MarginIsolatedAccountLimit parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginIsolatedAccountLimitResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginIsolatedAccountLimitResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1MarginIsolatedAccountLimitResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginIsolatedAccountLimitResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginIsolatedAccountLimitResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/margin/isolated/accountLimit")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedAccountLimitParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAccountLimitParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/isolated\/accountLimit.GET.parameters@ in the specification.
data GetSapiV1MarginIsolatedAccountLimitParameters = GetSapiV1MarginIsolatedAccountLimitParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1MarginIsolatedAccountLimitParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1MarginIsolatedAccountLimitParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginIsolatedAccountLimitParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginIsolatedAccountLimitParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAccountLimitParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginIsolatedAccountLimitParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAccountLimitParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginIsolatedAccountLimitParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginIsolatedAccountLimitParameters" (\obj -> ((GHC.Base.pure GetSapiV1MarginIsolatedAccountLimitParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1MarginIsolatedAccountLimitParameters' with all required fields.
mkGetSapiV1MarginIsolatedAccountLimitParameters ::
  -- | 'getSapiV1MarginIsolatedAccountLimitParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1MarginIsolatedAccountLimitParameters
mkGetSapiV1MarginIsolatedAccountLimitParameters getSapiV1MarginIsolatedAccountLimitParametersQuerySignature getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp =
  GetSapiV1MarginIsolatedAccountLimitParameters
    { getSapiV1MarginIsolatedAccountLimitParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1MarginIsolatedAccountLimitParametersQuerySignature = getSapiV1MarginIsolatedAccountLimitParametersQuerySignature,
      getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp = getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1MarginIsolatedAccountLimit'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MarginIsolatedAccountLimitResponseError' is used.
data GetSapiV1MarginIsolatedAccountLimitResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MarginIsolatedAccountLimitResponseError GHC.Base.String
  | -- | Number of enabled Isolated Margin Account and its limit
    GetSapiV1MarginIsolatedAccountLimitResponse200 GetSapiV1MarginIsolatedAccountLimitResponseBody200
  | -- | Bad Request
    GetSapiV1MarginIsolatedAccountLimitResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1MarginIsolatedAccountLimitResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/isolated\/accountLimit.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1MarginIsolatedAccountLimitResponseBody200 = GetSapiV1MarginIsolatedAccountLimitResponseBody200
  { -- | enabledAccount
    getSapiV1MarginIsolatedAccountLimitResponseBody200EnabledAccount :: GHC.Int.Int64,
    -- | maxAccount
    getSapiV1MarginIsolatedAccountLimitResponseBody200MaxAccount :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginIsolatedAccountLimitResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["enabledAccount" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAccountLimitResponseBody200EnabledAccount obj] : ["maxAccount" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAccountLimitResponseBody200MaxAccount obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["enabledAccount" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAccountLimitResponseBody200EnabledAccount obj] : ["maxAccount" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedAccountLimitResponseBody200MaxAccount obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginIsolatedAccountLimitResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginIsolatedAccountLimitResponseBody200" (\obj -> (GHC.Base.pure GetSapiV1MarginIsolatedAccountLimitResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabledAccount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "maxAccount"))

-- | Create a new 'GetSapiV1MarginIsolatedAccountLimitResponseBody200' with all required fields.
mkGetSapiV1MarginIsolatedAccountLimitResponseBody200 ::
  -- | 'getSapiV1MarginIsolatedAccountLimitResponseBody200EnabledAccount'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MarginIsolatedAccountLimitResponseBody200MaxAccount'
  GHC.Int.Int64 ->
  GetSapiV1MarginIsolatedAccountLimitResponseBody200
mkGetSapiV1MarginIsolatedAccountLimitResponseBody200 getSapiV1MarginIsolatedAccountLimitResponseBody200EnabledAccount getSapiV1MarginIsolatedAccountLimitResponseBody200MaxAccount =
  GetSapiV1MarginIsolatedAccountLimitResponseBody200
    { getSapiV1MarginIsolatedAccountLimitResponseBody200EnabledAccount = getSapiV1MarginIsolatedAccountLimitResponseBody200EnabledAccount,
      getSapiV1MarginIsolatedAccountLimitResponseBody200MaxAccount = getSapiV1MarginIsolatedAccountLimitResponseBody200MaxAccount
    }

-- | > GET /sapi/v1/margin/isolated/accountLimit
--
-- The same as 'getSapiV1MarginIsolatedAccountLimit' but accepts an explicit configuration.
getSapiV1MarginIsolatedAccountLimitWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedAccountLimitParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MarginIsolatedAccountLimitResponse)
getSapiV1MarginIsolatedAccountLimitWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MarginIsolatedAccountLimitResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginIsolatedAccountLimitResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1MarginIsolatedAccountLimitResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginIsolatedAccountLimitResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginIsolatedAccountLimitResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/margin/isolated/accountLimit")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedAccountLimitParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAccountLimitParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/margin/isolated/accountLimit
--
-- The same as 'getSapiV1MarginIsolatedAccountLimit' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginIsolatedAccountLimitRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedAccountLimitParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginIsolatedAccountLimitRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/margin/isolated/accountLimit")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedAccountLimitParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAccountLimitParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/margin/isolated/accountLimit
--
-- The same as 'getSapiV1MarginIsolatedAccountLimit' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginIsolatedAccountLimitWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedAccountLimitParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginIsolatedAccountLimitWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/margin/isolated/accountLimit")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedAccountLimitParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAccountLimitParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedAccountLimitParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
