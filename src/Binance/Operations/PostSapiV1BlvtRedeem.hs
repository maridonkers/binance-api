{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1BlvtRedeem
module Binance.Operations.PostSapiV1BlvtRedeem where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/blvt/redeem
--
-- Weight(IP): 1
postSapiV1BlvtRedeem ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BlvtRedeemParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1BlvtRedeemResponse)
postSapiV1BlvtRedeem parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1BlvtRedeemResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BlvtRedeemResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1BlvtRedeemResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BlvtRedeemResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BlvtRedeemResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/blvt/redeem")
        [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryTokenName parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BlvtRedeemParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/blvt\/redeem.POST.parameters@ in the specification.
data PostSapiV1BlvtRedeemParameters = PostSapiV1BlvtRedeemParameters
  { -- | queryAmount: Represents the parameter named \'amount\'
    postSapiV1BlvtRedeemParametersQueryAmount :: GHC.Types.Double,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1BlvtRedeemParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1BlvtRedeemParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1BlvtRedeemParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryTokenName: Represents the parameter named \'tokenName\'
    --
    -- BTCDOWN, BTCUP
    postSapiV1BlvtRedeemParametersQueryTokenName :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BlvtRedeemParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemParametersQueryAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BlvtRedeemParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemParametersQueryTimestamp obj] : ["queryTokenName" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemParametersQueryTokenName obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemParametersQueryAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BlvtRedeemParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemParametersQueryTimestamp obj] : ["queryTokenName" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemParametersQueryTokenName obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BlvtRedeemParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BlvtRedeemParameters" (\obj -> ((((GHC.Base.pure PostSapiV1BlvtRedeemParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTokenName"))

-- | Create a new 'PostSapiV1BlvtRedeemParameters' with all required fields.
mkPostSapiV1BlvtRedeemParameters ::
  -- | 'postSapiV1BlvtRedeemParametersQueryAmount'
  GHC.Types.Double ->
  -- | 'postSapiV1BlvtRedeemParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BlvtRedeemParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'postSapiV1BlvtRedeemParametersQueryTokenName'
  Data.Text.Internal.Text ->
  PostSapiV1BlvtRedeemParameters
mkPostSapiV1BlvtRedeemParameters postSapiV1BlvtRedeemParametersQueryAmount postSapiV1BlvtRedeemParametersQuerySignature postSapiV1BlvtRedeemParametersQueryTimestamp postSapiV1BlvtRedeemParametersQueryTokenName =
  PostSapiV1BlvtRedeemParameters
    { postSapiV1BlvtRedeemParametersQueryAmount = postSapiV1BlvtRedeemParametersQueryAmount,
      postSapiV1BlvtRedeemParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1BlvtRedeemParametersQuerySignature = postSapiV1BlvtRedeemParametersQuerySignature,
      postSapiV1BlvtRedeemParametersQueryTimestamp = postSapiV1BlvtRedeemParametersQueryTimestamp,
      postSapiV1BlvtRedeemParametersQueryTokenName = postSapiV1BlvtRedeemParametersQueryTokenName
    }

-- | Represents a response of the operation 'postSapiV1BlvtRedeem'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1BlvtRedeemResponseError' is used.
data PostSapiV1BlvtRedeemResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1BlvtRedeemResponseError GHC.Base.String
  | -- | Redemption record
    PostSapiV1BlvtRedeemResponse200 PostSapiV1BlvtRedeemResponseBody200
  | -- | Bad Request
    PostSapiV1BlvtRedeemResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1BlvtRedeemResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/blvt\/redeem.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1BlvtRedeemResponseBody200 = PostSapiV1BlvtRedeemResponseBody200
  { -- | amount: Redemption value in usdt
    postSapiV1BlvtRedeemResponseBody200Amount :: Data.Text.Internal.Text,
    -- | id
    postSapiV1BlvtRedeemResponseBody200Id :: GHC.Types.Double,
    -- | redeemAmount: Redemption token amount
    postSapiV1BlvtRedeemResponseBody200RedeemAmount :: Data.Text.Internal.Text,
    -- | status: S, P, and F for \"success\", \"pending\", and \"failure\"
    postSapiV1BlvtRedeemResponseBody200Status :: Data.Text.Internal.Text,
    -- | timestamp
    postSapiV1BlvtRedeemResponseBody200Timestamp :: GHC.Int.Int64,
    -- | tokenName
    postSapiV1BlvtRedeemResponseBody200TokenName :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BlvtRedeemResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200Amount obj] : ["id" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200Id obj] : ["redeemAmount" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200RedeemAmount obj] : ["status" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200Status obj] : ["timestamp" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200Timestamp obj] : ["tokenName" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200TokenName obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200Amount obj] : ["id" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200Id obj] : ["redeemAmount" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200RedeemAmount obj] : ["status" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200Status obj] : ["timestamp" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200Timestamp obj] : ["tokenName" Data.Aeson.Types.ToJSON..= postSapiV1BlvtRedeemResponseBody200TokenName obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BlvtRedeemResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BlvtRedeemResponseBody200" (\obj -> (((((GHC.Base.pure PostSapiV1BlvtRedeemResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redeemAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokenName"))

-- | Create a new 'PostSapiV1BlvtRedeemResponseBody200' with all required fields.
mkPostSapiV1BlvtRedeemResponseBody200 ::
  -- | 'postSapiV1BlvtRedeemResponseBody200Amount'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BlvtRedeemResponseBody200Id'
  GHC.Types.Double ->
  -- | 'postSapiV1BlvtRedeemResponseBody200RedeemAmount'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BlvtRedeemResponseBody200Status'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BlvtRedeemResponseBody200Timestamp'
  GHC.Int.Int64 ->
  -- | 'postSapiV1BlvtRedeemResponseBody200TokenName'
  Data.Text.Internal.Text ->
  PostSapiV1BlvtRedeemResponseBody200
mkPostSapiV1BlvtRedeemResponseBody200 postSapiV1BlvtRedeemResponseBody200Amount postSapiV1BlvtRedeemResponseBody200Id postSapiV1BlvtRedeemResponseBody200RedeemAmount postSapiV1BlvtRedeemResponseBody200Status postSapiV1BlvtRedeemResponseBody200Timestamp postSapiV1BlvtRedeemResponseBody200TokenName =
  PostSapiV1BlvtRedeemResponseBody200
    { postSapiV1BlvtRedeemResponseBody200Amount = postSapiV1BlvtRedeemResponseBody200Amount,
      postSapiV1BlvtRedeemResponseBody200Id = postSapiV1BlvtRedeemResponseBody200Id,
      postSapiV1BlvtRedeemResponseBody200RedeemAmount = postSapiV1BlvtRedeemResponseBody200RedeemAmount,
      postSapiV1BlvtRedeemResponseBody200Status = postSapiV1BlvtRedeemResponseBody200Status,
      postSapiV1BlvtRedeemResponseBody200Timestamp = postSapiV1BlvtRedeemResponseBody200Timestamp,
      postSapiV1BlvtRedeemResponseBody200TokenName = postSapiV1BlvtRedeemResponseBody200TokenName
    }

-- | > POST /sapi/v1/blvt/redeem
--
-- The same as 'postSapiV1BlvtRedeem' but accepts an explicit configuration.
postSapiV1BlvtRedeemWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BlvtRedeemParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1BlvtRedeemResponse)
postSapiV1BlvtRedeemWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1BlvtRedeemResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BlvtRedeemResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1BlvtRedeemResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BlvtRedeemResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BlvtRedeemResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/blvt/redeem")
          [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryTokenName parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BlvtRedeemParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/blvt/redeem
--
-- The same as 'postSapiV1BlvtRedeem' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BlvtRedeemRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BlvtRedeemParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BlvtRedeemRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/blvt/redeem")
        [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryTokenName parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BlvtRedeemParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/blvt/redeem
--
-- The same as 'postSapiV1BlvtRedeem' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BlvtRedeemWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BlvtRedeemParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BlvtRedeemWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/blvt/redeem")
          [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryTokenName parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BlvtRedeemParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BlvtRedeemParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
