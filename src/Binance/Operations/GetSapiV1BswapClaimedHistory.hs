{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BswapClaimedHistory
module Binance.Operations.GetSapiV1BswapClaimedHistory where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/bswap/claimedHistory
--
-- Get history of claimed rewards.
--
-- Weight(UID): 1000
getSapiV1BswapClaimedHistory ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapClaimedHistoryParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BswapClaimedHistoryResponse)
getSapiV1BswapClaimedHistory parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BswapClaimedHistoryResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapClaimedHistoryResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1BswapClaimedHistoryResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapClaimedHistoryResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapClaimedHistoryResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/claimedHistory")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "assetRewards") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryAssetRewards parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapClaimedHistoryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapClaimedHistoryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/claimedHistory.GET.parameters@ in the specification.
data GetSapiV1BswapClaimedHistoryParameters = GetSapiV1BswapClaimedHistoryParameters
  { -- | queryAssetRewards: Represents the parameter named \'assetRewards\'
    getSapiV1BswapClaimedHistoryParametersQueryAssetRewards :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapClaimedHistoryParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- Default 3, max 100
    getSapiV1BswapClaimedHistoryParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryPoolId: Represents the parameter named \'poolId\'
    getSapiV1BswapClaimedHistoryParametersQueryPoolId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1BswapClaimedHistoryParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1BswapClaimedHistoryParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapClaimedHistoryParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapClaimedHistoryParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryType: Represents the parameter named \'type\'
    --
    -- 0: Swap rewards, 1: Liquidity rewards, default to 0
    getSapiV1BswapClaimedHistoryParametersQueryType :: (GHC.Maybe.Maybe GHC.Int.Int32)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapClaimedHistoryParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAssetRewards" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryAssetRewards obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPoolId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryPoolId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAssetRewards" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryAssetRewards obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPoolId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryPoolId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapClaimedHistoryParametersQueryType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapClaimedHistoryParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapClaimedHistoryParameters" (\obj -> ((((((((GHC.Base.pure GetSapiV1BswapClaimedHistoryParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAssetRewards")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPoolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryType"))

-- | Create a new 'GetSapiV1BswapClaimedHistoryParameters' with all required fields.
mkGetSapiV1BswapClaimedHistoryParameters ::
  -- | 'getSapiV1BswapClaimedHistoryParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapClaimedHistoryParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1BswapClaimedHistoryParameters
mkGetSapiV1BswapClaimedHistoryParameters getSapiV1BswapClaimedHistoryParametersQuerySignature getSapiV1BswapClaimedHistoryParametersQueryTimestamp =
  GetSapiV1BswapClaimedHistoryParameters
    { getSapiV1BswapClaimedHistoryParametersQueryAssetRewards = GHC.Maybe.Nothing,
      getSapiV1BswapClaimedHistoryParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1BswapClaimedHistoryParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1BswapClaimedHistoryParametersQueryPoolId = GHC.Maybe.Nothing,
      getSapiV1BswapClaimedHistoryParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1BswapClaimedHistoryParametersQuerySignature = getSapiV1BswapClaimedHistoryParametersQuerySignature,
      getSapiV1BswapClaimedHistoryParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1BswapClaimedHistoryParametersQueryTimestamp = getSapiV1BswapClaimedHistoryParametersQueryTimestamp,
      getSapiV1BswapClaimedHistoryParametersQueryType = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getSapiV1BswapClaimedHistory'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BswapClaimedHistoryResponseError' is used.
data GetSapiV1BswapClaimedHistoryResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BswapClaimedHistoryResponseError GHC.Base.String
  | -- | Claimed History
    GetSapiV1BswapClaimedHistoryResponse200 ([GetSapiV1BswapClaimedHistoryResponseBody200])
  | -- | Bad Request
    GetSapiV1BswapClaimedHistoryResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1BswapClaimedHistoryResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/claimedHistory.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1BswapClaimedHistoryResponseBody200 = GetSapiV1BswapClaimedHistoryResponseBody200
  { -- | assetRewards
    getSapiV1BswapClaimedHistoryResponseBody200AssetRewards :: Data.Text.Internal.Text,
    -- | claimAmount
    getSapiV1BswapClaimedHistoryResponseBody200ClaimAmount :: GHC.Types.Float,
    -- | claimTime
    getSapiV1BswapClaimedHistoryResponseBody200ClaimTime :: GHC.Int.Int64,
    -- | poolId
    getSapiV1BswapClaimedHistoryResponseBody200PoolId :: GHC.Int.Int32,
    -- | poolName
    getSapiV1BswapClaimedHistoryResponseBody200PoolName :: Data.Text.Internal.Text,
    -- | status: 0: pending, 1: success
    getSapiV1BswapClaimedHistoryResponseBody200Status :: GHC.Int.Int32
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapClaimedHistoryResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assetRewards" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200AssetRewards obj] : ["claimAmount" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200ClaimAmount obj] : ["claimTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200ClaimTime obj] : ["poolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200PoolId obj] : ["poolName" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200PoolName obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200Status obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assetRewards" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200AssetRewards obj] : ["claimAmount" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200ClaimAmount obj] : ["claimTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200ClaimTime obj] : ["poolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200PoolId obj] : ["poolName" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200PoolName obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1BswapClaimedHistoryResponseBody200Status obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapClaimedHistoryResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapClaimedHistoryResponseBody200" (\obj -> (((((GHC.Base.pure GetSapiV1BswapClaimedHistoryResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assetRewards")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "claimAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "claimTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Create a new 'GetSapiV1BswapClaimedHistoryResponseBody200' with all required fields.
mkGetSapiV1BswapClaimedHistoryResponseBody200 ::
  -- | 'getSapiV1BswapClaimedHistoryResponseBody200AssetRewards'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapClaimedHistoryResponseBody200ClaimAmount'
  GHC.Types.Float ->
  -- | 'getSapiV1BswapClaimedHistoryResponseBody200ClaimTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapClaimedHistoryResponseBody200PoolId'
  GHC.Int.Int32 ->
  -- | 'getSapiV1BswapClaimedHistoryResponseBody200PoolName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapClaimedHistoryResponseBody200Status'
  GHC.Int.Int32 ->
  GetSapiV1BswapClaimedHistoryResponseBody200
mkGetSapiV1BswapClaimedHistoryResponseBody200 getSapiV1BswapClaimedHistoryResponseBody200AssetRewards getSapiV1BswapClaimedHistoryResponseBody200ClaimAmount getSapiV1BswapClaimedHistoryResponseBody200ClaimTime getSapiV1BswapClaimedHistoryResponseBody200PoolId getSapiV1BswapClaimedHistoryResponseBody200PoolName getSapiV1BswapClaimedHistoryResponseBody200Status =
  GetSapiV1BswapClaimedHistoryResponseBody200
    { getSapiV1BswapClaimedHistoryResponseBody200AssetRewards = getSapiV1BswapClaimedHistoryResponseBody200AssetRewards,
      getSapiV1BswapClaimedHistoryResponseBody200ClaimAmount = getSapiV1BswapClaimedHistoryResponseBody200ClaimAmount,
      getSapiV1BswapClaimedHistoryResponseBody200ClaimTime = getSapiV1BswapClaimedHistoryResponseBody200ClaimTime,
      getSapiV1BswapClaimedHistoryResponseBody200PoolId = getSapiV1BswapClaimedHistoryResponseBody200PoolId,
      getSapiV1BswapClaimedHistoryResponseBody200PoolName = getSapiV1BswapClaimedHistoryResponseBody200PoolName,
      getSapiV1BswapClaimedHistoryResponseBody200Status = getSapiV1BswapClaimedHistoryResponseBody200Status
    }

-- | > GET /sapi/v1/bswap/claimedHistory
--
-- The same as 'getSapiV1BswapClaimedHistory' but accepts an explicit configuration.
getSapiV1BswapClaimedHistoryWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapClaimedHistoryParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BswapClaimedHistoryResponse)
getSapiV1BswapClaimedHistoryWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BswapClaimedHistoryResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapClaimedHistoryResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1BswapClaimedHistoryResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapClaimedHistoryResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapClaimedHistoryResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/claimedHistory")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "assetRewards") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryAssetRewards parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapClaimedHistoryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapClaimedHistoryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/bswap/claimedHistory
--
-- The same as 'getSapiV1BswapClaimedHistory' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapClaimedHistoryRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapClaimedHistoryParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapClaimedHistoryRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/claimedHistory")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "assetRewards") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryAssetRewards parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapClaimedHistoryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapClaimedHistoryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/bswap/claimedHistory
--
-- The same as 'getSapiV1BswapClaimedHistory' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapClaimedHistoryWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapClaimedHistoryParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapClaimedHistoryWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/claimedHistory")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "assetRewards") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryAssetRewards parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapClaimedHistoryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapClaimedHistoryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapClaimedHistoryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
