{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MarginAsset
module Binance.Operations.GetSapiV1MarginAsset where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/margin/asset
--
-- Weight(IP): 10
getSapiV1MarginAsset ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | asset
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MarginAssetResponse)
getSapiV1MarginAsset asset =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginAssetResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAssetResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1MarginAssetResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginAssetResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/asset") [Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON asset) (Data.Text.pack "form") GHC.Types.False])

-- | Represents a response of the operation 'getSapiV1MarginAsset'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MarginAssetResponseError' is used.
data GetSapiV1MarginAssetResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MarginAssetResponseError GHC.Base.String
  | -- | Asset details
    GetSapiV1MarginAssetResponse200 GetSapiV1MarginAssetResponseBody200
  | -- | Bad Request
    GetSapiV1MarginAssetResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/asset.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1MarginAssetResponseBody200 = GetSapiV1MarginAssetResponseBody200
  { -- | assetFullName
    getSapiV1MarginAssetResponseBody200AssetFullName :: Data.Text.Internal.Text,
    -- | assetName
    getSapiV1MarginAssetResponseBody200AssetName :: Data.Text.Internal.Text,
    -- | isBorrowable
    getSapiV1MarginAssetResponseBody200IsBorrowable :: GHC.Types.Bool,
    -- | isMortgageable
    getSapiV1MarginAssetResponseBody200IsMortgageable :: GHC.Types.Bool,
    -- | userMinBorrow
    getSapiV1MarginAssetResponseBody200UserMinBorrow :: Data.Text.Internal.Text,
    -- | userMinRepay
    getSapiV1MarginAssetResponseBody200UserMinRepay :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginAssetResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assetFullName" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200AssetFullName obj] : ["assetName" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200AssetName obj] : ["isBorrowable" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200IsBorrowable obj] : ["isMortgageable" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200IsMortgageable obj] : ["userMinBorrow" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200UserMinBorrow obj] : ["userMinRepay" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200UserMinRepay obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assetFullName" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200AssetFullName obj] : ["assetName" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200AssetName obj] : ["isBorrowable" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200IsBorrowable obj] : ["isMortgageable" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200IsMortgageable obj] : ["userMinBorrow" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200UserMinBorrow obj] : ["userMinRepay" Data.Aeson.Types.ToJSON..= getSapiV1MarginAssetResponseBody200UserMinRepay obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginAssetResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginAssetResponseBody200" (\obj -> (((((GHC.Base.pure GetSapiV1MarginAssetResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assetFullName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assetName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBorrowable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMortgageable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "userMinBorrow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "userMinRepay"))

-- | Create a new 'GetSapiV1MarginAssetResponseBody200' with all required fields.
mkGetSapiV1MarginAssetResponseBody200 ::
  -- | 'getSapiV1MarginAssetResponseBody200AssetFullName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginAssetResponseBody200AssetName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginAssetResponseBody200IsBorrowable'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginAssetResponseBody200IsMortgageable'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginAssetResponseBody200UserMinBorrow'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginAssetResponseBody200UserMinRepay'
  Data.Text.Internal.Text ->
  GetSapiV1MarginAssetResponseBody200
mkGetSapiV1MarginAssetResponseBody200 getSapiV1MarginAssetResponseBody200AssetFullName getSapiV1MarginAssetResponseBody200AssetName getSapiV1MarginAssetResponseBody200IsBorrowable getSapiV1MarginAssetResponseBody200IsMortgageable getSapiV1MarginAssetResponseBody200UserMinBorrow getSapiV1MarginAssetResponseBody200UserMinRepay =
  GetSapiV1MarginAssetResponseBody200
    { getSapiV1MarginAssetResponseBody200AssetFullName = getSapiV1MarginAssetResponseBody200AssetFullName,
      getSapiV1MarginAssetResponseBody200AssetName = getSapiV1MarginAssetResponseBody200AssetName,
      getSapiV1MarginAssetResponseBody200IsBorrowable = getSapiV1MarginAssetResponseBody200IsBorrowable,
      getSapiV1MarginAssetResponseBody200IsMortgageable = getSapiV1MarginAssetResponseBody200IsMortgageable,
      getSapiV1MarginAssetResponseBody200UserMinBorrow = getSapiV1MarginAssetResponseBody200UserMinBorrow,
      getSapiV1MarginAssetResponseBody200UserMinRepay = getSapiV1MarginAssetResponseBody200UserMinRepay
    }

-- | > GET /sapi/v1/margin/asset
--
-- The same as 'getSapiV1MarginAsset' but accepts an explicit configuration.
getSapiV1MarginAssetWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | asset
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MarginAssetResponse)
getSapiV1MarginAssetWithConfiguration
  config
  asset =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MarginAssetResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginAssetResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1MarginAssetResponseBody200
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginAssetResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/asset") [Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON asset) (Data.Text.pack "form") GHC.Types.False])

-- | > GET /sapi/v1/margin/asset
--
-- The same as 'getSapiV1MarginAsset' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginAssetRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | asset
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginAssetRaw asset = GHC.Base.id (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/asset") [Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON asset) (Data.Text.pack "form") GHC.Types.False])

-- | > GET /sapi/v1/margin/asset
--
-- The same as 'getSapiV1MarginAsset' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginAssetWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | asset
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginAssetWithConfigurationRaw
  config
  asset = GHC.Base.id (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/asset") [Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON asset) (Data.Text.pack "form") GHC.Types.False])
