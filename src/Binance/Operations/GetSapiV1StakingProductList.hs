{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1StakingProductList
module Binance.Operations.GetSapiV1StakingProductList where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/staking/productList
--
-- Get available Staking product list.
--
-- Weight(IP): 1
getSapiV1StakingProductList ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingProductListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1StakingProductListResponse)
getSapiV1StakingProductList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1StakingProductListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingProductListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1StakingProductListResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingProductListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingProductListResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/staking/productList")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/productList.GET.parameters@ in the specification.
data GetSapiV1StakingProductListParameters = GetSapiV1StakingProductListParameters
  { -- | queryAsset: Represents the parameter named \'asset\'
    getSapiV1StakingProductListParametersQueryAsset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryCurrent: Represents the parameter named \'current\'
    --
    -- Current querying page. Start from 1. Default:1
    getSapiV1StakingProductListParametersQueryCurrent :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryProduct: Represents the parameter named \'product\'
    --
    -- * \`STAKING\` - for Locked Staking
    -- * \`F_DEFI\` - for flexible DeFi Staking
    -- * \`L_DEFI\` - for locked DeFi Staking
    getSapiV1StakingProductListParametersQueryProduct :: Data.Text.Internal.Text,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1StakingProductListParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1StakingProductListParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySize: Represents the parameter named \'size\'
    --
    -- Default:10 Max:100
    getSapiV1StakingProductListParametersQuerySize :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1StakingProductListParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingProductListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingProductListParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCurrent" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingProductListParametersQueryCurrent obj) : ["queryProduct" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListParametersQueryProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingProductListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySize" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingProductListParametersQuerySize obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingProductListParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCurrent" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingProductListParametersQueryCurrent obj) : ["queryProduct" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListParametersQueryProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingProductListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySize" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingProductListParametersQuerySize obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingProductListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingProductListParameters" (\obj -> ((((((GHC.Base.pure GetSapiV1StakingProductListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCurrent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1StakingProductListParameters' with all required fields.
mkGetSapiV1StakingProductListParameters ::
  -- | 'getSapiV1StakingProductListParametersQueryProduct'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingProductListParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingProductListParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1StakingProductListParameters
mkGetSapiV1StakingProductListParameters getSapiV1StakingProductListParametersQueryProduct getSapiV1StakingProductListParametersQuerySignature getSapiV1StakingProductListParametersQueryTimestamp =
  GetSapiV1StakingProductListParameters
    { getSapiV1StakingProductListParametersQueryAsset = GHC.Maybe.Nothing,
      getSapiV1StakingProductListParametersQueryCurrent = GHC.Maybe.Nothing,
      getSapiV1StakingProductListParametersQueryProduct = getSapiV1StakingProductListParametersQueryProduct,
      getSapiV1StakingProductListParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1StakingProductListParametersQuerySignature = getSapiV1StakingProductListParametersQuerySignature,
      getSapiV1StakingProductListParametersQuerySize = GHC.Maybe.Nothing,
      getSapiV1StakingProductListParametersQueryTimestamp = getSapiV1StakingProductListParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1StakingProductList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1StakingProductListResponseError' is used.
data GetSapiV1StakingProductListResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1StakingProductListResponseError GHC.Base.String
  | -- | Product list.
    GetSapiV1StakingProductListResponse200 ([GetSapiV1StakingProductListResponseBody200])
  | -- | Bad Request
    GetSapiV1StakingProductListResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1StakingProductListResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/productList.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1StakingProductListResponseBody200 = GetSapiV1StakingProductListResponseBody200
  { -- | detail
    getSapiV1StakingProductListResponseBody200Detail :: GetSapiV1StakingProductListResponseBody200Detail,
    -- | projectId
    getSapiV1StakingProductListResponseBody200ProjectId :: Data.Text.Internal.Text,
    -- | quota
    getSapiV1StakingProductListResponseBody200Quota :: GetSapiV1StakingProductListResponseBody200Quota
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingProductListResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["detail" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200Detail obj] : ["projectId" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200ProjectId obj] : ["quota" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200Quota obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["detail" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200Detail obj] : ["projectId" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200ProjectId obj] : ["quota" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200Quota obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingProductListResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingProductListResponseBody200" (\obj -> ((GHC.Base.pure GetSapiV1StakingProductListResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "detail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "projectId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quota"))

-- | Create a new 'GetSapiV1StakingProductListResponseBody200' with all required fields.
mkGetSapiV1StakingProductListResponseBody200 ::
  -- | 'getSapiV1StakingProductListResponseBody200Detail'
  GetSapiV1StakingProductListResponseBody200Detail ->
  -- | 'getSapiV1StakingProductListResponseBody200ProjectId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingProductListResponseBody200Quota'
  GetSapiV1StakingProductListResponseBody200Quota ->
  GetSapiV1StakingProductListResponseBody200
mkGetSapiV1StakingProductListResponseBody200 getSapiV1StakingProductListResponseBody200Detail getSapiV1StakingProductListResponseBody200ProjectId getSapiV1StakingProductListResponseBody200Quota =
  GetSapiV1StakingProductListResponseBody200
    { getSapiV1StakingProductListResponseBody200Detail = getSapiV1StakingProductListResponseBody200Detail,
      getSapiV1StakingProductListResponseBody200ProjectId = getSapiV1StakingProductListResponseBody200ProjectId,
      getSapiV1StakingProductListResponseBody200Quota = getSapiV1StakingProductListResponseBody200Quota
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/productList.GET.responses.200.content.application\/json.schema.items.properties.detail@ in the specification.
data GetSapiV1StakingProductListResponseBody200Detail = GetSapiV1StakingProductListResponseBody200Detail
  { -- | apy
    getSapiV1StakingProductListResponseBody200DetailApy :: Data.Text.Internal.Text,
    -- | asset
    getSapiV1StakingProductListResponseBody200DetailAsset :: Data.Text.Internal.Text,
    -- | duration
    getSapiV1StakingProductListResponseBody200DetailDuration :: GHC.Int.Int64,
    -- | renewable
    getSapiV1StakingProductListResponseBody200DetailRenewable :: GHC.Types.Bool,
    -- | rewardAsset
    getSapiV1StakingProductListResponseBody200DetailRewardAsset :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingProductListResponseBody200Detail where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["apy" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailApy obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailAsset obj] : ["duration" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailDuration obj] : ["renewable" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailRenewable obj] : ["rewardAsset" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailRewardAsset obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["apy" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailApy obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailAsset obj] : ["duration" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailDuration obj] : ["renewable" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailRenewable obj] : ["rewardAsset" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200DetailRewardAsset obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingProductListResponseBody200Detail where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingProductListResponseBody200Detail" (\obj -> ((((GHC.Base.pure GetSapiV1StakingProductListResponseBody200Detail GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "apy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "duration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "renewable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rewardAsset"))

-- | Create a new 'GetSapiV1StakingProductListResponseBody200Detail' with all required fields.
mkGetSapiV1StakingProductListResponseBody200Detail ::
  -- | 'getSapiV1StakingProductListResponseBody200DetailApy'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingProductListResponseBody200DetailAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingProductListResponseBody200DetailDuration'
  GHC.Int.Int64 ->
  -- | 'getSapiV1StakingProductListResponseBody200DetailRenewable'
  GHC.Types.Bool ->
  -- | 'getSapiV1StakingProductListResponseBody200DetailRewardAsset'
  Data.Text.Internal.Text ->
  GetSapiV1StakingProductListResponseBody200Detail
mkGetSapiV1StakingProductListResponseBody200Detail getSapiV1StakingProductListResponseBody200DetailApy getSapiV1StakingProductListResponseBody200DetailAsset getSapiV1StakingProductListResponseBody200DetailDuration getSapiV1StakingProductListResponseBody200DetailRenewable getSapiV1StakingProductListResponseBody200DetailRewardAsset =
  GetSapiV1StakingProductListResponseBody200Detail
    { getSapiV1StakingProductListResponseBody200DetailApy = getSapiV1StakingProductListResponseBody200DetailApy,
      getSapiV1StakingProductListResponseBody200DetailAsset = getSapiV1StakingProductListResponseBody200DetailAsset,
      getSapiV1StakingProductListResponseBody200DetailDuration = getSapiV1StakingProductListResponseBody200DetailDuration,
      getSapiV1StakingProductListResponseBody200DetailRenewable = getSapiV1StakingProductListResponseBody200DetailRenewable,
      getSapiV1StakingProductListResponseBody200DetailRewardAsset = getSapiV1StakingProductListResponseBody200DetailRewardAsset
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/productList.GET.responses.200.content.application\/json.schema.items.properties.quota@ in the specification.
data GetSapiV1StakingProductListResponseBody200Quota = GetSapiV1StakingProductListResponseBody200Quota
  { -- | minimum
    getSapiV1StakingProductListResponseBody200QuotaMinimum :: Data.Text.Internal.Text,
    -- | totalPersonalQuota
    getSapiV1StakingProductListResponseBody200QuotaTotalPersonalQuota :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingProductListResponseBody200Quota where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["minimum" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200QuotaMinimum obj] : ["totalPersonalQuota" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200QuotaTotalPersonalQuota obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["minimum" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200QuotaMinimum obj] : ["totalPersonalQuota" Data.Aeson.Types.ToJSON..= getSapiV1StakingProductListResponseBody200QuotaTotalPersonalQuota obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingProductListResponseBody200Quota where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingProductListResponseBody200Quota" (\obj -> (GHC.Base.pure GetSapiV1StakingProductListResponseBody200Quota GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "minimum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalPersonalQuota"))

-- | Create a new 'GetSapiV1StakingProductListResponseBody200Quota' with all required fields.
mkGetSapiV1StakingProductListResponseBody200Quota ::
  -- | 'getSapiV1StakingProductListResponseBody200QuotaMinimum'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingProductListResponseBody200QuotaTotalPersonalQuota'
  Data.Text.Internal.Text ->
  GetSapiV1StakingProductListResponseBody200Quota
mkGetSapiV1StakingProductListResponseBody200Quota getSapiV1StakingProductListResponseBody200QuotaMinimum getSapiV1StakingProductListResponseBody200QuotaTotalPersonalQuota =
  GetSapiV1StakingProductListResponseBody200Quota
    { getSapiV1StakingProductListResponseBody200QuotaMinimum = getSapiV1StakingProductListResponseBody200QuotaMinimum,
      getSapiV1StakingProductListResponseBody200QuotaTotalPersonalQuota = getSapiV1StakingProductListResponseBody200QuotaTotalPersonalQuota
    }

-- | > GET /sapi/v1/staking/productList
--
-- The same as 'getSapiV1StakingProductList' but accepts an explicit configuration.
getSapiV1StakingProductListWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingProductListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1StakingProductListResponse)
getSapiV1StakingProductListWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1StakingProductListResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingProductListResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1StakingProductListResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingProductListResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingProductListResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/staking/productList")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/staking/productList
--
-- The same as 'getSapiV1StakingProductList' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1StakingProductListRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingProductListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1StakingProductListRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/staking/productList")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/staking/productList
--
-- The same as 'getSapiV1StakingProductList' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1StakingProductListWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingProductListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1StakingProductListWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/staking/productList")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingProductListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingProductListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
