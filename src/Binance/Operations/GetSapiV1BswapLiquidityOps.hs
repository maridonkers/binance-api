{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BswapLiquidityOps
module Binance.Operations.GetSapiV1BswapLiquidityOps where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/bswap/liquidityOps
--
-- Get liquidity operation (add\/remove) records.
--
-- Weight(UID): 3000
getSapiV1BswapLiquidityOps ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapLiquidityOpsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BswapLiquidityOpsResponse)
getSapiV1BswapLiquidityOps parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BswapLiquidityOpsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapLiquidityOpsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1BswapLiquidityOpsResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapLiquidityOpsResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapLiquidityOpsResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/liquidityOps")
        [ Binance.Common.QueryParameter (Data.Text.pack "operationId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryOperationId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "operation") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryOperation parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityOpsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityOpsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidityOps.GET.parameters@ in the specification.
data GetSapiV1BswapLiquidityOpsParameters = GetSapiV1BswapLiquidityOpsParameters
  { -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapLiquidityOpsParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- Default 500; max 1000.
    getSapiV1BswapLiquidityOpsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryOperation: Represents the parameter named \'operation\'
    getSapiV1BswapLiquidityOpsParametersQueryOperation :: (GHC.Maybe.Maybe GetSapiV1BswapLiquidityOpsParametersQueryOperation),
    -- | queryOperationId: Represents the parameter named \'operationId\'
    getSapiV1BswapLiquidityOpsParametersQueryOperationId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryPoolId: Represents the parameter named \'poolId\'
    getSapiV1BswapLiquidityOpsParametersQueryPoolId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1BswapLiquidityOpsParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1BswapLiquidityOpsParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapLiquidityOpsParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapLiquidityOpsParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapLiquidityOpsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOperation" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryOperation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOperationId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryOperationId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPoolId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryPoolId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOperation" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryOperation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOperationId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryOperationId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPoolId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryPoolId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityOpsParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapLiquidityOpsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapLiquidityOpsParameters" (\obj -> ((((((((GHC.Base.pure GetSapiV1BswapLiquidityOpsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOperation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOperationId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPoolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1BswapLiquidityOpsParameters' with all required fields.
mkGetSapiV1BswapLiquidityOpsParameters ::
  -- | 'getSapiV1BswapLiquidityOpsParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapLiquidityOpsParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1BswapLiquidityOpsParameters
mkGetSapiV1BswapLiquidityOpsParameters getSapiV1BswapLiquidityOpsParametersQuerySignature getSapiV1BswapLiquidityOpsParametersQueryTimestamp =
  GetSapiV1BswapLiquidityOpsParameters
    { getSapiV1BswapLiquidityOpsParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1BswapLiquidityOpsParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1BswapLiquidityOpsParametersQueryOperation = GHC.Maybe.Nothing,
      getSapiV1BswapLiquidityOpsParametersQueryOperationId = GHC.Maybe.Nothing,
      getSapiV1BswapLiquidityOpsParametersQueryPoolId = GHC.Maybe.Nothing,
      getSapiV1BswapLiquidityOpsParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1BswapLiquidityOpsParametersQuerySignature = getSapiV1BswapLiquidityOpsParametersQuerySignature,
      getSapiV1BswapLiquidityOpsParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1BswapLiquidityOpsParametersQueryTimestamp = getSapiV1BswapLiquidityOpsParametersQueryTimestamp
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/bswap\/liquidityOps.GET.parameters.properties.queryOperation@ in the specification.
--
-- Represents the parameter named \'operation\'
data GetSapiV1BswapLiquidityOpsParametersQueryOperation
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetSapiV1BswapLiquidityOpsParametersQueryOperationOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetSapiV1BswapLiquidityOpsParametersQueryOperationTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"ADD"@
    GetSapiV1BswapLiquidityOpsParametersQueryOperationEnumADD
  | -- | Represents the JSON value @"REMOVE"@
    GetSapiV1BswapLiquidityOpsParametersQueryOperationEnumREMOVE
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapLiquidityOpsParametersQueryOperation where
  toJSON (GetSapiV1BswapLiquidityOpsParametersQueryOperationOther val) = val
  toJSON (GetSapiV1BswapLiquidityOpsParametersQueryOperationTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetSapiV1BswapLiquidityOpsParametersQueryOperationEnumADD) = "ADD"
  toJSON (GetSapiV1BswapLiquidityOpsParametersQueryOperationEnumREMOVE) = "REMOVE"

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapLiquidityOpsParametersQueryOperation where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ADD" -> GetSapiV1BswapLiquidityOpsParametersQueryOperationEnumADD
            | val GHC.Classes.== "REMOVE" -> GetSapiV1BswapLiquidityOpsParametersQueryOperationEnumREMOVE
            | GHC.Base.otherwise -> GetSapiV1BswapLiquidityOpsParametersQueryOperationOther val
      )

-- | Represents a response of the operation 'getSapiV1BswapLiquidityOps'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BswapLiquidityOpsResponseError' is used.
data GetSapiV1BswapLiquidityOpsResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BswapLiquidityOpsResponseError GHC.Base.String
  | -- | Liquidity Operation Record
    GetSapiV1BswapLiquidityOpsResponse200 ([GetSapiV1BswapLiquidityOpsResponseBody200])
  | -- | Bad Request
    GetSapiV1BswapLiquidityOpsResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1BswapLiquidityOpsResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidityOps.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1BswapLiquidityOpsResponseBody200 = GetSapiV1BswapLiquidityOpsResponseBody200
  { -- | operation: \"ADD\" or \"REMOVE\"
    getSapiV1BswapLiquidityOpsResponseBody200Operation :: Data.Text.Internal.Text,
    -- | operationId
    getSapiV1BswapLiquidityOpsResponseBody200OperationId :: GHC.Int.Int64,
    -- | poolId
    getSapiV1BswapLiquidityOpsResponseBody200PoolId :: GHC.Int.Int64,
    -- | poolName
    getSapiV1BswapLiquidityOpsResponseBody200PoolName :: Data.Text.Internal.Text,
    -- | shareAmount
    getSapiV1BswapLiquidityOpsResponseBody200ShareAmount :: Data.Text.Internal.Text,
    -- | status: 0: pending, 1: success, 2: failed
    getSapiV1BswapLiquidityOpsResponseBody200Status :: GHC.Int.Int32,
    -- | updateTime
    getSapiV1BswapLiquidityOpsResponseBody200UpdateTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapLiquidityOpsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["operation" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200Operation obj] : ["operationId" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200OperationId obj] : ["poolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200PoolId obj] : ["poolName" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200PoolName obj] : ["shareAmount" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200ShareAmount obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200Status obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200UpdateTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["operation" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200Operation obj] : ["operationId" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200OperationId obj] : ["poolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200PoolId obj] : ["poolName" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200PoolName obj] : ["shareAmount" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200ShareAmount obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200Status obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityOpsResponseBody200UpdateTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapLiquidityOpsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapLiquidityOpsResponseBody200" (\obj -> ((((((GHC.Base.pure GetSapiV1BswapLiquidityOpsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "operation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "operationId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "shareAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updateTime"))

-- | Create a new 'GetSapiV1BswapLiquidityOpsResponseBody200' with all required fields.
mkGetSapiV1BswapLiquidityOpsResponseBody200 ::
  -- | 'getSapiV1BswapLiquidityOpsResponseBody200Operation'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapLiquidityOpsResponseBody200OperationId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapLiquidityOpsResponseBody200PoolId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapLiquidityOpsResponseBody200PoolName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapLiquidityOpsResponseBody200ShareAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapLiquidityOpsResponseBody200Status'
  GHC.Int.Int32 ->
  -- | 'getSapiV1BswapLiquidityOpsResponseBody200UpdateTime'
  GHC.Int.Int64 ->
  GetSapiV1BswapLiquidityOpsResponseBody200
mkGetSapiV1BswapLiquidityOpsResponseBody200 getSapiV1BswapLiquidityOpsResponseBody200Operation getSapiV1BswapLiquidityOpsResponseBody200OperationId getSapiV1BswapLiquidityOpsResponseBody200PoolId getSapiV1BswapLiquidityOpsResponseBody200PoolName getSapiV1BswapLiquidityOpsResponseBody200ShareAmount getSapiV1BswapLiquidityOpsResponseBody200Status getSapiV1BswapLiquidityOpsResponseBody200UpdateTime =
  GetSapiV1BswapLiquidityOpsResponseBody200
    { getSapiV1BswapLiquidityOpsResponseBody200Operation = getSapiV1BswapLiquidityOpsResponseBody200Operation,
      getSapiV1BswapLiquidityOpsResponseBody200OperationId = getSapiV1BswapLiquidityOpsResponseBody200OperationId,
      getSapiV1BswapLiquidityOpsResponseBody200PoolId = getSapiV1BswapLiquidityOpsResponseBody200PoolId,
      getSapiV1BswapLiquidityOpsResponseBody200PoolName = getSapiV1BswapLiquidityOpsResponseBody200PoolName,
      getSapiV1BswapLiquidityOpsResponseBody200ShareAmount = getSapiV1BswapLiquidityOpsResponseBody200ShareAmount,
      getSapiV1BswapLiquidityOpsResponseBody200Status = getSapiV1BswapLiquidityOpsResponseBody200Status,
      getSapiV1BswapLiquidityOpsResponseBody200UpdateTime = getSapiV1BswapLiquidityOpsResponseBody200UpdateTime
    }

-- | > GET /sapi/v1/bswap/liquidityOps
--
-- The same as 'getSapiV1BswapLiquidityOps' but accepts an explicit configuration.
getSapiV1BswapLiquidityOpsWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapLiquidityOpsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BswapLiquidityOpsResponse)
getSapiV1BswapLiquidityOpsWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BswapLiquidityOpsResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapLiquidityOpsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1BswapLiquidityOpsResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapLiquidityOpsResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapLiquidityOpsResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/liquidityOps")
          [ Binance.Common.QueryParameter (Data.Text.pack "operationId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryOperationId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "operation") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryOperation parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityOpsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityOpsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/bswap/liquidityOps
--
-- The same as 'getSapiV1BswapLiquidityOps' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapLiquidityOpsRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapLiquidityOpsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapLiquidityOpsRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/liquidityOps")
        [ Binance.Common.QueryParameter (Data.Text.pack "operationId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryOperationId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "operation") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryOperation parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityOpsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityOpsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/bswap/liquidityOps
--
-- The same as 'getSapiV1BswapLiquidityOps' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapLiquidityOpsWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapLiquidityOpsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapLiquidityOpsWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/liquidityOps")
          [ Binance.Common.QueryParameter (Data.Text.pack "operationId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryOperationId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "operation") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryOperation parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityOpsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityOpsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityOpsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
