{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1SubAccountFuturesTransfer
module Binance.Operations.PostSapiV1SubAccountFuturesTransfer where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/sub-account/futures/transfer
--
-- Weight(IP): 1
postSapiV1SubAccountFuturesTransfer ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1SubAccountFuturesTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1SubAccountFuturesTransferResponse)
postSapiV1SubAccountFuturesTransfer parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1SubAccountFuturesTransferResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1SubAccountFuturesTransferResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1SubAccountFuturesTransferResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1SubAccountFuturesTransferResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1SubAccountFuturesTransferResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/sub-account/futures/transfer")
        [ Binance.Common.QueryParameter (Data.Text.pack "email") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryEmail parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountFuturesTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/futures\/transfer.POST.parameters@ in the specification.
data PostSapiV1SubAccountFuturesTransferParameters = PostSapiV1SubAccountFuturesTransferParameters
  { -- | queryAmount: Represents the parameter named \'amount\'
    postSapiV1SubAccountFuturesTransferParametersQueryAmount :: GHC.Types.Double,
    -- | queryAsset: Represents the parameter named \'asset\'
    postSapiV1SubAccountFuturesTransferParametersQueryAsset :: Data.Text.Internal.Text,
    -- | queryEmail: Represents the parameter named \'email\'
    --
    -- Sub-account email
    postSapiV1SubAccountFuturesTransferParametersQueryEmail :: Data.Text.Internal.Text,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1SubAccountFuturesTransferParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1SubAccountFuturesTransferParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1SubAccountFuturesTransferParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryType: Represents the parameter named \'type\'
    --
    -- * \`1\` - transfer from subaccount\'s spot account to its USDT-margined futures account
    -- * \`2\` - transfer from subaccount\'s USDT-margined futures account to its spot account
    -- * \`3\` - transfer from subaccount\'s spot account to its COIN-margined futures account
    -- * \`4\` - transfer from subaccount\'s COIN-margined futures account to its spot account
    postSapiV1SubAccountFuturesTransferParametersQueryType :: PostSapiV1SubAccountFuturesTransferParametersQueryType
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1SubAccountFuturesTransferParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryAmount obj] : ["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryAsset obj] : ["queryEmail" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryEmail obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountFuturesTransferParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryTimestamp obj] : ["queryType" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryAmount obj] : ["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryAsset obj] : ["queryEmail" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryEmail obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountFuturesTransferParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryTimestamp obj] : ["queryType" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferParametersQueryType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1SubAccountFuturesTransferParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1SubAccountFuturesTransferParameters" (\obj -> ((((((GHC.Base.pure PostSapiV1SubAccountFuturesTransferParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryEmail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryType"))

-- | Create a new 'PostSapiV1SubAccountFuturesTransferParameters' with all required fields.
mkPostSapiV1SubAccountFuturesTransferParameters ::
  -- | 'postSapiV1SubAccountFuturesTransferParametersQueryAmount'
  GHC.Types.Double ->
  -- | 'postSapiV1SubAccountFuturesTransferParametersQueryAsset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1SubAccountFuturesTransferParametersQueryEmail'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1SubAccountFuturesTransferParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1SubAccountFuturesTransferParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'postSapiV1SubAccountFuturesTransferParametersQueryType'
  PostSapiV1SubAccountFuturesTransferParametersQueryType ->
  PostSapiV1SubAccountFuturesTransferParameters
mkPostSapiV1SubAccountFuturesTransferParameters postSapiV1SubAccountFuturesTransferParametersQueryAmount postSapiV1SubAccountFuturesTransferParametersQueryAsset postSapiV1SubAccountFuturesTransferParametersQueryEmail postSapiV1SubAccountFuturesTransferParametersQuerySignature postSapiV1SubAccountFuturesTransferParametersQueryTimestamp postSapiV1SubAccountFuturesTransferParametersQueryType =
  PostSapiV1SubAccountFuturesTransferParameters
    { postSapiV1SubAccountFuturesTransferParametersQueryAmount = postSapiV1SubAccountFuturesTransferParametersQueryAmount,
      postSapiV1SubAccountFuturesTransferParametersQueryAsset = postSapiV1SubAccountFuturesTransferParametersQueryAsset,
      postSapiV1SubAccountFuturesTransferParametersQueryEmail = postSapiV1SubAccountFuturesTransferParametersQueryEmail,
      postSapiV1SubAccountFuturesTransferParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1SubAccountFuturesTransferParametersQuerySignature = postSapiV1SubAccountFuturesTransferParametersQuerySignature,
      postSapiV1SubAccountFuturesTransferParametersQueryTimestamp = postSapiV1SubAccountFuturesTransferParametersQueryTimestamp,
      postSapiV1SubAccountFuturesTransferParametersQueryType = postSapiV1SubAccountFuturesTransferParametersQueryType
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/sub-account\/futures\/transfer.POST.parameters.properties.queryType@ in the specification.
--
-- Represents the parameter named \'type\'
--
-- * \`1\` - transfer from subaccount\'s spot account to its USDT-margined futures account
-- * \`2\` - transfer from subaccount\'s USDT-margined futures account to its spot account
-- * \`3\` - transfer from subaccount\'s spot account to its COIN-margined futures account
-- * \`4\` - transfer from subaccount\'s COIN-margined futures account to its spot account
data PostSapiV1SubAccountFuturesTransferParametersQueryType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1SubAccountFuturesTransferParametersQueryTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1SubAccountFuturesTransferParametersQueryTypeTyped GHC.Int.Int32
  | -- | Represents the JSON value @1@
    PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum1
  | -- | Represents the JSON value @2@
    PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum2
  | -- | Represents the JSON value @3@
    PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum3
  | -- | Represents the JSON value @4@
    PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum4
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1SubAccountFuturesTransferParametersQueryType where
  toJSON (PostSapiV1SubAccountFuturesTransferParametersQueryTypeOther val) = val
  toJSON (PostSapiV1SubAccountFuturesTransferParametersQueryTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum1) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 1 0)
  toJSON (PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum2) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 2 0)
  toJSON (PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum3) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 3 0)
  toJSON (PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum4) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 4 0)

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1SubAccountFuturesTransferParametersQueryType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 1 0) -> PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum1
            | val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 2 0) -> PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum2
            | val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 3 0) -> PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum3
            | val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 4 0) -> PostSapiV1SubAccountFuturesTransferParametersQueryTypeEnum4
            | GHC.Base.otherwise -> PostSapiV1SubAccountFuturesTransferParametersQueryTypeOther val
      )

-- | Represents a response of the operation 'postSapiV1SubAccountFuturesTransfer'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1SubAccountFuturesTransferResponseError' is used.
data PostSapiV1SubAccountFuturesTransferResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1SubAccountFuturesTransferResponseError GHC.Base.String
  | -- | Transfer id
    PostSapiV1SubAccountFuturesTransferResponse200 PostSapiV1SubAccountFuturesTransferResponseBody200
  | -- | Bad Request
    PostSapiV1SubAccountFuturesTransferResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1SubAccountFuturesTransferResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/futures\/transfer.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1SubAccountFuturesTransferResponseBody200 = PostSapiV1SubAccountFuturesTransferResponseBody200
  { -- | txnId
    postSapiV1SubAccountFuturesTransferResponseBody200TxnId :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1SubAccountFuturesTransferResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["txnId" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferResponseBody200TxnId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["txnId" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountFuturesTransferResponseBody200TxnId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1SubAccountFuturesTransferResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1SubAccountFuturesTransferResponseBody200" (\obj -> GHC.Base.pure PostSapiV1SubAccountFuturesTransferResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "txnId"))

-- | Create a new 'PostSapiV1SubAccountFuturesTransferResponseBody200' with all required fields.
mkPostSapiV1SubAccountFuturesTransferResponseBody200 ::
  -- | 'postSapiV1SubAccountFuturesTransferResponseBody200TxnId'
  Data.Text.Internal.Text ->
  PostSapiV1SubAccountFuturesTransferResponseBody200
mkPostSapiV1SubAccountFuturesTransferResponseBody200 postSapiV1SubAccountFuturesTransferResponseBody200TxnId = PostSapiV1SubAccountFuturesTransferResponseBody200 {postSapiV1SubAccountFuturesTransferResponseBody200TxnId = postSapiV1SubAccountFuturesTransferResponseBody200TxnId}

-- | > POST /sapi/v1/sub-account/futures/transfer
--
-- The same as 'postSapiV1SubAccountFuturesTransfer' but accepts an explicit configuration.
postSapiV1SubAccountFuturesTransferWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1SubAccountFuturesTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1SubAccountFuturesTransferResponse)
postSapiV1SubAccountFuturesTransferWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1SubAccountFuturesTransferResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1SubAccountFuturesTransferResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1SubAccountFuturesTransferResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1SubAccountFuturesTransferResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1SubAccountFuturesTransferResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/sub-account/futures/transfer")
          [ Binance.Common.QueryParameter (Data.Text.pack "email") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryEmail parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountFuturesTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/sub-account/futures/transfer
--
-- The same as 'postSapiV1SubAccountFuturesTransfer' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1SubAccountFuturesTransferRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1SubAccountFuturesTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1SubAccountFuturesTransferRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/sub-account/futures/transfer")
        [ Binance.Common.QueryParameter (Data.Text.pack "email") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryEmail parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountFuturesTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/sub-account/futures/transfer
--
-- The same as 'postSapiV1SubAccountFuturesTransfer' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1SubAccountFuturesTransferWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1SubAccountFuturesTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1SubAccountFuturesTransferWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/sub-account/futures/transfer")
          [ Binance.Common.QueryParameter (Data.Text.pack "email") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryEmail parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountFuturesTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountFuturesTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
