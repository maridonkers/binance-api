{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1BnbBurn
module Binance.Operations.PostSapiV1BnbBurn where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/bnbBurn
--
-- - \"spotBNBBurn\" and \"interestBNBBurn\" should be sent at least one.
--
-- Weight(IP): 1
postSapiV1BnbBurn ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BnbBurnParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1BnbBurnResponse)
postSapiV1BnbBurn parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1BnbBurnResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BnbBurnResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            BnbBurnStatus
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BnbBurnResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BnbBurnResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/bnbBurn")
        [ Binance.Common.QueryParameter (Data.Text.pack "spotBNBBurn") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQuerySpotBNBBurn parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "interestBNBBurn") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQueryInterestBNBBurn parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BnbBurnParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BnbBurnParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bnbBurn.POST.parameters@ in the specification.
data PostSapiV1BnbBurnParameters = PostSapiV1BnbBurnParameters
  { -- | queryInterestBNBBurn: Represents the parameter named \'interestBNBBurn\'
    --
    -- Determines whether to use BNB to pay for margin loan\'s interest
    postSapiV1BnbBurnParametersQueryInterestBNBBurn :: (GHC.Maybe.Maybe PostSapiV1BnbBurnParametersQueryInterestBNBBurn),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1BnbBurnParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1BnbBurnParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySpotBNBBurn: Represents the parameter named \'spotBNBBurn\'
    --
    -- Determines whether to use BNB to pay for trading fees on SPOT
    postSapiV1BnbBurnParametersQuerySpotBNBBurn :: (GHC.Maybe.Maybe PostSapiV1BnbBurnParametersQuerySpotBNBBurn),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1BnbBurnParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BnbBurnParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInterestBNBBurn" Data.Aeson.Types.ToJSON..=)) (postSapiV1BnbBurnParametersQueryInterestBNBBurn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BnbBurnParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BnbBurnParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySpotBNBBurn" Data.Aeson.Types.ToJSON..=)) (postSapiV1BnbBurnParametersQuerySpotBNBBurn obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BnbBurnParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryInterestBNBBurn" Data.Aeson.Types.ToJSON..=)) (postSapiV1BnbBurnParametersQueryInterestBNBBurn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BnbBurnParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BnbBurnParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySpotBNBBurn" Data.Aeson.Types.ToJSON..=)) (postSapiV1BnbBurnParametersQuerySpotBNBBurn obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BnbBurnParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BnbBurnParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BnbBurnParameters" (\obj -> ((((GHC.Base.pure PostSapiV1BnbBurnParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryInterestBNBBurn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySpotBNBBurn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1BnbBurnParameters' with all required fields.
mkPostSapiV1BnbBurnParameters ::
  -- | 'postSapiV1BnbBurnParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BnbBurnParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1BnbBurnParameters
mkPostSapiV1BnbBurnParameters postSapiV1BnbBurnParametersQuerySignature postSapiV1BnbBurnParametersQueryTimestamp =
  PostSapiV1BnbBurnParameters
    { postSapiV1BnbBurnParametersQueryInterestBNBBurn = GHC.Maybe.Nothing,
      postSapiV1BnbBurnParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1BnbBurnParametersQuerySignature = postSapiV1BnbBurnParametersQuerySignature,
      postSapiV1BnbBurnParametersQuerySpotBNBBurn = GHC.Maybe.Nothing,
      postSapiV1BnbBurnParametersQueryTimestamp = postSapiV1BnbBurnParametersQueryTimestamp
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/bnbBurn.POST.parameters.properties.queryInterestBNBBurn@ in the specification.
--
-- Represents the parameter named \'interestBNBBurn\'
--
-- Determines whether to use BNB to pay for margin loan\'s interest
data PostSapiV1BnbBurnParametersQueryInterestBNBBurn
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1BnbBurnParametersQueryInterestBNBBurnOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1BnbBurnParametersQueryInterestBNBBurnTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"true"@
    PostSapiV1BnbBurnParametersQueryInterestBNBBurnEnumTrue
  | -- | Represents the JSON value @"false"@
    PostSapiV1BnbBurnParametersQueryInterestBNBBurnEnumFalse
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BnbBurnParametersQueryInterestBNBBurn where
  toJSON (PostSapiV1BnbBurnParametersQueryInterestBNBBurnOther val) = val
  toJSON (PostSapiV1BnbBurnParametersQueryInterestBNBBurnTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1BnbBurnParametersQueryInterestBNBBurnEnumTrue) = "true"
  toJSON (PostSapiV1BnbBurnParametersQueryInterestBNBBurnEnumFalse) = "false"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BnbBurnParametersQueryInterestBNBBurn where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "true" -> PostSapiV1BnbBurnParametersQueryInterestBNBBurnEnumTrue
            | val GHC.Classes.== "false" -> PostSapiV1BnbBurnParametersQueryInterestBNBBurnEnumFalse
            | GHC.Base.otherwise -> PostSapiV1BnbBurnParametersQueryInterestBNBBurnOther val
      )

-- | Defines the enum schema located at @paths.\/sapi\/v1\/bnbBurn.POST.parameters.properties.querySpotBNBBurn@ in the specification.
--
-- Represents the parameter named \'spotBNBBurn\'
--
-- Determines whether to use BNB to pay for trading fees on SPOT
data PostSapiV1BnbBurnParametersQuerySpotBNBBurn
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1BnbBurnParametersQuerySpotBNBBurnOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1BnbBurnParametersQuerySpotBNBBurnTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"true"@
    PostSapiV1BnbBurnParametersQuerySpotBNBBurnEnumTrue
  | -- | Represents the JSON value @"false"@
    PostSapiV1BnbBurnParametersQuerySpotBNBBurnEnumFalse
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BnbBurnParametersQuerySpotBNBBurn where
  toJSON (PostSapiV1BnbBurnParametersQuerySpotBNBBurnOther val) = val
  toJSON (PostSapiV1BnbBurnParametersQuerySpotBNBBurnTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1BnbBurnParametersQuerySpotBNBBurnEnumTrue) = "true"
  toJSON (PostSapiV1BnbBurnParametersQuerySpotBNBBurnEnumFalse) = "false"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BnbBurnParametersQuerySpotBNBBurn where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "true" -> PostSapiV1BnbBurnParametersQuerySpotBNBBurnEnumTrue
            | val GHC.Classes.== "false" -> PostSapiV1BnbBurnParametersQuerySpotBNBBurnEnumFalse
            | GHC.Base.otherwise -> PostSapiV1BnbBurnParametersQuerySpotBNBBurnOther val
      )

-- | Represents a response of the operation 'postSapiV1BnbBurn'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1BnbBurnResponseError' is used.
data PostSapiV1BnbBurnResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1BnbBurnResponseError GHC.Base.String
  | -- | Status on BNB to pay for trading fees
    PostSapiV1BnbBurnResponse200 BnbBurnStatus
  | -- | Bad Request
    PostSapiV1BnbBurnResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1BnbBurnResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | > POST /sapi/v1/bnbBurn
--
-- The same as 'postSapiV1BnbBurn' but accepts an explicit configuration.
postSapiV1BnbBurnWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BnbBurnParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1BnbBurnResponse)
postSapiV1BnbBurnWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1BnbBurnResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BnbBurnResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              BnbBurnStatus
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BnbBurnResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BnbBurnResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/bnbBurn")
          [ Binance.Common.QueryParameter (Data.Text.pack "spotBNBBurn") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQuerySpotBNBBurn parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "interestBNBBurn") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQueryInterestBNBBurn parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BnbBurnParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BnbBurnParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/bnbBurn
--
-- The same as 'postSapiV1BnbBurn' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BnbBurnRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BnbBurnParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BnbBurnRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/bnbBurn")
        [ Binance.Common.QueryParameter (Data.Text.pack "spotBNBBurn") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQuerySpotBNBBurn parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "interestBNBBurn") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQueryInterestBNBBurn parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BnbBurnParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BnbBurnParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/bnbBurn
--
-- The same as 'postSapiV1BnbBurn' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BnbBurnWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BnbBurnParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BnbBurnWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/bnbBurn")
          [ Binance.Common.QueryParameter (Data.Text.pack "spotBNBBurn") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQuerySpotBNBBurn parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "interestBNBBurn") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQueryInterestBNBBurn parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BnbBurnParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BnbBurnParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BnbBurnParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
