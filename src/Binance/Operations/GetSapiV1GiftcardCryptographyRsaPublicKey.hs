{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1GiftcardCryptographyRsaPublicKey
module Binance.Operations.GetSapiV1GiftcardCryptographyRsaPublicKey where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/giftcard/cryptography/rsa-public-key
--
-- This API is for fetching the RSA Public Key.
-- This RSA Public key will be used to encrypt the card code.
-- Please note that the RSA Public key fetched is valid only for the current day.
--
-- Weight(IP): 1
getSapiV1GiftcardCryptographyRsaPublicKey ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1GiftcardCryptographyRsaPublicKeyParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1GiftcardCryptographyRsaPublicKeyResponse)
getSapiV1GiftcardCryptographyRsaPublicKey parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1GiftcardCryptographyRsaPublicKeyResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1GiftcardCryptographyRsaPublicKeyResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1GiftcardCryptographyRsaPublicKeyResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1GiftcardCryptographyRsaPublicKeyResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/giftcard/cryptography/rsa-public-key")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/giftcard\/cryptography\/rsa-public-key.GET.parameters@ in the specification.
data GetSapiV1GiftcardCryptographyRsaPublicKeyParameters = GetSapiV1GiftcardCryptographyRsaPublicKeyParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1GiftcardCryptographyRsaPublicKeyParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1GiftcardCryptographyRsaPublicKeyParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1GiftcardCryptographyRsaPublicKeyParameters" (\obj -> ((GHC.Base.pure GetSapiV1GiftcardCryptographyRsaPublicKeyParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1GiftcardCryptographyRsaPublicKeyParameters' with all required fields.
mkGetSapiV1GiftcardCryptographyRsaPublicKeyParameters ::
  -- | 'getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1GiftcardCryptographyRsaPublicKeyParameters
mkGetSapiV1GiftcardCryptographyRsaPublicKeyParameters getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp =
  GetSapiV1GiftcardCryptographyRsaPublicKeyParameters
    { getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature = getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature,
      getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp = getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1GiftcardCryptographyRsaPublicKey'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1GiftcardCryptographyRsaPublicKeyResponseError' is used.
data GetSapiV1GiftcardCryptographyRsaPublicKeyResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1GiftcardCryptographyRsaPublicKeyResponseError GHC.Base.String
  | -- | RSA Public Key.
    GetSapiV1GiftcardCryptographyRsaPublicKeyResponse200 GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200
  | -- | Bad Request
    GetSapiV1GiftcardCryptographyRsaPublicKeyResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1GiftcardCryptographyRsaPublicKeyResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/giftcard\/cryptography\/rsa-public-key.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200 = GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200
  { -- | code
    getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Code :: Data.Text.Internal.Text,
    -- | data
    getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Data :: Data.Text.Internal.Text,
    -- | message
    getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Message :: Data.Text.Internal.Text,
    -- | success
    getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Success :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Data obj] : ["message" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Message obj] : ["success" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Success obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Data obj] : ["message" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Message obj] : ["success" Data.Aeson.Types.ToJSON..= getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Success obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200" (\obj -> (((GHC.Base.pure GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success"))

-- | Create a new 'GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200' with all required fields.
mkGetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200 ::
  -- | 'getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Code'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Data'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Message'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Success'
  GHC.Types.Bool ->
  GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200
mkGetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200 getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Code getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Data getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Message getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Success =
  GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200
    { getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Code = getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Code,
      getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Data = getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Data,
      getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Message = getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Message,
      getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Success = getSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200Success
    }

-- | > GET /sapi/v1/giftcard/cryptography/rsa-public-key
--
-- The same as 'getSapiV1GiftcardCryptographyRsaPublicKey' but accepts an explicit configuration.
getSapiV1GiftcardCryptographyRsaPublicKeyWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1GiftcardCryptographyRsaPublicKeyParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1GiftcardCryptographyRsaPublicKeyResponse)
getSapiV1GiftcardCryptographyRsaPublicKeyWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1GiftcardCryptographyRsaPublicKeyResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1GiftcardCryptographyRsaPublicKeyResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1GiftcardCryptographyRsaPublicKeyResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1GiftcardCryptographyRsaPublicKeyResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1GiftcardCryptographyRsaPublicKeyResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/giftcard/cryptography/rsa-public-key")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/giftcard/cryptography/rsa-public-key
--
-- The same as 'getSapiV1GiftcardCryptographyRsaPublicKey' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1GiftcardCryptographyRsaPublicKeyRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1GiftcardCryptographyRsaPublicKeyParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1GiftcardCryptographyRsaPublicKeyRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/giftcard/cryptography/rsa-public-key")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/giftcard/cryptography/rsa-public-key
--
-- The same as 'getSapiV1GiftcardCryptographyRsaPublicKey' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1GiftcardCryptographyRsaPublicKeyWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1GiftcardCryptographyRsaPublicKeyParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1GiftcardCryptographyRsaPublicKeyWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/giftcard/cryptography/rsa-public-key")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1GiftcardCryptographyRsaPublicKeyParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
