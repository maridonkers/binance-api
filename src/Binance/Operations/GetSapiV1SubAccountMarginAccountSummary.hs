{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1SubAccountMarginAccountSummary
module Binance.Operations.GetSapiV1SubAccountMarginAccountSummary where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/sub-account/margin/accountSummary
--
-- Weight(IP): 10
getSapiV1SubAccountMarginAccountSummary ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountMarginAccountSummaryParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountMarginAccountSummaryResponse)
getSapiV1SubAccountMarginAccountSummary parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1SubAccountMarginAccountSummaryResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountMarginAccountSummaryResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1SubAccountMarginAccountSummaryResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountMarginAccountSummaryResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountMarginAccountSummaryResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/margin/accountSummary")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountMarginAccountSummaryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/margin\/accountSummary.GET.parameters@ in the specification.
data GetSapiV1SubAccountMarginAccountSummaryParameters = GetSapiV1SubAccountMarginAccountSummaryParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1SubAccountMarginAccountSummaryParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountMarginAccountSummaryParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountMarginAccountSummaryParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountMarginAccountSummaryParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountMarginAccountSummaryParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountMarginAccountSummaryParameters" (\obj -> ((GHC.Base.pure GetSapiV1SubAccountMarginAccountSummaryParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1SubAccountMarginAccountSummaryParameters' with all required fields.
mkGetSapiV1SubAccountMarginAccountSummaryParameters ::
  -- | 'getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1SubAccountMarginAccountSummaryParameters
mkGetSapiV1SubAccountMarginAccountSummaryParameters getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp =
  GetSapiV1SubAccountMarginAccountSummaryParameters
    { getSapiV1SubAccountMarginAccountSummaryParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature = getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature,
      getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp = getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1SubAccountMarginAccountSummary'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1SubAccountMarginAccountSummaryResponseError' is used.
data GetSapiV1SubAccountMarginAccountSummaryResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1SubAccountMarginAccountSummaryResponseError GHC.Base.String
  | -- | Margin sub-account details
    GetSapiV1SubAccountMarginAccountSummaryResponse200 GetSapiV1SubAccountMarginAccountSummaryResponseBody200
  | -- | Bad Request
    GetSapiV1SubAccountMarginAccountSummaryResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1SubAccountMarginAccountSummaryResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/margin\/accountSummary.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1SubAccountMarginAccountSummaryResponseBody200 = GetSapiV1SubAccountMarginAccountSummaryResponseBody200
  { -- | subAccountList
    getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList :: ([GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList]),
    -- | totalAssetOfBtc
    getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalAssetOfBtc :: Data.Text.Internal.Text,
    -- | totalLiabilityOfBtc
    getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalLiabilityOfBtc :: Data.Text.Internal.Text,
    -- | totalNetAssetOfBtc
    getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalNetAssetOfBtc :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountMarginAccountSummaryResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["subAccountList" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList obj] : ["totalAssetOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalAssetOfBtc obj] : ["totalLiabilityOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalLiabilityOfBtc obj] : ["totalNetAssetOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalNetAssetOfBtc obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["subAccountList" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList obj] : ["totalAssetOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalAssetOfBtc obj] : ["totalLiabilityOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalLiabilityOfBtc obj] : ["totalNetAssetOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalNetAssetOfBtc obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountMarginAccountSummaryResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountMarginAccountSummaryResponseBody200" (\obj -> (((GHC.Base.pure GetSapiV1SubAccountMarginAccountSummaryResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subAccountList")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalAssetOfBtc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalLiabilityOfBtc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalNetAssetOfBtc"))

-- | Create a new 'GetSapiV1SubAccountMarginAccountSummaryResponseBody200' with all required fields.
mkGetSapiV1SubAccountMarginAccountSummaryResponseBody200 ::
  -- | 'getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList'
  [GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList] ->
  -- | 'getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalAssetOfBtc'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalLiabilityOfBtc'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalNetAssetOfBtc'
  Data.Text.Internal.Text ->
  GetSapiV1SubAccountMarginAccountSummaryResponseBody200
mkGetSapiV1SubAccountMarginAccountSummaryResponseBody200 getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalAssetOfBtc getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalLiabilityOfBtc getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalNetAssetOfBtc =
  GetSapiV1SubAccountMarginAccountSummaryResponseBody200
    { getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList = getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList,
      getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalAssetOfBtc = getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalAssetOfBtc,
      getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalLiabilityOfBtc = getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalLiabilityOfBtc,
      getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalNetAssetOfBtc = getSapiV1SubAccountMarginAccountSummaryResponseBody200TotalNetAssetOfBtc
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/margin\/accountSummary.GET.responses.200.content.application\/json.schema.properties.subAccountList.items@ in the specification.
data GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList = GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList
  { -- | email
    getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListEmail :: Data.Text.Internal.Text,
    -- | totalAssetOfBtc
    getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalAssetOfBtc :: Data.Text.Internal.Text,
    -- | totalLiabilityOfBtc
    getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalLiabilityOfBtc :: Data.Text.Internal.Text,
    -- | totalNetAssetOfBtc
    getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalNetAssetOfBtc :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["email" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListEmail obj] : ["totalAssetOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalAssetOfBtc obj] : ["totalLiabilityOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalLiabilityOfBtc obj] : ["totalNetAssetOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalNetAssetOfBtc obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["email" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListEmail obj] : ["totalAssetOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalAssetOfBtc obj] : ["totalLiabilityOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalLiabilityOfBtc obj] : ["totalNetAssetOfBtc" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalNetAssetOfBtc obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList" (\obj -> (((GHC.Base.pure GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalAssetOfBtc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalLiabilityOfBtc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalNetAssetOfBtc"))

-- | Create a new 'GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList' with all required fields.
mkGetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList ::
  -- | 'getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListEmail'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalAssetOfBtc'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalLiabilityOfBtc'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalNetAssetOfBtc'
  Data.Text.Internal.Text ->
  GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList
mkGetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListEmail getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalAssetOfBtc getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalLiabilityOfBtc getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalNetAssetOfBtc =
  GetSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountList
    { getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListEmail = getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListEmail,
      getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalAssetOfBtc = getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalAssetOfBtc,
      getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalLiabilityOfBtc = getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalLiabilityOfBtc,
      getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalNetAssetOfBtc = getSapiV1SubAccountMarginAccountSummaryResponseBody200SubAccountListTotalNetAssetOfBtc
    }

-- | > GET /sapi/v1/sub-account/margin/accountSummary
--
-- The same as 'getSapiV1SubAccountMarginAccountSummary' but accepts an explicit configuration.
getSapiV1SubAccountMarginAccountSummaryWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountMarginAccountSummaryParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountMarginAccountSummaryResponse)
getSapiV1SubAccountMarginAccountSummaryWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1SubAccountMarginAccountSummaryResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountMarginAccountSummaryResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1SubAccountMarginAccountSummaryResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountMarginAccountSummaryResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountMarginAccountSummaryResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/margin/accountSummary")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountMarginAccountSummaryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/sub-account/margin/accountSummary
--
-- The same as 'getSapiV1SubAccountMarginAccountSummary' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountMarginAccountSummaryRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountMarginAccountSummaryParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountMarginAccountSummaryRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/margin/accountSummary")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountMarginAccountSummaryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/sub-account/margin/accountSummary
--
-- The same as 'getSapiV1SubAccountMarginAccountSummary' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountMarginAccountSummaryWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountMarginAccountSummaryParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountMarginAccountSummaryWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/margin/accountSummary")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountMarginAccountSummaryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountMarginAccountSummaryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountMarginAccountSummaryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
