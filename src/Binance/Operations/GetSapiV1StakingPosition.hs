{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1StakingPosition
module Binance.Operations.GetSapiV1StakingPosition where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/staking/position
--
-- Weight(IP): 1
getSapiV1StakingPosition ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingPositionParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1StakingPositionResponse)
getSapiV1StakingPosition parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1StakingPositionResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingPositionResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1StakingPositionResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingPositionResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1StakingPositionResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/staking/position")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "productId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryProductId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/position.GET.parameters@ in the specification.
data GetSapiV1StakingPositionParameters = GetSapiV1StakingPositionParameters
  { -- | queryAsset: Represents the parameter named \'asset\'
    getSapiV1StakingPositionParametersQueryAsset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryCurrent: Represents the parameter named \'current\'
    --
    -- Current querying page. Start from 1. Default:1
    getSapiV1StakingPositionParametersQueryCurrent :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryProduct: Represents the parameter named \'product\'
    --
    -- * \`STAKING\` - for Locked Staking
    -- * \`F_DEFI\` - for flexible DeFi Staking
    -- * \`L_DEFI\` - for locked DeFi Staking
    getSapiV1StakingPositionParametersQueryProduct :: Data.Text.Internal.Text,
    -- | queryProductId: Represents the parameter named \'productId\'
    getSapiV1StakingPositionParametersQueryProductId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1StakingPositionParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1StakingPositionParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySize: Represents the parameter named \'size\'
    --
    -- Default:10 Max:100
    getSapiV1StakingPositionParametersQuerySize :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1StakingPositionParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingPositionParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCurrent" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQueryCurrent obj) : ["queryProduct" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionParametersQueryProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryProductId" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQueryProductId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySize" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQuerySize obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCurrent" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQueryCurrent obj) : ["queryProduct" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionParametersQueryProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryProductId" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQueryProductId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySize" Data.Aeson.Types.ToJSON..=)) (getSapiV1StakingPositionParametersQuerySize obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingPositionParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingPositionParameters" (\obj -> (((((((GHC.Base.pure GetSapiV1StakingPositionParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCurrent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryProductId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1StakingPositionParameters' with all required fields.
mkGetSapiV1StakingPositionParameters ::
  -- | 'getSapiV1StakingPositionParametersQueryProduct'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1StakingPositionParameters
mkGetSapiV1StakingPositionParameters getSapiV1StakingPositionParametersQueryProduct getSapiV1StakingPositionParametersQuerySignature getSapiV1StakingPositionParametersQueryTimestamp =
  GetSapiV1StakingPositionParameters
    { getSapiV1StakingPositionParametersQueryAsset = GHC.Maybe.Nothing,
      getSapiV1StakingPositionParametersQueryCurrent = GHC.Maybe.Nothing,
      getSapiV1StakingPositionParametersQueryProduct = getSapiV1StakingPositionParametersQueryProduct,
      getSapiV1StakingPositionParametersQueryProductId = GHC.Maybe.Nothing,
      getSapiV1StakingPositionParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1StakingPositionParametersQuerySignature = getSapiV1StakingPositionParametersQuerySignature,
      getSapiV1StakingPositionParametersQuerySize = GHC.Maybe.Nothing,
      getSapiV1StakingPositionParametersQueryTimestamp = getSapiV1StakingPositionParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1StakingPosition'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1StakingPositionResponseError' is used.
data GetSapiV1StakingPositionResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1StakingPositionResponseError GHC.Base.String
  | -- | Position.
    GetSapiV1StakingPositionResponse200 ([GetSapiV1StakingPositionResponseBody200])
  | -- | Bad Request
    GetSapiV1StakingPositionResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1StakingPositionResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/staking\/position.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1StakingPositionResponseBody200 = GetSapiV1StakingPositionResponseBody200
  { -- | APY
    getSapiV1StakingPositionResponseBody200APY :: Data.Text.Internal.Text,
    -- | accrualDays
    getSapiV1StakingPositionResponseBody200AccrualDays :: Data.Text.Internal.Text,
    -- | amount
    getSapiV1StakingPositionResponseBody200Amount :: Data.Text.Internal.Text,
    -- | asset
    getSapiV1StakingPositionResponseBody200Asset :: Data.Text.Internal.Text,
    -- | canRedeemEarly
    getSapiV1StakingPositionResponseBody200CanRedeemEarly :: GHC.Types.Bool,
    -- | deliverDate
    getSapiV1StakingPositionResponseBody200DeliverDate :: Data.Text.Internal.Text,
    -- | duration
    getSapiV1StakingPositionResponseBody200Duration :: Data.Text.Internal.Text,
    -- | estExtraRewardAmt
    getSapiV1StakingPositionResponseBody200EstExtraRewardAmt :: Data.Text.Internal.Text,
    -- | extraRewardAPY
    getSapiV1StakingPositionResponseBody200ExtraRewardAPY :: Data.Text.Internal.Text,
    -- | extraRewardAsset
    getSapiV1StakingPositionResponseBody200ExtraRewardAsset :: Data.Text.Internal.Text,
    -- | interestEndDate
    getSapiV1StakingPositionResponseBody200InterestEndDate :: Data.Text.Internal.Text,
    -- | nextInterestPay
    getSapiV1StakingPositionResponseBody200NextInterestPay :: Data.Text.Internal.Text,
    -- | nextInterestPayDate
    getSapiV1StakingPositionResponseBody200NextInterestPayDate :: Data.Text.Internal.Text,
    -- | partialAmtDeliverDate
    getSapiV1StakingPositionResponseBody200PartialAmtDeliverDate :: Data.Text.Internal.Text,
    -- | payInterestPeriod
    getSapiV1StakingPositionResponseBody200PayInterestPeriod :: Data.Text.Internal.Text,
    -- | positionId
    getSapiV1StakingPositionResponseBody200PositionId :: Data.Text.Internal.Text,
    -- | projectId
    getSapiV1StakingPositionResponseBody200ProjectId :: Data.Text.Internal.Text,
    -- | purchaseTime
    getSapiV1StakingPositionResponseBody200PurchaseTime :: Data.Text.Internal.Text,
    -- | redeemAmountEarly
    getSapiV1StakingPositionResponseBody200RedeemAmountEarly :: Data.Text.Internal.Text,
    -- | redeemPeriod
    getSapiV1StakingPositionResponseBody200RedeemPeriod :: Data.Text.Internal.Text,
    -- | redeemingAmt
    getSapiV1StakingPositionResponseBody200RedeemingAmt :: Data.Text.Internal.Text,
    -- | renewable
    getSapiV1StakingPositionResponseBody200Renewable :: GHC.Types.Bool,
    -- | rewardAmt
    getSapiV1StakingPositionResponseBody200RewardAmt :: Data.Text.Internal.Text,
    -- | rewardAsset
    getSapiV1StakingPositionResponseBody200RewardAsset :: Data.Text.Internal.Text,
    -- | status
    getSapiV1StakingPositionResponseBody200Status :: Data.Text.Internal.Text,
    -- | type
    getSapiV1StakingPositionResponseBody200Type :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1StakingPositionResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["APY" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200APY obj] : ["accrualDays" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200AccrualDays obj] : ["amount" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Amount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Asset obj] : ["canRedeemEarly" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200CanRedeemEarly obj] : ["deliverDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200DeliverDate obj] : ["duration" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Duration obj] : ["estExtraRewardAmt" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200EstExtraRewardAmt obj] : ["extraRewardAPY" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200ExtraRewardAPY obj] : ["extraRewardAsset" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200ExtraRewardAsset obj] : ["interestEndDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200InterestEndDate obj] : ["nextInterestPay" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200NextInterestPay obj] : ["nextInterestPayDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200NextInterestPayDate obj] : ["partialAmtDeliverDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200PartialAmtDeliverDate obj] : ["payInterestPeriod" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200PayInterestPeriod obj] : ["positionId" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200PositionId obj] : ["projectId" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200ProjectId obj] : ["purchaseTime" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200PurchaseTime obj] : ["redeemAmountEarly" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RedeemAmountEarly obj] : ["redeemPeriod" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RedeemPeriod obj] : ["redeemingAmt" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RedeemingAmt obj] : ["renewable" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Renewable obj] : ["rewardAmt" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RewardAmt obj] : ["rewardAsset" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RewardAsset obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Status obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Type obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["APY" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200APY obj] : ["accrualDays" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200AccrualDays obj] : ["amount" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Amount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Asset obj] : ["canRedeemEarly" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200CanRedeemEarly obj] : ["deliverDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200DeliverDate obj] : ["duration" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Duration obj] : ["estExtraRewardAmt" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200EstExtraRewardAmt obj] : ["extraRewardAPY" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200ExtraRewardAPY obj] : ["extraRewardAsset" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200ExtraRewardAsset obj] : ["interestEndDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200InterestEndDate obj] : ["nextInterestPay" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200NextInterestPay obj] : ["nextInterestPayDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200NextInterestPayDate obj] : ["partialAmtDeliverDate" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200PartialAmtDeliverDate obj] : ["payInterestPeriod" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200PayInterestPeriod obj] : ["positionId" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200PositionId obj] : ["projectId" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200ProjectId obj] : ["purchaseTime" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200PurchaseTime obj] : ["redeemAmountEarly" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RedeemAmountEarly obj] : ["redeemPeriod" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RedeemPeriod obj] : ["redeemingAmt" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RedeemingAmt obj] : ["renewable" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Renewable obj] : ["rewardAmt" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RewardAmt obj] : ["rewardAsset" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200RewardAsset obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Status obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1StakingPositionResponseBody200Type obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1StakingPositionResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1StakingPositionResponseBody200" (\obj -> (((((((((((((((((((((((((GHC.Base.pure GetSapiV1StakingPositionResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "APY")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "accrualDays")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "canRedeemEarly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "deliverDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "duration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "estExtraRewardAmt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "extraRewardAPY")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "extraRewardAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interestEndDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "nextInterestPay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "nextInterestPayDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "partialAmtDeliverDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payInterestPeriod")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "positionId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "projectId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "purchaseTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redeemAmountEarly")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redeemPeriod")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redeemingAmt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "renewable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rewardAmt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "rewardAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'GetSapiV1StakingPositionResponseBody200' with all required fields.
mkGetSapiV1StakingPositionResponseBody200 ::
  -- | 'getSapiV1StakingPositionResponseBody200APY'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200AccrualDays'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200Amount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200Asset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200CanRedeemEarly'
  GHC.Types.Bool ->
  -- | 'getSapiV1StakingPositionResponseBody200DeliverDate'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200Duration'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200EstExtraRewardAmt'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200ExtraRewardAPY'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200ExtraRewardAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200InterestEndDate'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200NextInterestPay'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200NextInterestPayDate'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200PartialAmtDeliverDate'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200PayInterestPeriod'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200PositionId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200ProjectId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200PurchaseTime'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200RedeemAmountEarly'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200RedeemPeriod'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200RedeemingAmt'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200Renewable'
  GHC.Types.Bool ->
  -- | 'getSapiV1StakingPositionResponseBody200RewardAmt'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200RewardAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200Status'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1StakingPositionResponseBody200Type'
  Data.Text.Internal.Text ->
  GetSapiV1StakingPositionResponseBody200
mkGetSapiV1StakingPositionResponseBody200 getSapiV1StakingPositionResponseBody200APY getSapiV1StakingPositionResponseBody200AccrualDays getSapiV1StakingPositionResponseBody200Amount getSapiV1StakingPositionResponseBody200Asset getSapiV1StakingPositionResponseBody200CanRedeemEarly getSapiV1StakingPositionResponseBody200DeliverDate getSapiV1StakingPositionResponseBody200Duration getSapiV1StakingPositionResponseBody200EstExtraRewardAmt getSapiV1StakingPositionResponseBody200ExtraRewardAPY getSapiV1StakingPositionResponseBody200ExtraRewardAsset getSapiV1StakingPositionResponseBody200InterestEndDate getSapiV1StakingPositionResponseBody200NextInterestPay getSapiV1StakingPositionResponseBody200NextInterestPayDate getSapiV1StakingPositionResponseBody200PartialAmtDeliverDate getSapiV1StakingPositionResponseBody200PayInterestPeriod getSapiV1StakingPositionResponseBody200PositionId getSapiV1StakingPositionResponseBody200ProjectId getSapiV1StakingPositionResponseBody200PurchaseTime getSapiV1StakingPositionResponseBody200RedeemAmountEarly getSapiV1StakingPositionResponseBody200RedeemPeriod getSapiV1StakingPositionResponseBody200RedeemingAmt getSapiV1StakingPositionResponseBody200Renewable getSapiV1StakingPositionResponseBody200RewardAmt getSapiV1StakingPositionResponseBody200RewardAsset getSapiV1StakingPositionResponseBody200Status getSapiV1StakingPositionResponseBody200Type =
  GetSapiV1StakingPositionResponseBody200
    { getSapiV1StakingPositionResponseBody200APY = getSapiV1StakingPositionResponseBody200APY,
      getSapiV1StakingPositionResponseBody200AccrualDays = getSapiV1StakingPositionResponseBody200AccrualDays,
      getSapiV1StakingPositionResponseBody200Amount = getSapiV1StakingPositionResponseBody200Amount,
      getSapiV1StakingPositionResponseBody200Asset = getSapiV1StakingPositionResponseBody200Asset,
      getSapiV1StakingPositionResponseBody200CanRedeemEarly = getSapiV1StakingPositionResponseBody200CanRedeemEarly,
      getSapiV1StakingPositionResponseBody200DeliverDate = getSapiV1StakingPositionResponseBody200DeliverDate,
      getSapiV1StakingPositionResponseBody200Duration = getSapiV1StakingPositionResponseBody200Duration,
      getSapiV1StakingPositionResponseBody200EstExtraRewardAmt = getSapiV1StakingPositionResponseBody200EstExtraRewardAmt,
      getSapiV1StakingPositionResponseBody200ExtraRewardAPY = getSapiV1StakingPositionResponseBody200ExtraRewardAPY,
      getSapiV1StakingPositionResponseBody200ExtraRewardAsset = getSapiV1StakingPositionResponseBody200ExtraRewardAsset,
      getSapiV1StakingPositionResponseBody200InterestEndDate = getSapiV1StakingPositionResponseBody200InterestEndDate,
      getSapiV1StakingPositionResponseBody200NextInterestPay = getSapiV1StakingPositionResponseBody200NextInterestPay,
      getSapiV1StakingPositionResponseBody200NextInterestPayDate = getSapiV1StakingPositionResponseBody200NextInterestPayDate,
      getSapiV1StakingPositionResponseBody200PartialAmtDeliverDate = getSapiV1StakingPositionResponseBody200PartialAmtDeliverDate,
      getSapiV1StakingPositionResponseBody200PayInterestPeriod = getSapiV1StakingPositionResponseBody200PayInterestPeriod,
      getSapiV1StakingPositionResponseBody200PositionId = getSapiV1StakingPositionResponseBody200PositionId,
      getSapiV1StakingPositionResponseBody200ProjectId = getSapiV1StakingPositionResponseBody200ProjectId,
      getSapiV1StakingPositionResponseBody200PurchaseTime = getSapiV1StakingPositionResponseBody200PurchaseTime,
      getSapiV1StakingPositionResponseBody200RedeemAmountEarly = getSapiV1StakingPositionResponseBody200RedeemAmountEarly,
      getSapiV1StakingPositionResponseBody200RedeemPeriod = getSapiV1StakingPositionResponseBody200RedeemPeriod,
      getSapiV1StakingPositionResponseBody200RedeemingAmt = getSapiV1StakingPositionResponseBody200RedeemingAmt,
      getSapiV1StakingPositionResponseBody200Renewable = getSapiV1StakingPositionResponseBody200Renewable,
      getSapiV1StakingPositionResponseBody200RewardAmt = getSapiV1StakingPositionResponseBody200RewardAmt,
      getSapiV1StakingPositionResponseBody200RewardAsset = getSapiV1StakingPositionResponseBody200RewardAsset,
      getSapiV1StakingPositionResponseBody200Status = getSapiV1StakingPositionResponseBody200Status,
      getSapiV1StakingPositionResponseBody200Type = getSapiV1StakingPositionResponseBody200Type
    }

-- | > GET /sapi/v1/staking/position
--
-- The same as 'getSapiV1StakingPosition' but accepts an explicit configuration.
getSapiV1StakingPositionWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingPositionParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1StakingPositionResponse)
getSapiV1StakingPositionWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1StakingPositionResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingPositionResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1StakingPositionResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingPositionResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1StakingPositionResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/staking/position")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "productId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryProductId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/staking/position
--
-- The same as 'getSapiV1StakingPosition' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1StakingPositionRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingPositionParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1StakingPositionRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/staking/position")
        [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "productId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryProductId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/staking/position
--
-- The same as 'getSapiV1StakingPosition' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1StakingPositionWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1StakingPositionParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1StakingPositionWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/staking/position")
          [ Binance.Common.QueryParameter (Data.Text.pack "product") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQueryProduct parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "productId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryProductId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "current") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryCurrent parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1StakingPositionParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1StakingPositionParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
