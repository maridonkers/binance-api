{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1BswapSwap
module Binance.Operations.PostSapiV1BswapSwap where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/bswap/swap
--
-- Swap \`quoteAsset\` for \`baseAsset\`.
--
-- Weight(UID): 1000 (Additional: 3 times one second)
postSapiV1BswapSwap ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapSwapParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1BswapSwapResponse)
postSapiV1BswapSwap parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1BswapSwapResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BswapSwapResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1BswapSwapResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BswapSwapResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BswapSwapResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/bswap/swap")
        [ Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryBaseAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapSwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/swap.POST.parameters@ in the specification.
data PostSapiV1BswapSwapParameters = PostSapiV1BswapSwapParameters
  { -- | queryBaseAsset: Represents the parameter named \'baseAsset\'
    postSapiV1BswapSwapParametersQueryBaseAsset :: Data.Text.Internal.Text,
    -- | queryQuoteAsset: Represents the parameter named \'quoteAsset\'
    postSapiV1BswapSwapParametersQueryQuoteAsset :: Data.Text.Internal.Text,
    -- | queryQuoteQty: Represents the parameter named \'quoteQty\'
    postSapiV1BswapSwapParametersQueryQuoteQty :: GHC.Types.Double,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1BswapSwapParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1BswapSwapParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1BswapSwapParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BswapSwapParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryBaseAsset" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQueryBaseAsset obj] : ["queryQuoteAsset" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQueryQuoteAsset obj] : ["queryQuoteQty" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQueryQuoteQty obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapSwapParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryBaseAsset" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQueryBaseAsset obj] : ["queryQuoteAsset" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQueryQuoteAsset obj] : ["queryQuoteQty" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQueryQuoteQty obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapSwapParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BswapSwapParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BswapSwapParameters" (\obj -> (((((GHC.Base.pure PostSapiV1BswapSwapParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryBaseAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuoteAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1BswapSwapParameters' with all required fields.
mkPostSapiV1BswapSwapParameters ::
  -- | 'postSapiV1BswapSwapParametersQueryBaseAsset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BswapSwapParametersQueryQuoteAsset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BswapSwapParametersQueryQuoteQty'
  GHC.Types.Double ->
  -- | 'postSapiV1BswapSwapParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BswapSwapParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1BswapSwapParameters
mkPostSapiV1BswapSwapParameters postSapiV1BswapSwapParametersQueryBaseAsset postSapiV1BswapSwapParametersQueryQuoteAsset postSapiV1BswapSwapParametersQueryQuoteQty postSapiV1BswapSwapParametersQuerySignature postSapiV1BswapSwapParametersQueryTimestamp =
  PostSapiV1BswapSwapParameters
    { postSapiV1BswapSwapParametersQueryBaseAsset = postSapiV1BswapSwapParametersQueryBaseAsset,
      postSapiV1BswapSwapParametersQueryQuoteAsset = postSapiV1BswapSwapParametersQueryQuoteAsset,
      postSapiV1BswapSwapParametersQueryQuoteQty = postSapiV1BswapSwapParametersQueryQuoteQty,
      postSapiV1BswapSwapParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1BswapSwapParametersQuerySignature = postSapiV1BswapSwapParametersQuerySignature,
      postSapiV1BswapSwapParametersQueryTimestamp = postSapiV1BswapSwapParametersQueryTimestamp
    }

-- | Represents a response of the operation 'postSapiV1BswapSwap'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1BswapSwapResponseError' is used.
data PostSapiV1BswapSwapResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1BswapSwapResponseError GHC.Base.String
  | -- | Swap Id
    PostSapiV1BswapSwapResponse200 PostSapiV1BswapSwapResponseBody200
  | -- | Bad Request
    PostSapiV1BswapSwapResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1BswapSwapResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/swap.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1BswapSwapResponseBody200 = PostSapiV1BswapSwapResponseBody200
  { -- | swapId
    postSapiV1BswapSwapResponseBody200SwapId :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BswapSwapResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["swapId" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapResponseBody200SwapId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["swapId" Data.Aeson.Types.ToJSON..= postSapiV1BswapSwapResponseBody200SwapId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BswapSwapResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BswapSwapResponseBody200" (\obj -> GHC.Base.pure PostSapiV1BswapSwapResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "swapId"))

-- | Create a new 'PostSapiV1BswapSwapResponseBody200' with all required fields.
mkPostSapiV1BswapSwapResponseBody200 ::
  -- | 'postSapiV1BswapSwapResponseBody200SwapId'
  GHC.Int.Int64 ->
  PostSapiV1BswapSwapResponseBody200
mkPostSapiV1BswapSwapResponseBody200 postSapiV1BswapSwapResponseBody200SwapId = PostSapiV1BswapSwapResponseBody200 {postSapiV1BswapSwapResponseBody200SwapId = postSapiV1BswapSwapResponseBody200SwapId}

-- | > POST /sapi/v1/bswap/swap
--
-- The same as 'postSapiV1BswapSwap' but accepts an explicit configuration.
postSapiV1BswapSwapWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapSwapParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1BswapSwapResponse)
postSapiV1BswapSwapWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1BswapSwapResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BswapSwapResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1BswapSwapResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BswapSwapResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BswapSwapResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/bswap/swap")
          [ Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryBaseAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapSwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/bswap/swap
--
-- The same as 'postSapiV1BswapSwap' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BswapSwapRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapSwapParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BswapSwapRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/bswap/swap")
        [ Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryBaseAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapSwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/bswap/swap
--
-- The same as 'postSapiV1BswapSwap' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BswapSwapWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapSwapParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BswapSwapWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/bswap/swap")
          [ Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryBaseAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapSwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapSwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
