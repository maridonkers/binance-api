{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1GiftcardRedeemCode
module Binance.Operations.PostSapiV1GiftcardRedeemCode where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/giftcard/redeemCode
--
-- This API is for redeeming the Binance Code. Once redeemed, the coins will be deposited in your funding wallet.
--
-- Please note that if you enter the wrong code 5 times within 24 hours, you will no longer be able to redeem any Binance Code that day.
--
-- Weight(IP): 1
postSapiV1GiftcardRedeemCode ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1GiftcardRedeemCodeParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1GiftcardRedeemCodeResponse)
postSapiV1GiftcardRedeemCode parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1GiftcardRedeemCodeResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1GiftcardRedeemCodeResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1GiftcardRedeemCodeResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1GiftcardRedeemCodeResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1GiftcardRedeemCodeResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/giftcard/redeemCode")
        [ Binance.Common.QueryParameter (Data.Text.pack "code") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQueryCode parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "externalUid") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1GiftcardRedeemCodeParametersQueryExternalUid parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1GiftcardRedeemCodeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/giftcard\/redeemCode.POST.parameters@ in the specification.
data PostSapiV1GiftcardRedeemCodeParameters = PostSapiV1GiftcardRedeemCodeParameters
  { -- | queryCode: Represents the parameter named \'code\'
    --
    -- Binance Code
    postSapiV1GiftcardRedeemCodeParametersQueryCode :: Data.Text.Internal.Text,
    -- | queryExternalUid: Represents the parameter named \'externalUid\'
    --
    -- Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner\'s daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters).
    postSapiV1GiftcardRedeemCodeParametersQueryExternalUid :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1GiftcardRedeemCodeParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1GiftcardRedeemCodeParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1GiftcardRedeemCodeParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1GiftcardRedeemCodeParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryCode" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeParametersQueryCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExternalUid" Data.Aeson.Types.ToJSON..=)) (postSapiV1GiftcardRedeemCodeParametersQueryExternalUid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1GiftcardRedeemCodeParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryCode" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeParametersQueryCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExternalUid" Data.Aeson.Types.ToJSON..=)) (postSapiV1GiftcardRedeemCodeParametersQueryExternalUid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1GiftcardRedeemCodeParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1GiftcardRedeemCodeParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1GiftcardRedeemCodeParameters" (\obj -> ((((GHC.Base.pure PostSapiV1GiftcardRedeemCodeParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryCode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExternalUid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1GiftcardRedeemCodeParameters' with all required fields.
mkPostSapiV1GiftcardRedeemCodeParameters ::
  -- | 'postSapiV1GiftcardRedeemCodeParametersQueryCode'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1GiftcardRedeemCodeParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1GiftcardRedeemCodeParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1GiftcardRedeemCodeParameters
mkPostSapiV1GiftcardRedeemCodeParameters postSapiV1GiftcardRedeemCodeParametersQueryCode postSapiV1GiftcardRedeemCodeParametersQuerySignature postSapiV1GiftcardRedeemCodeParametersQueryTimestamp =
  PostSapiV1GiftcardRedeemCodeParameters
    { postSapiV1GiftcardRedeemCodeParametersQueryCode = postSapiV1GiftcardRedeemCodeParametersQueryCode,
      postSapiV1GiftcardRedeemCodeParametersQueryExternalUid = GHC.Maybe.Nothing,
      postSapiV1GiftcardRedeemCodeParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1GiftcardRedeemCodeParametersQuerySignature = postSapiV1GiftcardRedeemCodeParametersQuerySignature,
      postSapiV1GiftcardRedeemCodeParametersQueryTimestamp = postSapiV1GiftcardRedeemCodeParametersQueryTimestamp
    }

-- | Represents a response of the operation 'postSapiV1GiftcardRedeemCode'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1GiftcardRedeemCodeResponseError' is used.
data PostSapiV1GiftcardRedeemCodeResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1GiftcardRedeemCodeResponseError GHC.Base.String
  | -- | Redeemed Information
    PostSapiV1GiftcardRedeemCodeResponse200 PostSapiV1GiftcardRedeemCodeResponseBody200
  | -- | Bad Request
    PostSapiV1GiftcardRedeemCodeResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1GiftcardRedeemCodeResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/giftcard\/redeemCode.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1GiftcardRedeemCodeResponseBody200 = PostSapiV1GiftcardRedeemCodeResponseBody200
  { -- | code
    postSapiV1GiftcardRedeemCodeResponseBody200Code :: Data.Text.Internal.Text,
    -- | data
    postSapiV1GiftcardRedeemCodeResponseBody200Data :: PostSapiV1GiftcardRedeemCodeResponseBody200Data,
    -- | message
    postSapiV1GiftcardRedeemCodeResponseBody200Message :: Data.Text.Internal.Text,
    -- | success
    postSapiV1GiftcardRedeemCodeResponseBody200Success :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1GiftcardRedeemCodeResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200Data obj] : ["message" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200Message obj] : ["success" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200Success obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200Data obj] : ["message" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200Message obj] : ["success" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200Success obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1GiftcardRedeemCodeResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1GiftcardRedeemCodeResponseBody200" (\obj -> (((GHC.Base.pure PostSapiV1GiftcardRedeemCodeResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success"))

-- | Create a new 'PostSapiV1GiftcardRedeemCodeResponseBody200' with all required fields.
mkPostSapiV1GiftcardRedeemCodeResponseBody200 ::
  -- | 'postSapiV1GiftcardRedeemCodeResponseBody200Code'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1GiftcardRedeemCodeResponseBody200Data'
  PostSapiV1GiftcardRedeemCodeResponseBody200Data ->
  -- | 'postSapiV1GiftcardRedeemCodeResponseBody200Message'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1GiftcardRedeemCodeResponseBody200Success'
  GHC.Types.Bool ->
  PostSapiV1GiftcardRedeemCodeResponseBody200
mkPostSapiV1GiftcardRedeemCodeResponseBody200 postSapiV1GiftcardRedeemCodeResponseBody200Code postSapiV1GiftcardRedeemCodeResponseBody200Data postSapiV1GiftcardRedeemCodeResponseBody200Message postSapiV1GiftcardRedeemCodeResponseBody200Success =
  PostSapiV1GiftcardRedeemCodeResponseBody200
    { postSapiV1GiftcardRedeemCodeResponseBody200Code = postSapiV1GiftcardRedeemCodeResponseBody200Code,
      postSapiV1GiftcardRedeemCodeResponseBody200Data = postSapiV1GiftcardRedeemCodeResponseBody200Data,
      postSapiV1GiftcardRedeemCodeResponseBody200Message = postSapiV1GiftcardRedeemCodeResponseBody200Message,
      postSapiV1GiftcardRedeemCodeResponseBody200Success = postSapiV1GiftcardRedeemCodeResponseBody200Success
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/giftcard\/redeemCode.POST.responses.200.content.application\/json.schema.properties.data@ in the specification.
data PostSapiV1GiftcardRedeemCodeResponseBody200Data = PostSapiV1GiftcardRedeemCodeResponseBody200Data
  { -- | amount
    postSapiV1GiftcardRedeemCodeResponseBody200DataAmount :: Data.Text.Internal.Text,
    -- | identityNo
    postSapiV1GiftcardRedeemCodeResponseBody200DataIdentityNo :: Data.Text.Internal.Text,
    -- | referenceNo
    postSapiV1GiftcardRedeemCodeResponseBody200DataReferenceNo :: Data.Text.Internal.Text,
    -- | token
    postSapiV1GiftcardRedeemCodeResponseBody200DataToken :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1GiftcardRedeemCodeResponseBody200Data where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200DataAmount obj] : ["identityNo" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200DataIdentityNo obj] : ["referenceNo" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200DataReferenceNo obj] : ["token" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200DataToken obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200DataAmount obj] : ["identityNo" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200DataIdentityNo obj] : ["referenceNo" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200DataReferenceNo obj] : ["token" Data.Aeson.Types.ToJSON..= postSapiV1GiftcardRedeemCodeResponseBody200DataToken obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1GiftcardRedeemCodeResponseBody200Data where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1GiftcardRedeemCodeResponseBody200Data" (\obj -> (((GHC.Base.pure PostSapiV1GiftcardRedeemCodeResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "identityNo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "referenceNo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token"))

-- | Create a new 'PostSapiV1GiftcardRedeemCodeResponseBody200Data' with all required fields.
mkPostSapiV1GiftcardRedeemCodeResponseBody200Data ::
  -- | 'postSapiV1GiftcardRedeemCodeResponseBody200DataAmount'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1GiftcardRedeemCodeResponseBody200DataIdentityNo'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1GiftcardRedeemCodeResponseBody200DataReferenceNo'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1GiftcardRedeemCodeResponseBody200DataToken'
  Data.Text.Internal.Text ->
  PostSapiV1GiftcardRedeemCodeResponseBody200Data
mkPostSapiV1GiftcardRedeemCodeResponseBody200Data postSapiV1GiftcardRedeemCodeResponseBody200DataAmount postSapiV1GiftcardRedeemCodeResponseBody200DataIdentityNo postSapiV1GiftcardRedeemCodeResponseBody200DataReferenceNo postSapiV1GiftcardRedeemCodeResponseBody200DataToken =
  PostSapiV1GiftcardRedeemCodeResponseBody200Data
    { postSapiV1GiftcardRedeemCodeResponseBody200DataAmount = postSapiV1GiftcardRedeemCodeResponseBody200DataAmount,
      postSapiV1GiftcardRedeemCodeResponseBody200DataIdentityNo = postSapiV1GiftcardRedeemCodeResponseBody200DataIdentityNo,
      postSapiV1GiftcardRedeemCodeResponseBody200DataReferenceNo = postSapiV1GiftcardRedeemCodeResponseBody200DataReferenceNo,
      postSapiV1GiftcardRedeemCodeResponseBody200DataToken = postSapiV1GiftcardRedeemCodeResponseBody200DataToken
    }

-- | > POST /sapi/v1/giftcard/redeemCode
--
-- The same as 'postSapiV1GiftcardRedeemCode' but accepts an explicit configuration.
postSapiV1GiftcardRedeemCodeWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1GiftcardRedeemCodeParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1GiftcardRedeemCodeResponse)
postSapiV1GiftcardRedeemCodeWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1GiftcardRedeemCodeResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1GiftcardRedeemCodeResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1GiftcardRedeemCodeResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1GiftcardRedeemCodeResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1GiftcardRedeemCodeResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/giftcard/redeemCode")
          [ Binance.Common.QueryParameter (Data.Text.pack "code") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQueryCode parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "externalUid") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1GiftcardRedeemCodeParametersQueryExternalUid parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1GiftcardRedeemCodeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/giftcard/redeemCode
--
-- The same as 'postSapiV1GiftcardRedeemCode' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1GiftcardRedeemCodeRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1GiftcardRedeemCodeParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1GiftcardRedeemCodeRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/giftcard/redeemCode")
        [ Binance.Common.QueryParameter (Data.Text.pack "code") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQueryCode parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "externalUid") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1GiftcardRedeemCodeParametersQueryExternalUid parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1GiftcardRedeemCodeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/giftcard/redeemCode
--
-- The same as 'postSapiV1GiftcardRedeemCode' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1GiftcardRedeemCodeWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1GiftcardRedeemCodeParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1GiftcardRedeemCodeWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/giftcard/redeemCode")
          [ Binance.Common.QueryParameter (Data.Text.pack "code") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQueryCode parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "externalUid") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1GiftcardRedeemCodeParametersQueryExternalUid parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1GiftcardRedeemCodeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1GiftcardRedeemCodeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
