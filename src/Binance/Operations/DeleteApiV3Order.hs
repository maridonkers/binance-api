{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation deleteApiV3Order
module Binance.Operations.DeleteApiV3Order where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > DELETE /api/v3/order
--
-- Cancel an active order.
--
-- Either \`orderId\` or \`origClientOrderId\` must be sent.
--
-- Weight(IP): 1
deleteApiV3Order ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteApiV3OrderParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteApiV3OrderResponse)
deleteApiV3Order parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either DeleteApiV3OrderResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   DeleteApiV3OrderResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Order
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   DeleteApiV3OrderResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   DeleteApiV3OrderResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE")
        (Data.Text.pack "/api/v3/order")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "orderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "origClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryOrigClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/order.DELETE.parameters@ in the specification.
data DeleteApiV3OrderParameters = DeleteApiV3OrderParameters
  { -- | queryNewClientOrderId: Represents the parameter named \'newClientOrderId\'
    --
    -- Used to uniquely identify this cancel. Automatically generated by default
    deleteApiV3OrderParametersQueryNewClientOrderId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryOrderId: Represents the parameter named \'orderId\'
    --
    -- Order id
    deleteApiV3OrderParametersQueryOrderId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryOrigClientOrderId: Represents the parameter named \'origClientOrderId\'
    --
    -- Order id from client
    deleteApiV3OrderParametersQueryOrigClientOrderId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    deleteApiV3OrderParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    deleteApiV3OrderParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    deleteApiV3OrderParametersQuerySymbol :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    deleteApiV3OrderParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteApiV3OrderParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewClientOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderParametersQueryNewClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderParametersQueryOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrigClientOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderParametersQueryOrigClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= deleteApiV3OrderParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= deleteApiV3OrderParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= deleteApiV3OrderParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNewClientOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderParametersQueryNewClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderParametersQueryOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrigClientOrderId" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderParametersQueryOrigClientOrderId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (deleteApiV3OrderParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= deleteApiV3OrderParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= deleteApiV3OrderParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= deleteApiV3OrderParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteApiV3OrderParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteApiV3OrderParameters" (\obj -> ((((((GHC.Base.pure DeleteApiV3OrderParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryNewClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrigClientOrderId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'DeleteApiV3OrderParameters' with all required fields.
mkDeleteApiV3OrderParameters ::
  -- | 'deleteApiV3OrderParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'deleteApiV3OrderParametersQuerySymbol'
  Data.Text.Internal.Text ->
  -- | 'deleteApiV3OrderParametersQueryTimestamp'
  GHC.Int.Int64 ->
  DeleteApiV3OrderParameters
mkDeleteApiV3OrderParameters deleteApiV3OrderParametersQuerySignature deleteApiV3OrderParametersQuerySymbol deleteApiV3OrderParametersQueryTimestamp =
  DeleteApiV3OrderParameters
    { deleteApiV3OrderParametersQueryNewClientOrderId = GHC.Maybe.Nothing,
      deleteApiV3OrderParametersQueryOrderId = GHC.Maybe.Nothing,
      deleteApiV3OrderParametersQueryOrigClientOrderId = GHC.Maybe.Nothing,
      deleteApiV3OrderParametersQueryRecvWindow = GHC.Maybe.Nothing,
      deleteApiV3OrderParametersQuerySignature = deleteApiV3OrderParametersQuerySignature,
      deleteApiV3OrderParametersQuerySymbol = deleteApiV3OrderParametersQuerySymbol,
      deleteApiV3OrderParametersQueryTimestamp = deleteApiV3OrderParametersQueryTimestamp
    }

-- | Represents a response of the operation 'deleteApiV3Order'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteApiV3OrderResponseError' is used.
data DeleteApiV3OrderResponse
  = -- | Means either no matching case available or a parse error
    DeleteApiV3OrderResponseError GHC.Base.String
  | -- | Cancelled order
    DeleteApiV3OrderResponse200 Order
  | -- | Bad Request
    DeleteApiV3OrderResponse400 Error
  | -- | Unauthorized Request
    DeleteApiV3OrderResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | > DELETE /api/v3/order
--
-- The same as 'deleteApiV3Order' but accepts an explicit configuration.
deleteApiV3OrderWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteApiV3OrderParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response DeleteApiV3OrderResponse)
deleteApiV3OrderWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either DeleteApiV3OrderResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteApiV3OrderResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Order
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteApiV3OrderResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteApiV3OrderResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE")
          (Data.Text.pack "/api/v3/order")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "orderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "origClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryOrigClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > DELETE /api/v3/order
--
-- The same as 'deleteApiV3Order' but returns the raw 'Data.ByteString.Char8.ByteString'.
deleteApiV3OrderRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteApiV3OrderParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
deleteApiV3OrderRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE")
        (Data.Text.pack "/api/v3/order")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "orderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "origClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryOrigClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > DELETE /api/v3/order
--
-- The same as 'deleteApiV3Order' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
deleteApiV3OrderWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteApiV3OrderParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
deleteApiV3OrderWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE")
          (Data.Text.pack "/api/v3/order")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "orderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "origClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryOrigClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "newClientOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryNewClientOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> deleteApiV3OrderParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (deleteApiV3OrderParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
