{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1NftHistoryTransactions
module Binance.Operations.GetSapiV1NftHistoryTransactions where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/nft/history/transactions
--
-- - The max interval between startTime and endTime is 90 days.
-- - If startTime and endTime are not sent, the recent 7 days\' data will be returned.
--
-- Weight(UID): 3000
getSapiV1NftHistoryTransactions ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1NftHistoryTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1NftHistoryTransactionsResponse)
getSapiV1NftHistoryTransactions parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1NftHistoryTransactionsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1NftHistoryTransactionsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1NftHistoryTransactionsResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1NftHistoryTransactionsResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1NftHistoryTransactionsResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/nft/history/transactions")
        [ Binance.Common.QueryParameter (Data.Text.pack "orderType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQueryOrderType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/nft\/history\/transactions.GET.parameters@ in the specification.
data GetSapiV1NftHistoryTransactionsParameters = GetSapiV1NftHistoryTransactionsParameters
  { -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1NftHistoryTransactionsParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- Default 50, Max 50
    getSapiV1NftHistoryTransactionsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryOrderType: Represents the parameter named \'orderType\'
    --
    -- 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
    getSapiV1NftHistoryTransactionsParametersQueryOrderType :: GHC.Int.Int32,
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- Default 1
    getSapiV1NftHistoryTransactionsParametersQueryPage :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1NftHistoryTransactionsParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1NftHistoryTransactionsParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1NftHistoryTransactionsParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1NftHistoryTransactionsParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1NftHistoryTransactionsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryLimit obj) : ["queryOrderType" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsParametersQueryOrderType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryLimit obj) : ["queryOrderType" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsParametersQueryOrderType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1NftHistoryTransactionsParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1NftHistoryTransactionsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1NftHistoryTransactionsParameters" (\obj -> (((((((GHC.Base.pure GetSapiV1NftHistoryTransactionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryOrderType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1NftHistoryTransactionsParameters' with all required fields.
mkGetSapiV1NftHistoryTransactionsParameters ::
  -- | 'getSapiV1NftHistoryTransactionsParametersQueryOrderType'
  GHC.Int.Int32 ->
  -- | 'getSapiV1NftHistoryTransactionsParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryTransactionsParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1NftHistoryTransactionsParameters
mkGetSapiV1NftHistoryTransactionsParameters getSapiV1NftHistoryTransactionsParametersQueryOrderType getSapiV1NftHistoryTransactionsParametersQuerySignature getSapiV1NftHistoryTransactionsParametersQueryTimestamp =
  GetSapiV1NftHistoryTransactionsParameters
    { getSapiV1NftHistoryTransactionsParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1NftHistoryTransactionsParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1NftHistoryTransactionsParametersQueryOrderType = getSapiV1NftHistoryTransactionsParametersQueryOrderType,
      getSapiV1NftHistoryTransactionsParametersQueryPage = GHC.Maybe.Nothing,
      getSapiV1NftHistoryTransactionsParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1NftHistoryTransactionsParametersQuerySignature = getSapiV1NftHistoryTransactionsParametersQuerySignature,
      getSapiV1NftHistoryTransactionsParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1NftHistoryTransactionsParametersQueryTimestamp = getSapiV1NftHistoryTransactionsParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1NftHistoryTransactions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1NftHistoryTransactionsResponseError' is used.
data GetSapiV1NftHistoryTransactionsResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1NftHistoryTransactionsResponseError GHC.Base.String
  | -- | NFT Transaction History
    GetSapiV1NftHistoryTransactionsResponse200 GetSapiV1NftHistoryTransactionsResponseBody200
  | -- | Bad Request
    GetSapiV1NftHistoryTransactionsResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1NftHistoryTransactionsResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/nft\/history\/transactions.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1NftHistoryTransactionsResponseBody200 = GetSapiV1NftHistoryTransactionsResponseBody200
  { -- | list
    getSapiV1NftHistoryTransactionsResponseBody200List :: ([GetSapiV1NftHistoryTransactionsResponseBody200List]),
    -- | total
    getSapiV1NftHistoryTransactionsResponseBody200Total :: GHC.Int.Int32
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1NftHistoryTransactionsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["list" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200List obj] : ["total" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200Total obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["list" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200List obj] : ["total" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200Total obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1NftHistoryTransactionsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1NftHistoryTransactionsResponseBody200" (\obj -> (GHC.Base.pure GetSapiV1NftHistoryTransactionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "list")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total"))

-- | Create a new 'GetSapiV1NftHistoryTransactionsResponseBody200' with all required fields.
mkGetSapiV1NftHistoryTransactionsResponseBody200 ::
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200List'
  [GetSapiV1NftHistoryTransactionsResponseBody200List] ->
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200Total'
  GHC.Int.Int32 ->
  GetSapiV1NftHistoryTransactionsResponseBody200
mkGetSapiV1NftHistoryTransactionsResponseBody200 getSapiV1NftHistoryTransactionsResponseBody200List getSapiV1NftHistoryTransactionsResponseBody200Total =
  GetSapiV1NftHistoryTransactionsResponseBody200
    { getSapiV1NftHistoryTransactionsResponseBody200List = getSapiV1NftHistoryTransactionsResponseBody200List,
      getSapiV1NftHistoryTransactionsResponseBody200Total = getSapiV1NftHistoryTransactionsResponseBody200Total
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/nft\/history\/transactions.GET.responses.200.content.application\/json.schema.properties.list.items@ in the specification.
data GetSapiV1NftHistoryTransactionsResponseBody200List = GetSapiV1NftHistoryTransactionsResponseBody200List
  { -- | orderNo: 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
    getSapiV1NftHistoryTransactionsResponseBody200ListOrderNo :: Data.Text.Internal.Text,
    -- | tokens
    getSapiV1NftHistoryTransactionsResponseBody200ListTokens :: ([GetSapiV1NftHistoryTransactionsResponseBody200ListTokens]),
    -- | tradeAmount
    getSapiV1NftHistoryTransactionsResponseBody200ListTradeAmount :: Data.Text.Internal.Text,
    -- | tradeCurrency
    getSapiV1NftHistoryTransactionsResponseBody200ListTradeCurrency :: Data.Text.Internal.Text,
    -- | tradeTime
    getSapiV1NftHistoryTransactionsResponseBody200ListTradeTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1NftHistoryTransactionsResponseBody200List where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["orderNo" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListOrderNo obj] : ["tokens" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTokens obj] : ["tradeAmount" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTradeAmount obj] : ["tradeCurrency" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTradeCurrency obj] : ["tradeTime" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTradeTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["orderNo" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListOrderNo obj] : ["tokens" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTokens obj] : ["tradeAmount" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTradeAmount obj] : ["tradeCurrency" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTradeCurrency obj] : ["tradeTime" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTradeTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1NftHistoryTransactionsResponseBody200List where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1NftHistoryTransactionsResponseBody200List" (\obj -> ((((GHC.Base.pure GetSapiV1NftHistoryTransactionsResponseBody200List GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "orderNo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokens")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tradeAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tradeCurrency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tradeTime"))

-- | Create a new 'GetSapiV1NftHistoryTransactionsResponseBody200List' with all required fields.
mkGetSapiV1NftHistoryTransactionsResponseBody200List ::
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200ListOrderNo'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200ListTokens'
  [GetSapiV1NftHistoryTransactionsResponseBody200ListTokens] ->
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200ListTradeAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200ListTradeCurrency'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200ListTradeTime'
  GHC.Int.Int64 ->
  GetSapiV1NftHistoryTransactionsResponseBody200List
mkGetSapiV1NftHistoryTransactionsResponseBody200List getSapiV1NftHistoryTransactionsResponseBody200ListOrderNo getSapiV1NftHistoryTransactionsResponseBody200ListTokens getSapiV1NftHistoryTransactionsResponseBody200ListTradeAmount getSapiV1NftHistoryTransactionsResponseBody200ListTradeCurrency getSapiV1NftHistoryTransactionsResponseBody200ListTradeTime =
  GetSapiV1NftHistoryTransactionsResponseBody200List
    { getSapiV1NftHistoryTransactionsResponseBody200ListOrderNo = getSapiV1NftHistoryTransactionsResponseBody200ListOrderNo,
      getSapiV1NftHistoryTransactionsResponseBody200ListTokens = getSapiV1NftHistoryTransactionsResponseBody200ListTokens,
      getSapiV1NftHistoryTransactionsResponseBody200ListTradeAmount = getSapiV1NftHistoryTransactionsResponseBody200ListTradeAmount,
      getSapiV1NftHistoryTransactionsResponseBody200ListTradeCurrency = getSapiV1NftHistoryTransactionsResponseBody200ListTradeCurrency,
      getSapiV1NftHistoryTransactionsResponseBody200ListTradeTime = getSapiV1NftHistoryTransactionsResponseBody200ListTradeTime
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/nft\/history\/transactions.GET.responses.200.content.application\/json.schema.properties.list.items.properties.tokens.items@ in the specification.
data GetSapiV1NftHistoryTransactionsResponseBody200ListTokens = GetSapiV1NftHistoryTransactionsResponseBody200ListTokens
  { -- | contractAddress
    getSapiV1NftHistoryTransactionsResponseBody200ListTokensContractAddress :: Data.Text.Internal.Text,
    -- | network
    getSapiV1NftHistoryTransactionsResponseBody200ListTokensNetwork :: Data.Text.Internal.Text,
    -- | tokenId
    getSapiV1NftHistoryTransactionsResponseBody200ListTokensTokenId :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1NftHistoryTransactionsResponseBody200ListTokens where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["contractAddress" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTokensContractAddress obj] : ["network" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTokensNetwork obj] : ["tokenId" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTokensTokenId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["contractAddress" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTokensContractAddress obj] : ["network" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTokensNetwork obj] : ["tokenId" Data.Aeson.Types.ToJSON..= getSapiV1NftHistoryTransactionsResponseBody200ListTokensTokenId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1NftHistoryTransactionsResponseBody200ListTokens where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1NftHistoryTransactionsResponseBody200ListTokens" (\obj -> ((GHC.Base.pure GetSapiV1NftHistoryTransactionsResponseBody200ListTokens GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "contractAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokenId"))

-- | Create a new 'GetSapiV1NftHistoryTransactionsResponseBody200ListTokens' with all required fields.
mkGetSapiV1NftHistoryTransactionsResponseBody200ListTokens ::
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200ListTokensContractAddress'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200ListTokensNetwork'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1NftHistoryTransactionsResponseBody200ListTokensTokenId'
  Data.Text.Internal.Text ->
  GetSapiV1NftHistoryTransactionsResponseBody200ListTokens
mkGetSapiV1NftHistoryTransactionsResponseBody200ListTokens getSapiV1NftHistoryTransactionsResponseBody200ListTokensContractAddress getSapiV1NftHistoryTransactionsResponseBody200ListTokensNetwork getSapiV1NftHistoryTransactionsResponseBody200ListTokensTokenId =
  GetSapiV1NftHistoryTransactionsResponseBody200ListTokens
    { getSapiV1NftHistoryTransactionsResponseBody200ListTokensContractAddress = getSapiV1NftHistoryTransactionsResponseBody200ListTokensContractAddress,
      getSapiV1NftHistoryTransactionsResponseBody200ListTokensNetwork = getSapiV1NftHistoryTransactionsResponseBody200ListTokensNetwork,
      getSapiV1NftHistoryTransactionsResponseBody200ListTokensTokenId = getSapiV1NftHistoryTransactionsResponseBody200ListTokensTokenId
    }

-- | > GET /sapi/v1/nft/history/transactions
--
-- The same as 'getSapiV1NftHistoryTransactions' but accepts an explicit configuration.
getSapiV1NftHistoryTransactionsWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1NftHistoryTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1NftHistoryTransactionsResponse)
getSapiV1NftHistoryTransactionsWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1NftHistoryTransactionsResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1NftHistoryTransactionsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1NftHistoryTransactionsResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1NftHistoryTransactionsResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1NftHistoryTransactionsResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/nft/history/transactions")
          [ Binance.Common.QueryParameter (Data.Text.pack "orderType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQueryOrderType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/nft/history/transactions
--
-- The same as 'getSapiV1NftHistoryTransactions' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1NftHistoryTransactionsRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1NftHistoryTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1NftHistoryTransactionsRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/nft/history/transactions")
        [ Binance.Common.QueryParameter (Data.Text.pack "orderType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQueryOrderType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/nft/history/transactions
--
-- The same as 'getSapiV1NftHistoryTransactions' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1NftHistoryTransactionsWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1NftHistoryTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1NftHistoryTransactionsWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/nft/history/transactions")
          [ Binance.Common.QueryParameter (Data.Text.pack "orderType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQueryOrderType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1NftHistoryTransactionsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1NftHistoryTransactionsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
