{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MiningPaymentList
module Binance.Operations.GetSapiV1MiningPaymentList where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/mining/payment/list
--
-- Weight(IP): 5
getSapiV1MiningPaymentList ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPaymentListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MiningPaymentListResponse)
getSapiV1MiningPaymentList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MiningPaymentListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPaymentListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1MiningPaymentListResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPaymentListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPaymentListResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/mining/payment/list")
        [ Binance.Common.QueryParameter (Data.Text.pack "algo") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryAlgo parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "userName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryUserName parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "coin") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryCoin parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryStartDate parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryEndDate parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "pageIndex") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryPageIndex parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/payment\/list.GET.parameters@ in the specification.
data GetSapiV1MiningPaymentListParameters = GetSapiV1MiningPaymentListParameters
  { -- | queryAlgo: Represents the parameter named \'algo\'
    --
    -- Algorithm(sha256)
    getSapiV1MiningPaymentListParametersQueryAlgo :: Data.Text.Internal.Text,
    -- | queryCoin: Represents the parameter named \'coin\'
    --
    -- Coin name
    getSapiV1MiningPaymentListParametersQueryCoin :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEndDate: Represents the parameter named \'endDate\'
    --
    -- Search date, millisecond timestamp, while empty query all
    getSapiV1MiningPaymentListParametersQueryEndDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPageIndex: Represents the parameter named \'pageIndex\'
    --
    -- Page number, default is first page, start form 1
    getSapiV1MiningPaymentListParametersQueryPageIndex :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryPageSize: Represents the parameter named \'pageSize\'
    --
    -- Number of pages, minimum 10, maximum 200
    getSapiV1MiningPaymentListParametersQueryPageSize :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1MiningPaymentListParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1MiningPaymentListParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartDate: Represents the parameter named \'startDate\'
    --
    -- Search date, millisecond timestamp, while empty query all
    getSapiV1MiningPaymentListParametersQueryStartDate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1MiningPaymentListParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryUserName: Represents the parameter named \'userName\'
    --
    -- Mining Account
    getSapiV1MiningPaymentListParametersQueryUserName :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPaymentListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAlgo" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListParametersQueryAlgo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCoin" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryCoin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndDate" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryEndDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPageIndex" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryPageIndex obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPageSize" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartDate" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryStartDate obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListParametersQueryTimestamp obj] : ["queryUserName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListParametersQueryUserName obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAlgo" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListParametersQueryAlgo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCoin" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryCoin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndDate" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryEndDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPageIndex" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryPageIndex obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPageSize" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartDate" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPaymentListParametersQueryStartDate obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListParametersQueryTimestamp obj] : ["queryUserName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListParametersQueryUserName obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPaymentListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPaymentListParameters" (\obj -> (((((((((GHC.Base.pure GetSapiV1MiningPaymentListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAlgo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPageIndex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPageSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartDate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryUserName"))

-- | Create a new 'GetSapiV1MiningPaymentListParameters' with all required fields.
mkGetSapiV1MiningPaymentListParameters ::
  -- | 'getSapiV1MiningPaymentListParametersQueryAlgo'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPaymentListParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPaymentListParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPaymentListParametersQueryUserName'
  Data.Text.Internal.Text ->
  GetSapiV1MiningPaymentListParameters
mkGetSapiV1MiningPaymentListParameters getSapiV1MiningPaymentListParametersQueryAlgo getSapiV1MiningPaymentListParametersQuerySignature getSapiV1MiningPaymentListParametersQueryTimestamp getSapiV1MiningPaymentListParametersQueryUserName =
  GetSapiV1MiningPaymentListParameters
    { getSapiV1MiningPaymentListParametersQueryAlgo = getSapiV1MiningPaymentListParametersQueryAlgo,
      getSapiV1MiningPaymentListParametersQueryCoin = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentListParametersQueryEndDate = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentListParametersQueryPageIndex = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentListParametersQueryPageSize = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentListParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentListParametersQuerySignature = getSapiV1MiningPaymentListParametersQuerySignature,
      getSapiV1MiningPaymentListParametersQueryStartDate = GHC.Maybe.Nothing,
      getSapiV1MiningPaymentListParametersQueryTimestamp = getSapiV1MiningPaymentListParametersQueryTimestamp,
      getSapiV1MiningPaymentListParametersQueryUserName = getSapiV1MiningPaymentListParametersQueryUserName
    }

-- | Represents a response of the operation 'getSapiV1MiningPaymentList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MiningPaymentListResponseError' is used.
data GetSapiV1MiningPaymentListResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MiningPaymentListResponseError GHC.Base.String
  | -- | List of earnings
    GetSapiV1MiningPaymentListResponse200 GetSapiV1MiningPaymentListResponseBody200
  | -- | Bad Request
    GetSapiV1MiningPaymentListResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1MiningPaymentListResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/payment\/list.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1MiningPaymentListResponseBody200 = GetSapiV1MiningPaymentListResponseBody200
  { -- | code
    getSapiV1MiningPaymentListResponseBody200Code :: GHC.Int.Int64,
    -- | data
    getSapiV1MiningPaymentListResponseBody200Data :: GetSapiV1MiningPaymentListResponseBody200Data,
    -- | msg
    getSapiV1MiningPaymentListResponseBody200Msg :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPaymentListResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200Data obj] : ["msg" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200Msg obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200Data obj] : ["msg" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200Msg obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPaymentListResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPaymentListResponseBody200" (\obj -> ((GHC.Base.pure GetSapiV1MiningPaymentListResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "msg"))

-- | Create a new 'GetSapiV1MiningPaymentListResponseBody200' with all required fields.
mkGetSapiV1MiningPaymentListResponseBody200 ::
  -- | 'getSapiV1MiningPaymentListResponseBody200Code'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPaymentListResponseBody200Data'
  GetSapiV1MiningPaymentListResponseBody200Data ->
  -- | 'getSapiV1MiningPaymentListResponseBody200Msg'
  Data.Text.Internal.Text ->
  GetSapiV1MiningPaymentListResponseBody200
mkGetSapiV1MiningPaymentListResponseBody200 getSapiV1MiningPaymentListResponseBody200Code getSapiV1MiningPaymentListResponseBody200Data getSapiV1MiningPaymentListResponseBody200Msg =
  GetSapiV1MiningPaymentListResponseBody200
    { getSapiV1MiningPaymentListResponseBody200Code = getSapiV1MiningPaymentListResponseBody200Code,
      getSapiV1MiningPaymentListResponseBody200Data = getSapiV1MiningPaymentListResponseBody200Data,
      getSapiV1MiningPaymentListResponseBody200Msg = getSapiV1MiningPaymentListResponseBody200Msg
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/payment\/list.GET.responses.200.content.application\/json.schema.properties.data@ in the specification.
data GetSapiV1MiningPaymentListResponseBody200Data = GetSapiV1MiningPaymentListResponseBody200Data
  { -- | accountProfits
    getSapiV1MiningPaymentListResponseBody200DataAccountProfits :: ([GetSapiV1MiningPaymentListResponseBody200DataAccountProfits]),
    -- | pageSize: Rows per page
    getSapiV1MiningPaymentListResponseBody200DataPageSize :: GHC.Int.Int64,
    -- | totalNum: Total Rows
    getSapiV1MiningPaymentListResponseBody200DataTotalNum :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPaymentListResponseBody200Data where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["accountProfits" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfits obj] : ["pageSize" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataPageSize obj] : ["totalNum" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataTotalNum obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["accountProfits" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfits obj] : ["pageSize" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataPageSize obj] : ["totalNum" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataTotalNum obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPaymentListResponseBody200Data where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPaymentListResponseBody200Data" (\obj -> ((GHC.Base.pure GetSapiV1MiningPaymentListResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "accountProfits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pageSize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalNum"))

-- | Create a new 'GetSapiV1MiningPaymentListResponseBody200Data' with all required fields.
mkGetSapiV1MiningPaymentListResponseBody200Data ::
  -- | 'getSapiV1MiningPaymentListResponseBody200DataAccountProfits'
  [GetSapiV1MiningPaymentListResponseBody200DataAccountProfits] ->
  -- | 'getSapiV1MiningPaymentListResponseBody200DataPageSize'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPaymentListResponseBody200DataTotalNum'
  GHC.Int.Int64 ->
  GetSapiV1MiningPaymentListResponseBody200Data
mkGetSapiV1MiningPaymentListResponseBody200Data getSapiV1MiningPaymentListResponseBody200DataAccountProfits getSapiV1MiningPaymentListResponseBody200DataPageSize getSapiV1MiningPaymentListResponseBody200DataTotalNum =
  GetSapiV1MiningPaymentListResponseBody200Data
    { getSapiV1MiningPaymentListResponseBody200DataAccountProfits = getSapiV1MiningPaymentListResponseBody200DataAccountProfits,
      getSapiV1MiningPaymentListResponseBody200DataPageSize = getSapiV1MiningPaymentListResponseBody200DataPageSize,
      getSapiV1MiningPaymentListResponseBody200DataTotalNum = getSapiV1MiningPaymentListResponseBody200DataTotalNum
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/payment\/list.GET.responses.200.content.application\/json.schema.properties.data.properties.accountProfits.items@ in the specification.
data GetSapiV1MiningPaymentListResponseBody200DataAccountProfits = GetSapiV1MiningPaymentListResponseBody200DataAccountProfits
  { -- | coinName: Coin Type
    getSapiV1MiningPaymentListResponseBody200DataAccountProfitsCoinName :: Data.Text.Internal.Text,
    -- | dayHashRate: Daily Hashrate
    getSapiV1MiningPaymentListResponseBody200DataAccountProfitsDayHashRate :: GHC.Int.Int64,
    -- | hashTransfer: Transferred Hashrate
    getSapiV1MiningPaymentListResponseBody200DataAccountProfitsHashTransfer :: GHC.Types.Int,
    -- | profitAmount: Earnings Amount
    getSapiV1MiningPaymentListResponseBody200DataAccountProfitsProfitAmount :: GHC.Types.Double,
    -- | status: Status：0:Unpaid, 1:Paying  2：Paid
    getSapiV1MiningPaymentListResponseBody200DataAccountProfitsStatus :: GHC.Int.Int32,
    -- | time: Mining date
    getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTime :: GHC.Int.Int64,
    -- | transferAmount: Transferred Income
    getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTransferAmount :: GHC.Types.Double,
    -- | type: 0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings
    getSapiV1MiningPaymentListResponseBody200DataAccountProfitsType :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPaymentListResponseBody200DataAccountProfits where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["coinName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsCoinName obj] : ["dayHashRate" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsDayHashRate obj] : ["hashTransfer" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsHashTransfer obj] : ["profitAmount" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsProfitAmount obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsStatus obj] : ["time" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTime obj] : ["transferAmount" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTransferAmount obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["coinName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsCoinName obj] : ["dayHashRate" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsDayHashRate obj] : ["hashTransfer" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsHashTransfer obj] : ["profitAmount" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsProfitAmount obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsStatus obj] : ["time" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTime obj] : ["transferAmount" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTransferAmount obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1MiningPaymentListResponseBody200DataAccountProfitsType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPaymentListResponseBody200DataAccountProfits where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPaymentListResponseBody200DataAccountProfits" (\obj -> (((((((GHC.Base.pure GetSapiV1MiningPaymentListResponseBody200DataAccountProfits GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "coinName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dayHashRate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hashTransfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "profitAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transferAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'GetSapiV1MiningPaymentListResponseBody200DataAccountProfits' with all required fields.
mkGetSapiV1MiningPaymentListResponseBody200DataAccountProfits ::
  -- | 'getSapiV1MiningPaymentListResponseBody200DataAccountProfitsCoinName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPaymentListResponseBody200DataAccountProfitsDayHashRate'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPaymentListResponseBody200DataAccountProfitsHashTransfer'
  GHC.Types.Int ->
  -- | 'getSapiV1MiningPaymentListResponseBody200DataAccountProfitsProfitAmount'
  GHC.Types.Double ->
  -- | 'getSapiV1MiningPaymentListResponseBody200DataAccountProfitsStatus'
  GHC.Int.Int32 ->
  -- | 'getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTransferAmount'
  GHC.Types.Double ->
  -- | 'getSapiV1MiningPaymentListResponseBody200DataAccountProfitsType'
  GHC.Int.Int64 ->
  GetSapiV1MiningPaymentListResponseBody200DataAccountProfits
mkGetSapiV1MiningPaymentListResponseBody200DataAccountProfits getSapiV1MiningPaymentListResponseBody200DataAccountProfitsCoinName getSapiV1MiningPaymentListResponseBody200DataAccountProfitsDayHashRate getSapiV1MiningPaymentListResponseBody200DataAccountProfitsHashTransfer getSapiV1MiningPaymentListResponseBody200DataAccountProfitsProfitAmount getSapiV1MiningPaymentListResponseBody200DataAccountProfitsStatus getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTime getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTransferAmount getSapiV1MiningPaymentListResponseBody200DataAccountProfitsType =
  GetSapiV1MiningPaymentListResponseBody200DataAccountProfits
    { getSapiV1MiningPaymentListResponseBody200DataAccountProfitsCoinName = getSapiV1MiningPaymentListResponseBody200DataAccountProfitsCoinName,
      getSapiV1MiningPaymentListResponseBody200DataAccountProfitsDayHashRate = getSapiV1MiningPaymentListResponseBody200DataAccountProfitsDayHashRate,
      getSapiV1MiningPaymentListResponseBody200DataAccountProfitsHashTransfer = getSapiV1MiningPaymentListResponseBody200DataAccountProfitsHashTransfer,
      getSapiV1MiningPaymentListResponseBody200DataAccountProfitsProfitAmount = getSapiV1MiningPaymentListResponseBody200DataAccountProfitsProfitAmount,
      getSapiV1MiningPaymentListResponseBody200DataAccountProfitsStatus = getSapiV1MiningPaymentListResponseBody200DataAccountProfitsStatus,
      getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTime = getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTime,
      getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTransferAmount = getSapiV1MiningPaymentListResponseBody200DataAccountProfitsTransferAmount,
      getSapiV1MiningPaymentListResponseBody200DataAccountProfitsType = getSapiV1MiningPaymentListResponseBody200DataAccountProfitsType
    }

-- | > GET /sapi/v1/mining/payment/list
--
-- The same as 'getSapiV1MiningPaymentList' but accepts an explicit configuration.
getSapiV1MiningPaymentListWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPaymentListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MiningPaymentListResponse)
getSapiV1MiningPaymentListWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MiningPaymentListResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPaymentListResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1MiningPaymentListResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPaymentListResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPaymentListResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/mining/payment/list")
          [ Binance.Common.QueryParameter (Data.Text.pack "algo") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryAlgo parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "userName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryUserName parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "coin") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryCoin parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryStartDate parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryEndDate parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "pageIndex") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryPageIndex parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/mining/payment/list
--
-- The same as 'getSapiV1MiningPaymentList' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MiningPaymentListRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPaymentListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MiningPaymentListRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/mining/payment/list")
        [ Binance.Common.QueryParameter (Data.Text.pack "algo") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryAlgo parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "userName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryUserName parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "coin") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryCoin parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryStartDate parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryEndDate parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "pageIndex") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryPageIndex parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/mining/payment/list
--
-- The same as 'getSapiV1MiningPaymentList' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MiningPaymentListWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPaymentListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MiningPaymentListWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/mining/payment/list")
          [ Binance.Common.QueryParameter (Data.Text.pack "algo") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryAlgo parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "userName") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryUserName parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "coin") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryCoin parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryStartDate parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endDate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryEndDate parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "pageIndex") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryPageIndex parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "pageSize") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryPageSize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPaymentListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPaymentListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
