{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getApiV3TickerBookTicker
module Binance.Operations.GetApiV3TickerBookTicker where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /api/v3/ticker/bookTicker
--
-- Best price\/qty on the order book for a symbol or symbols.
--
-- - If the symbol is not sent, bookTickers for all symbols will be returned in an array.
--
-- Weight(IP):
-- - \`1\` for a single symbol;
-- - \`2\` when the symbol parameter is omitted;
getApiV3TickerBookTicker ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3TickerBookTickerParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetApiV3TickerBookTickerResponse)
getApiV3TickerBookTicker parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetApiV3TickerBookTickerResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3TickerBookTickerResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetApiV3TickerBookTickerResponseBody200Variants
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3TickerBookTickerResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/ticker/bookTicker")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerBookTickerParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerBookTickerParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/ticker\/bookTicker.GET.parameters@ in the specification.
data GetApiV3TickerBookTickerParameters = GetApiV3TickerBookTickerParameters
  { -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    getApiV3TickerBookTickerParametersQuerySymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySymbols: Represents the parameter named \'symbols\'
    getApiV3TickerBookTickerParametersQuerySymbols :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3TickerBookTickerParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (getApiV3TickerBookTickerParametersQuerySymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbols" Data.Aeson.Types.ToJSON..=)) (getApiV3TickerBookTickerParametersQuerySymbols obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (getApiV3TickerBookTickerParametersQuerySymbol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbols" Data.Aeson.Types.ToJSON..=)) (getApiV3TickerBookTickerParametersQuerySymbols obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3TickerBookTickerParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3TickerBookTickerParameters" (\obj -> (GHC.Base.pure GetApiV3TickerBookTickerParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySymbols"))

-- | Create a new 'GetApiV3TickerBookTickerParameters' with all required fields.
mkGetApiV3TickerBookTickerParameters :: GetApiV3TickerBookTickerParameters
mkGetApiV3TickerBookTickerParameters =
  GetApiV3TickerBookTickerParameters
    { getApiV3TickerBookTickerParametersQuerySymbol = GHC.Maybe.Nothing,
      getApiV3TickerBookTickerParametersQuerySymbols = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getApiV3TickerBookTicker'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApiV3TickerBookTickerResponseError' is used.
data GetApiV3TickerBookTickerResponse
  = -- | Means either no matching case available or a parse error
    GetApiV3TickerBookTickerResponseError GHC.Base.String
  | -- | Order book ticker
    GetApiV3TickerBookTickerResponse200 GetApiV3TickerBookTickerResponseBody200Variants
  | -- | Bad Request
    GetApiV3TickerBookTickerResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the oneOf schema located at @paths.\/api\/v3\/ticker\/bookTicker.GET.responses.200.content.application\/json.schema.oneOf@ in the specification.
data GetApiV3TickerBookTickerResponseBody200Variants
  = GetApiV3TickerBookTickerResponseBody200Variant1 BookTicker
  | GetApiV3TickerBookTickerResponseBody200Variant2 BookTickerList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3TickerBookTickerResponseBody200Variants where
  toJSON (GetApiV3TickerBookTickerResponseBody200Variant1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetApiV3TickerBookTickerResponseBody200Variant2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3TickerBookTickerResponseBody200Variants where
  parseJSON val = case (GetApiV3TickerBookTickerResponseBody200Variant1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetApiV3TickerBookTickerResponseBody200Variant2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | > GET /api/v3/ticker/bookTicker
--
-- The same as 'getApiV3TickerBookTicker' but accepts an explicit configuration.
getApiV3TickerBookTickerWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3TickerBookTickerParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetApiV3TickerBookTickerResponse)
getApiV3TickerBookTickerWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetApiV3TickerBookTickerResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3TickerBookTickerResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetApiV3TickerBookTickerResponseBody200Variants
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3TickerBookTickerResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/ticker/bookTicker")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerBookTickerParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerBookTickerParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /api/v3/ticker/bookTicker
--
-- The same as 'getApiV3TickerBookTicker' but returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3TickerBookTickerRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3TickerBookTickerParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3TickerBookTickerRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/ticker/bookTicker")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerBookTickerParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerBookTickerParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /api/v3/ticker/bookTicker
--
-- The same as 'getApiV3TickerBookTicker' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3TickerBookTickerWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3TickerBookTickerParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3TickerBookTickerWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/ticker/bookTicker")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerBookTickerParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3TickerBookTickerParametersQuerySymbols parameters) (Data.Text.pack "form") GHC.Types.False
          ]
      )
