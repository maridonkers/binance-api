{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MarginCrossMarginData
module Binance.Operations.GetSapiV1MarginCrossMarginData where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/margin/crossMarginData
--
-- Get cross margin fee data collection with any vip level or user\'s current specific data as https:\/\/www.binance.com\/en\/margin-fee
--
-- Weight(IP): 1 when coin is specified; 5 when the coin parameter is omitted
getSapiV1MarginCrossMarginData ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginCrossMarginDataParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MarginCrossMarginDataResponse)
getSapiV1MarginCrossMarginData parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginCrossMarginDataResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginCrossMarginDataResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1MarginCrossMarginDataResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginCrossMarginDataResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginCrossMarginDataResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/margin/crossMarginData")
        [ Binance.Common.QueryParameter (Data.Text.pack "vipLevel") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryVipLevel parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "coin") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryCoin parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginCrossMarginDataParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginCrossMarginDataParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/crossMarginData.GET.parameters@ in the specification.
data GetSapiV1MarginCrossMarginDataParameters = GetSapiV1MarginCrossMarginDataParameters
  { -- | queryCoin: Represents the parameter named \'coin\'
    --
    -- Coin name
    getSapiV1MarginCrossMarginDataParametersQueryCoin :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1MarginCrossMarginDataParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1MarginCrossMarginDataParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1MarginCrossMarginDataParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryVipLevel: Represents the parameter named \'vipLevel\'
    --
    -- Defaults to user\'s vip level
    getSapiV1MarginCrossMarginDataParametersQueryVipLevel :: (GHC.Maybe.Maybe GHC.Int.Int32)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginCrossMarginDataParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCoin" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginCrossMarginDataParametersQueryCoin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginCrossMarginDataParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryVipLevel" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginCrossMarginDataParametersQueryVipLevel obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCoin" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginCrossMarginDataParametersQueryCoin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginCrossMarginDataParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryVipLevel" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginCrossMarginDataParametersQueryVipLevel obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginCrossMarginDataParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginCrossMarginDataParameters" (\obj -> ((((GHC.Base.pure GetSapiV1MarginCrossMarginDataParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryVipLevel"))

-- | Create a new 'GetSapiV1MarginCrossMarginDataParameters' with all required fields.
mkGetSapiV1MarginCrossMarginDataParameters ::
  -- | 'getSapiV1MarginCrossMarginDataParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginCrossMarginDataParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1MarginCrossMarginDataParameters
mkGetSapiV1MarginCrossMarginDataParameters getSapiV1MarginCrossMarginDataParametersQuerySignature getSapiV1MarginCrossMarginDataParametersQueryTimestamp =
  GetSapiV1MarginCrossMarginDataParameters
    { getSapiV1MarginCrossMarginDataParametersQueryCoin = GHC.Maybe.Nothing,
      getSapiV1MarginCrossMarginDataParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1MarginCrossMarginDataParametersQuerySignature = getSapiV1MarginCrossMarginDataParametersQuerySignature,
      getSapiV1MarginCrossMarginDataParametersQueryTimestamp = getSapiV1MarginCrossMarginDataParametersQueryTimestamp,
      getSapiV1MarginCrossMarginDataParametersQueryVipLevel = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getSapiV1MarginCrossMarginData'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MarginCrossMarginDataResponseError' is used.
data GetSapiV1MarginCrossMarginDataResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MarginCrossMarginDataResponseError GHC.Base.String
  | -- | Cross Margin Fee Data
    GetSapiV1MarginCrossMarginDataResponse200 ([GetSapiV1MarginCrossMarginDataResponseBody200])
  | -- | Bad Request
    GetSapiV1MarginCrossMarginDataResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1MarginCrossMarginDataResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/crossMarginData.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1MarginCrossMarginDataResponseBody200 = GetSapiV1MarginCrossMarginDataResponseBody200
  { -- | borrowLimit
    getSapiV1MarginCrossMarginDataResponseBody200BorrowLimit :: Data.Text.Internal.Text,
    -- | borrowable
    getSapiV1MarginCrossMarginDataResponseBody200Borrowable :: GHC.Types.Bool,
    -- | coin
    getSapiV1MarginCrossMarginDataResponseBody200Coin :: Data.Text.Internal.Text,
    -- | dailyInterest
    getSapiV1MarginCrossMarginDataResponseBody200DailyInterest :: Data.Text.Internal.Text,
    -- | marginablePairs
    getSapiV1MarginCrossMarginDataResponseBody200MarginablePairs :: ([Data.Text.Internal.Text]),
    -- | transferIn
    getSapiV1MarginCrossMarginDataResponseBody200TransferIn :: GHC.Types.Bool,
    -- | vipLevel
    getSapiV1MarginCrossMarginDataResponseBody200VipLevel :: GHC.Int.Int32,
    -- | yearlyInterest
    getSapiV1MarginCrossMarginDataResponseBody200YearlyInterest :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginCrossMarginDataResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["borrowLimit" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200BorrowLimit obj] : ["borrowable" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200Borrowable obj] : ["coin" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200Coin obj] : ["dailyInterest" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200DailyInterest obj] : ["marginablePairs" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200MarginablePairs obj] : ["transferIn" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200TransferIn obj] : ["vipLevel" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200VipLevel obj] : ["yearlyInterest" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200YearlyInterest obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["borrowLimit" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200BorrowLimit obj] : ["borrowable" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200Borrowable obj] : ["coin" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200Coin obj] : ["dailyInterest" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200DailyInterest obj] : ["marginablePairs" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200MarginablePairs obj] : ["transferIn" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200TransferIn obj] : ["vipLevel" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200VipLevel obj] : ["yearlyInterest" Data.Aeson.Types.ToJSON..= getSapiV1MarginCrossMarginDataResponseBody200YearlyInterest obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginCrossMarginDataResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginCrossMarginDataResponseBody200" (\obj -> (((((((GHC.Base.pure GetSapiV1MarginCrossMarginDataResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "borrowLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "borrowable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "coin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dailyInterest")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "marginablePairs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transferIn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "vipLevel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "yearlyInterest"))

-- | Create a new 'GetSapiV1MarginCrossMarginDataResponseBody200' with all required fields.
mkGetSapiV1MarginCrossMarginDataResponseBody200 ::
  -- | 'getSapiV1MarginCrossMarginDataResponseBody200BorrowLimit'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginCrossMarginDataResponseBody200Borrowable'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginCrossMarginDataResponseBody200Coin'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginCrossMarginDataResponseBody200DailyInterest'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginCrossMarginDataResponseBody200MarginablePairs'
  [Data.Text.Internal.Text] ->
  -- | 'getSapiV1MarginCrossMarginDataResponseBody200TransferIn'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginCrossMarginDataResponseBody200VipLevel'
  GHC.Int.Int32 ->
  -- | 'getSapiV1MarginCrossMarginDataResponseBody200YearlyInterest'
  Data.Text.Internal.Text ->
  GetSapiV1MarginCrossMarginDataResponseBody200
mkGetSapiV1MarginCrossMarginDataResponseBody200 getSapiV1MarginCrossMarginDataResponseBody200BorrowLimit getSapiV1MarginCrossMarginDataResponseBody200Borrowable getSapiV1MarginCrossMarginDataResponseBody200Coin getSapiV1MarginCrossMarginDataResponseBody200DailyInterest getSapiV1MarginCrossMarginDataResponseBody200MarginablePairs getSapiV1MarginCrossMarginDataResponseBody200TransferIn getSapiV1MarginCrossMarginDataResponseBody200VipLevel getSapiV1MarginCrossMarginDataResponseBody200YearlyInterest =
  GetSapiV1MarginCrossMarginDataResponseBody200
    { getSapiV1MarginCrossMarginDataResponseBody200BorrowLimit = getSapiV1MarginCrossMarginDataResponseBody200BorrowLimit,
      getSapiV1MarginCrossMarginDataResponseBody200Borrowable = getSapiV1MarginCrossMarginDataResponseBody200Borrowable,
      getSapiV1MarginCrossMarginDataResponseBody200Coin = getSapiV1MarginCrossMarginDataResponseBody200Coin,
      getSapiV1MarginCrossMarginDataResponseBody200DailyInterest = getSapiV1MarginCrossMarginDataResponseBody200DailyInterest,
      getSapiV1MarginCrossMarginDataResponseBody200MarginablePairs = getSapiV1MarginCrossMarginDataResponseBody200MarginablePairs,
      getSapiV1MarginCrossMarginDataResponseBody200TransferIn = getSapiV1MarginCrossMarginDataResponseBody200TransferIn,
      getSapiV1MarginCrossMarginDataResponseBody200VipLevel = getSapiV1MarginCrossMarginDataResponseBody200VipLevel,
      getSapiV1MarginCrossMarginDataResponseBody200YearlyInterest = getSapiV1MarginCrossMarginDataResponseBody200YearlyInterest
    }

-- | > GET /sapi/v1/margin/crossMarginData
--
-- The same as 'getSapiV1MarginCrossMarginData' but accepts an explicit configuration.
getSapiV1MarginCrossMarginDataWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginCrossMarginDataParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MarginCrossMarginDataResponse)
getSapiV1MarginCrossMarginDataWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MarginCrossMarginDataResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginCrossMarginDataResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1MarginCrossMarginDataResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginCrossMarginDataResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginCrossMarginDataResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/margin/crossMarginData")
          [ Binance.Common.QueryParameter (Data.Text.pack "vipLevel") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryVipLevel parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "coin") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryCoin parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginCrossMarginDataParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginCrossMarginDataParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/margin/crossMarginData
--
-- The same as 'getSapiV1MarginCrossMarginData' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginCrossMarginDataRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginCrossMarginDataParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginCrossMarginDataRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/margin/crossMarginData")
        [ Binance.Common.QueryParameter (Data.Text.pack "vipLevel") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryVipLevel parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "coin") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryCoin parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginCrossMarginDataParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginCrossMarginDataParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/margin/crossMarginData
--
-- The same as 'getSapiV1MarginCrossMarginData' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginCrossMarginDataWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginCrossMarginDataParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginCrossMarginDataWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/margin/crossMarginData")
          [ Binance.Common.QueryParameter (Data.Text.pack "vipLevel") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryVipLevel parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "coin") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryCoin parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginCrossMarginDataParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginCrossMarginDataParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginCrossMarginDataParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
