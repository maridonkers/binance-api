{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1CapitalWithdrawApply
module Binance.Operations.PostSapiV1CapitalWithdrawApply where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/capital/withdraw/apply
--
-- Submit a withdraw request.
--
-- - If \`network\` not send, return with default network of the coin.
-- - You can get \`network\` and \`isDefault\` in \`networkList\` of a coin in the response of \`Get \/sapi\/v1\/capital\/config\/getall (HMAC SHA256)\`.
--
-- Weight(IP): 1
postSapiV1CapitalWithdrawApply ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1CapitalWithdrawApplyParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1CapitalWithdrawApplyResponse)
postSapiV1CapitalWithdrawApply parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1CapitalWithdrawApplyResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1CapitalWithdrawApplyResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1CapitalWithdrawApplyResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1CapitalWithdrawApplyResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1CapitalWithdrawApplyResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/capital/withdraw/apply")
        [ Binance.Common.QueryParameter (Data.Text.pack "coin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "withdrawOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryWithdrawOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "network") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryNetwork parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "address") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryAddress parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "addressTag") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryAddressTag parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "transactionFeeFlag") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryTransactionFeeFlag parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "walletType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryWalletType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/capital\/withdraw\/apply.POST.parameters@ in the specification.
data PostSapiV1CapitalWithdrawApplyParameters = PostSapiV1CapitalWithdrawApplyParameters
  { -- | queryAddress: Represents the parameter named \'address\'
    postSapiV1CapitalWithdrawApplyParametersQueryAddress :: Data.Text.Internal.Text,
    -- | queryAddressTag: Represents the parameter named \'addressTag\'
    --
    -- Secondary address identifier for coins like XRP,XMR etc.
    postSapiV1CapitalWithdrawApplyParametersQueryAddressTag :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryAmount: Represents the parameter named \'amount\'
    postSapiV1CapitalWithdrawApplyParametersQueryAmount :: GHC.Types.Double,
    -- | queryCoin: Represents the parameter named \'coin\'
    --
    -- Coin name
    postSapiV1CapitalWithdrawApplyParametersQueryCoin :: Data.Text.Internal.Text,
    -- | queryName: Represents the parameter named \'name\'
    postSapiV1CapitalWithdrawApplyParametersQueryName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryNetwork: Represents the parameter named \'network\'
    --
    -- Get the value from \`GET \/sapi\/v1\/capital\/config\/getall\`
    postSapiV1CapitalWithdrawApplyParametersQueryNetwork :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1CapitalWithdrawApplyParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1CapitalWithdrawApplyParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1CapitalWithdrawApplyParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryTransactionFeeFlag: Represents the parameter named \'transactionFeeFlag\'
    --
    -- When making internal transfer
    -- - \`true\` ->  returning the fee to the destination account;
    -- - \`false\` -> returning the fee back to the departure account.
    postSapiV1CapitalWithdrawApplyParametersQueryTransactionFeeFlag :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryWalletType: Represents the parameter named \'walletType\'
    --
    -- The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet
    postSapiV1CapitalWithdrawApplyParametersQueryWalletType :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryWithdrawOrderId: Represents the parameter named \'withdrawOrderId\'
    --
    -- Client id for withdraw
    postSapiV1CapitalWithdrawApplyParametersQueryWithdrawOrderId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1CapitalWithdrawApplyParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAddress" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQueryAddress obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAddressTag" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryAddressTag obj) : ["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQueryAmount obj] : ["queryCoin" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQueryCoin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNetwork" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTransactionFeeFlag" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryTransactionFeeFlag obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryWalletType" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryWalletType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryWithdrawOrderId" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryWithdrawOrderId obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAddress" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQueryAddress obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAddressTag" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryAddressTag obj) : ["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQueryAmount obj] : ["queryCoin" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQueryCoin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNetwork" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTransactionFeeFlag" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryTransactionFeeFlag obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryWalletType" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryWalletType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryWithdrawOrderId" Data.Aeson.Types.ToJSON..=)) (postSapiV1CapitalWithdrawApplyParametersQueryWithdrawOrderId obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1CapitalWithdrawApplyParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1CapitalWithdrawApplyParameters" (\obj -> (((((((((((GHC.Base.pure PostSapiV1CapitalWithdrawApplyParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAddress")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAddressTag")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryNetwork")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTransactionFeeFlag")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryWalletType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryWithdrawOrderId"))

-- | Create a new 'PostSapiV1CapitalWithdrawApplyParameters' with all required fields.
mkPostSapiV1CapitalWithdrawApplyParameters ::
  -- | 'postSapiV1CapitalWithdrawApplyParametersQueryAddress'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1CapitalWithdrawApplyParametersQueryAmount'
  GHC.Types.Double ->
  -- | 'postSapiV1CapitalWithdrawApplyParametersQueryCoin'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1CapitalWithdrawApplyParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1CapitalWithdrawApplyParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1CapitalWithdrawApplyParameters
mkPostSapiV1CapitalWithdrawApplyParameters postSapiV1CapitalWithdrawApplyParametersQueryAddress postSapiV1CapitalWithdrawApplyParametersQueryAmount postSapiV1CapitalWithdrawApplyParametersQueryCoin postSapiV1CapitalWithdrawApplyParametersQuerySignature postSapiV1CapitalWithdrawApplyParametersQueryTimestamp =
  PostSapiV1CapitalWithdrawApplyParameters
    { postSapiV1CapitalWithdrawApplyParametersQueryAddress = postSapiV1CapitalWithdrawApplyParametersQueryAddress,
      postSapiV1CapitalWithdrawApplyParametersQueryAddressTag = GHC.Maybe.Nothing,
      postSapiV1CapitalWithdrawApplyParametersQueryAmount = postSapiV1CapitalWithdrawApplyParametersQueryAmount,
      postSapiV1CapitalWithdrawApplyParametersQueryCoin = postSapiV1CapitalWithdrawApplyParametersQueryCoin,
      postSapiV1CapitalWithdrawApplyParametersQueryName = GHC.Maybe.Nothing,
      postSapiV1CapitalWithdrawApplyParametersQueryNetwork = GHC.Maybe.Nothing,
      postSapiV1CapitalWithdrawApplyParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1CapitalWithdrawApplyParametersQuerySignature = postSapiV1CapitalWithdrawApplyParametersQuerySignature,
      postSapiV1CapitalWithdrawApplyParametersQueryTimestamp = postSapiV1CapitalWithdrawApplyParametersQueryTimestamp,
      postSapiV1CapitalWithdrawApplyParametersQueryTransactionFeeFlag = GHC.Maybe.Nothing,
      postSapiV1CapitalWithdrawApplyParametersQueryWalletType = GHC.Maybe.Nothing,
      postSapiV1CapitalWithdrawApplyParametersQueryWithdrawOrderId = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postSapiV1CapitalWithdrawApply'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1CapitalWithdrawApplyResponseError' is used.
data PostSapiV1CapitalWithdrawApplyResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1CapitalWithdrawApplyResponseError GHC.Base.String
  | -- | Transafer Id
    PostSapiV1CapitalWithdrawApplyResponse200 PostSapiV1CapitalWithdrawApplyResponseBody200
  | -- | Bad Request
    PostSapiV1CapitalWithdrawApplyResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1CapitalWithdrawApplyResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/capital\/withdraw\/apply.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1CapitalWithdrawApplyResponseBody200 = PostSapiV1CapitalWithdrawApplyResponseBody200
  { -- | id
    postSapiV1CapitalWithdrawApplyResponseBody200Id :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1CapitalWithdrawApplyResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyResponseBody200Id obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= postSapiV1CapitalWithdrawApplyResponseBody200Id obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1CapitalWithdrawApplyResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1CapitalWithdrawApplyResponseBody200" (\obj -> GHC.Base.pure PostSapiV1CapitalWithdrawApplyResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))

-- | Create a new 'PostSapiV1CapitalWithdrawApplyResponseBody200' with all required fields.
mkPostSapiV1CapitalWithdrawApplyResponseBody200 ::
  -- | 'postSapiV1CapitalWithdrawApplyResponseBody200Id'
  Data.Text.Internal.Text ->
  PostSapiV1CapitalWithdrawApplyResponseBody200
mkPostSapiV1CapitalWithdrawApplyResponseBody200 postSapiV1CapitalWithdrawApplyResponseBody200Id = PostSapiV1CapitalWithdrawApplyResponseBody200 {postSapiV1CapitalWithdrawApplyResponseBody200Id = postSapiV1CapitalWithdrawApplyResponseBody200Id}

-- | > POST /sapi/v1/capital/withdraw/apply
--
-- The same as 'postSapiV1CapitalWithdrawApply' but accepts an explicit configuration.
postSapiV1CapitalWithdrawApplyWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1CapitalWithdrawApplyParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1CapitalWithdrawApplyResponse)
postSapiV1CapitalWithdrawApplyWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1CapitalWithdrawApplyResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1CapitalWithdrawApplyResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1CapitalWithdrawApplyResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1CapitalWithdrawApplyResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1CapitalWithdrawApplyResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/capital/withdraw/apply")
          [ Binance.Common.QueryParameter (Data.Text.pack "coin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "withdrawOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryWithdrawOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "network") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryNetwork parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "address") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryAddress parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "addressTag") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryAddressTag parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "transactionFeeFlag") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryTransactionFeeFlag parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "walletType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryWalletType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/capital/withdraw/apply
--
-- The same as 'postSapiV1CapitalWithdrawApply' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1CapitalWithdrawApplyRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1CapitalWithdrawApplyParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1CapitalWithdrawApplyRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/capital/withdraw/apply")
        [ Binance.Common.QueryParameter (Data.Text.pack "coin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "withdrawOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryWithdrawOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "network") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryNetwork parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "address") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryAddress parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "addressTag") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryAddressTag parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "transactionFeeFlag") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryTransactionFeeFlag parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "walletType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryWalletType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/capital/withdraw/apply
--
-- The same as 'postSapiV1CapitalWithdrawApply' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1CapitalWithdrawApplyWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1CapitalWithdrawApplyParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1CapitalWithdrawApplyWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/capital/withdraw/apply")
          [ Binance.Common.QueryParameter (Data.Text.pack "coin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "withdrawOrderId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryWithdrawOrderId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "network") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryNetwork parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "address") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryAddress parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "addressTag") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryAddressTag parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "transactionFeeFlag") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryTransactionFeeFlag parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryName parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "walletType") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryWalletType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1CapitalWithdrawApplyParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1CapitalWithdrawApplyParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
