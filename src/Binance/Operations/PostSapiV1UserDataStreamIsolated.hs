{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1UserDataStreamIsolated
module Binance.Operations.PostSapiV1UserDataStreamIsolated where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/userDataStream/isolated
--
-- Start a new user data stream.
-- The stream will close after 60 minutes unless a keepalive is sent. If the account has an active \`listenKey\`, that \`listenKey\` will be returned and its validity will be extended for 60 minutes.
--
-- Weight: 1
postSapiV1UserDataStreamIsolated :: forall m. Binance.Common.MonadHTTP m => -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1UserDataStreamIsolatedResponse)
postSapiV1UserDataStreamIsolated =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1UserDataStreamIsolatedResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1UserDataStreamIsolatedResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1UserDataStreamIsolatedResponseBody200
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sapi/v1/userDataStream/isolated") GHC.Base.mempty)

-- | Represents a response of the operation 'postSapiV1UserDataStreamIsolated'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1UserDataStreamIsolatedResponseError' is used.
data PostSapiV1UserDataStreamIsolatedResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1UserDataStreamIsolatedResponseError GHC.Base.String
  | -- | Isolated margin listen key
    PostSapiV1UserDataStreamIsolatedResponse200 PostSapiV1UserDataStreamIsolatedResponseBody200
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/userDataStream\/isolated.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1UserDataStreamIsolatedResponseBody200 = PostSapiV1UserDataStreamIsolatedResponseBody200
  { -- | listenKey
    postSapiV1UserDataStreamIsolatedResponseBody200ListenKey :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1UserDataStreamIsolatedResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["listenKey" Data.Aeson.Types.ToJSON..= postSapiV1UserDataStreamIsolatedResponseBody200ListenKey obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["listenKey" Data.Aeson.Types.ToJSON..= postSapiV1UserDataStreamIsolatedResponseBody200ListenKey obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1UserDataStreamIsolatedResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1UserDataStreamIsolatedResponseBody200" (\obj -> GHC.Base.pure PostSapiV1UserDataStreamIsolatedResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "listenKey"))

-- | Create a new 'PostSapiV1UserDataStreamIsolatedResponseBody200' with all required fields.
mkPostSapiV1UserDataStreamIsolatedResponseBody200 ::
  -- | 'postSapiV1UserDataStreamIsolatedResponseBody200ListenKey'
  Data.Text.Internal.Text ->
  PostSapiV1UserDataStreamIsolatedResponseBody200
mkPostSapiV1UserDataStreamIsolatedResponseBody200 postSapiV1UserDataStreamIsolatedResponseBody200ListenKey = PostSapiV1UserDataStreamIsolatedResponseBody200 {postSapiV1UserDataStreamIsolatedResponseBody200ListenKey = postSapiV1UserDataStreamIsolatedResponseBody200ListenKey}

-- | > POST /sapi/v1/userDataStream/isolated
--
-- The same as 'postSapiV1UserDataStreamIsolated' but accepts an explicit configuration.
postSapiV1UserDataStreamIsolatedWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1UserDataStreamIsolatedResponse)
postSapiV1UserDataStreamIsolatedWithConfiguration config =
  GHC.Base.fmap
    ( \response_2 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1UserDataStreamIsolatedResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1UserDataStreamIsolatedResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1UserDataStreamIsolatedResponseBody200
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_2
          )
          response_2
    )
    (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sapi/v1/userDataStream/isolated") GHC.Base.mempty)

-- | > POST /sapi/v1/userDataStream/isolated
--
-- The same as 'postSapiV1UserDataStreamIsolated' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1UserDataStreamIsolatedRaw :: forall m. Binance.Common.MonadHTTP m => -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1UserDataStreamIsolatedRaw = GHC.Base.id (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sapi/v1/userDataStream/isolated") GHC.Base.mempty)

-- | > POST /sapi/v1/userDataStream/isolated
--
-- The same as 'postSapiV1UserDataStreamIsolated' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1UserDataStreamIsolatedWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1UserDataStreamIsolatedWithConfigurationRaw config = GHC.Base.id (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sapi/v1/userDataStream/isolated") GHC.Base.mempty)
