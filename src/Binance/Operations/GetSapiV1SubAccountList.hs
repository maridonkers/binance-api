{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1SubAccountList
module Binance.Operations.GetSapiV1SubAccountList where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/sub-account/list
--
-- Weight(IP): 1
getSapiV1SubAccountList ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountListResponse)
getSapiV1SubAccountList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1SubAccountListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1SubAccountListResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountListResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/list")
        [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "isFreeze") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryIsFreeze parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/list.GET.parameters@ in the specification.
data GetSapiV1SubAccountListParameters = GetSapiV1SubAccountListParameters
  { -- | queryEmail: Represents the parameter named \'email\'
    --
    -- Sub-account email
    getSapiV1SubAccountListParametersQueryEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryIsFreeze: Represents the parameter named \'isFreeze\'
    getSapiV1SubAccountListParametersQueryIsFreeze :: (GHC.Maybe.Maybe GetSapiV1SubAccountListParametersQueryIsFreeze),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- Default 1; max 200
    getSapiV1SubAccountListParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- Default 1
    getSapiV1SubAccountListParametersQueryPage :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1SubAccountListParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1SubAccountListParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1SubAccountListParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryIsFreeze" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryIsFreeze obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryIsFreeze" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryIsFreeze obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountListParameters" (\obj -> ((((((GHC.Base.pure GetSapiV1SubAccountListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEmail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryIsFreeze")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1SubAccountListParameters' with all required fields.
mkGetSapiV1SubAccountListParameters ::
  -- | 'getSapiV1SubAccountListParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountListParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1SubAccountListParameters
mkGetSapiV1SubAccountListParameters getSapiV1SubAccountListParametersQuerySignature getSapiV1SubAccountListParametersQueryTimestamp =
  GetSapiV1SubAccountListParameters
    { getSapiV1SubAccountListParametersQueryEmail = GHC.Maybe.Nothing,
      getSapiV1SubAccountListParametersQueryIsFreeze = GHC.Maybe.Nothing,
      getSapiV1SubAccountListParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1SubAccountListParametersQueryPage = GHC.Maybe.Nothing,
      getSapiV1SubAccountListParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1SubAccountListParametersQuerySignature = getSapiV1SubAccountListParametersQuerySignature,
      getSapiV1SubAccountListParametersQueryTimestamp = getSapiV1SubAccountListParametersQueryTimestamp
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/sub-account\/list.GET.parameters.properties.queryIsFreeze@ in the specification.
--
-- Represents the parameter named \'isFreeze\'
data GetSapiV1SubAccountListParametersQueryIsFreeze
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetSapiV1SubAccountListParametersQueryIsFreezeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetSapiV1SubAccountListParametersQueryIsFreezeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"true"@
    GetSapiV1SubAccountListParametersQueryIsFreezeEnumTrue
  | -- | Represents the JSON value @"false"@
    GetSapiV1SubAccountListParametersQueryIsFreezeEnumFalse
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountListParametersQueryIsFreeze where
  toJSON (GetSapiV1SubAccountListParametersQueryIsFreezeOther val) = val
  toJSON (GetSapiV1SubAccountListParametersQueryIsFreezeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetSapiV1SubAccountListParametersQueryIsFreezeEnumTrue) = "true"
  toJSON (GetSapiV1SubAccountListParametersQueryIsFreezeEnumFalse) = "false"

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountListParametersQueryIsFreeze where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "true" -> GetSapiV1SubAccountListParametersQueryIsFreezeEnumTrue
            | val GHC.Classes.== "false" -> GetSapiV1SubAccountListParametersQueryIsFreezeEnumFalse
            | GHC.Base.otherwise -> GetSapiV1SubAccountListParametersQueryIsFreezeOther val
      )

-- | Represents a response of the operation 'getSapiV1SubAccountList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1SubAccountListResponseError' is used.
data GetSapiV1SubAccountListResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1SubAccountListResponseError GHC.Base.String
  | -- | List of sub-accounts
    GetSapiV1SubAccountListResponse200 GetSapiV1SubAccountListResponseBody200
  | -- | Bad Request
    GetSapiV1SubAccountListResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1SubAccountListResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/list.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1SubAccountListResponseBody200 = GetSapiV1SubAccountListResponseBody200
  { -- | subAccounts
    getSapiV1SubAccountListResponseBody200SubAccounts :: ([GetSapiV1SubAccountListResponseBody200SubAccounts])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountListResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["subAccounts" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccounts obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["subAccounts" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccounts obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountListResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountListResponseBody200" (\obj -> GHC.Base.pure GetSapiV1SubAccountListResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subAccounts"))

-- | Create a new 'GetSapiV1SubAccountListResponseBody200' with all required fields.
mkGetSapiV1SubAccountListResponseBody200 ::
  -- | 'getSapiV1SubAccountListResponseBody200SubAccounts'
  [GetSapiV1SubAccountListResponseBody200SubAccounts] ->
  GetSapiV1SubAccountListResponseBody200
mkGetSapiV1SubAccountListResponseBody200 getSapiV1SubAccountListResponseBody200SubAccounts = GetSapiV1SubAccountListResponseBody200 {getSapiV1SubAccountListResponseBody200SubAccounts = getSapiV1SubAccountListResponseBody200SubAccounts}

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/list.GET.responses.200.content.application\/json.schema.properties.subAccounts.items@ in the specification.
data GetSapiV1SubAccountListResponseBody200SubAccounts = GetSapiV1SubAccountListResponseBody200SubAccounts
  { -- | createTime
    getSapiV1SubAccountListResponseBody200SubAccountsCreateTime :: GHC.Int.Int64,
    -- | email
    getSapiV1SubAccountListResponseBody200SubAccountsEmail :: Data.Text.Internal.Text,
    -- | isAssetManagementSubAccount
    getSapiV1SubAccountListResponseBody200SubAccountsIsAssetManagementSubAccount :: GHC.Types.Bool,
    -- | isFreeze
    getSapiV1SubAccountListResponseBody200SubAccountsIsFreeze :: GHC.Types.Bool,
    -- | isManagedSubAccount
    getSapiV1SubAccountListResponseBody200SubAccountsIsManagedSubAccount :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountListResponseBody200SubAccounts where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["createTime" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsCreateTime obj] : ["email" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsEmail obj] : ["isAssetManagementSubAccount" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsIsAssetManagementSubAccount obj] : ["isFreeze" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsIsFreeze obj] : ["isManagedSubAccount" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsIsManagedSubAccount obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["createTime" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsCreateTime obj] : ["email" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsEmail obj] : ["isAssetManagementSubAccount" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsIsAssetManagementSubAccount obj] : ["isFreeze" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsIsFreeze obj] : ["isManagedSubAccount" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountListResponseBody200SubAccountsIsManagedSubAccount obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountListResponseBody200SubAccounts where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountListResponseBody200SubAccounts" (\obj -> ((((GHC.Base.pure GetSapiV1SubAccountListResponseBody200SubAccounts GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "createTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isAssetManagementSubAccount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isFreeze")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isManagedSubAccount"))

-- | Create a new 'GetSapiV1SubAccountListResponseBody200SubAccounts' with all required fields.
mkGetSapiV1SubAccountListResponseBody200SubAccounts ::
  -- | 'getSapiV1SubAccountListResponseBody200SubAccountsCreateTime'
  GHC.Int.Int64 ->
  -- | 'getSapiV1SubAccountListResponseBody200SubAccountsEmail'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountListResponseBody200SubAccountsIsAssetManagementSubAccount'
  GHC.Types.Bool ->
  -- | 'getSapiV1SubAccountListResponseBody200SubAccountsIsFreeze'
  GHC.Types.Bool ->
  -- | 'getSapiV1SubAccountListResponseBody200SubAccountsIsManagedSubAccount'
  GHC.Types.Bool ->
  GetSapiV1SubAccountListResponseBody200SubAccounts
mkGetSapiV1SubAccountListResponseBody200SubAccounts getSapiV1SubAccountListResponseBody200SubAccountsCreateTime getSapiV1SubAccountListResponseBody200SubAccountsEmail getSapiV1SubAccountListResponseBody200SubAccountsIsAssetManagementSubAccount getSapiV1SubAccountListResponseBody200SubAccountsIsFreeze getSapiV1SubAccountListResponseBody200SubAccountsIsManagedSubAccount =
  GetSapiV1SubAccountListResponseBody200SubAccounts
    { getSapiV1SubAccountListResponseBody200SubAccountsCreateTime = getSapiV1SubAccountListResponseBody200SubAccountsCreateTime,
      getSapiV1SubAccountListResponseBody200SubAccountsEmail = getSapiV1SubAccountListResponseBody200SubAccountsEmail,
      getSapiV1SubAccountListResponseBody200SubAccountsIsAssetManagementSubAccount = getSapiV1SubAccountListResponseBody200SubAccountsIsAssetManagementSubAccount,
      getSapiV1SubAccountListResponseBody200SubAccountsIsFreeze = getSapiV1SubAccountListResponseBody200SubAccountsIsFreeze,
      getSapiV1SubAccountListResponseBody200SubAccountsIsManagedSubAccount = getSapiV1SubAccountListResponseBody200SubAccountsIsManagedSubAccount
    }

-- | > GET /sapi/v1/sub-account/list
--
-- The same as 'getSapiV1SubAccountList' but accepts an explicit configuration.
getSapiV1SubAccountListWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountListResponse)
getSapiV1SubAccountListWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1SubAccountListResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountListResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1SubAccountListResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountListResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountListResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/list")
          [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "isFreeze") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryIsFreeze parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/sub-account/list
--
-- The same as 'getSapiV1SubAccountList' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountListRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountListRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/list")
        [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "isFreeze") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryIsFreeze parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/sub-account/list
--
-- The same as 'getSapiV1SubAccountList' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountListWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountListWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/list")
          [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "isFreeze") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryIsFreeze parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
