{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getApiV3AvgPrice
module Binance.Operations.GetApiV3AvgPrice where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /api/v3/avgPrice
--
-- Current average price for a symbol.
--
-- Weight(IP): 1
getApiV3AvgPrice ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | symbol: Trading symbol, e.g. BNBUSDT
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetApiV3AvgPriceResponse)
getApiV3AvgPrice symbol =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetApiV3AvgPriceResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3AvgPriceResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetApiV3AvgPriceResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3AvgPriceResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/api/v3/avgPrice") [Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbol) (Data.Text.pack "form") GHC.Types.False])

-- | Represents a response of the operation 'getApiV3AvgPrice'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApiV3AvgPriceResponseError' is used.
data GetApiV3AvgPriceResponse
  = -- | Means either no matching case available or a parse error
    GetApiV3AvgPriceResponseError GHC.Base.String
  | -- | Average price
    GetApiV3AvgPriceResponse200 GetApiV3AvgPriceResponseBody200
  | -- | Bad Request
    GetApiV3AvgPriceResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/api\/v3\/avgPrice.GET.responses.200.content.application\/json.schema@ in the specification.
data GetApiV3AvgPriceResponseBody200 = GetApiV3AvgPriceResponseBody200
  { -- | mins
    getApiV3AvgPriceResponseBody200Mins :: GHC.Int.Int64,
    -- | price
    getApiV3AvgPriceResponseBody200Price :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3AvgPriceResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["mins" Data.Aeson.Types.ToJSON..= getApiV3AvgPriceResponseBody200Mins obj] : ["price" Data.Aeson.Types.ToJSON..= getApiV3AvgPriceResponseBody200Price obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["mins" Data.Aeson.Types.ToJSON..= getApiV3AvgPriceResponseBody200Mins obj] : ["price" Data.Aeson.Types.ToJSON..= getApiV3AvgPriceResponseBody200Price obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3AvgPriceResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3AvgPriceResponseBody200" (\obj -> (GHC.Base.pure GetApiV3AvgPriceResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "mins")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price"))

-- | Create a new 'GetApiV3AvgPriceResponseBody200' with all required fields.
mkGetApiV3AvgPriceResponseBody200 ::
  -- | 'getApiV3AvgPriceResponseBody200Mins'
  GHC.Int.Int64 ->
  -- | 'getApiV3AvgPriceResponseBody200Price'
  Data.Text.Internal.Text ->
  GetApiV3AvgPriceResponseBody200
mkGetApiV3AvgPriceResponseBody200 getApiV3AvgPriceResponseBody200Mins getApiV3AvgPriceResponseBody200Price =
  GetApiV3AvgPriceResponseBody200
    { getApiV3AvgPriceResponseBody200Mins = getApiV3AvgPriceResponseBody200Mins,
      getApiV3AvgPriceResponseBody200Price = getApiV3AvgPriceResponseBody200Price
    }

-- | > GET /api/v3/avgPrice
--
-- The same as 'getApiV3AvgPrice' but accepts an explicit configuration.
getApiV3AvgPriceWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | symbol: Trading symbol, e.g. BNBUSDT
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetApiV3AvgPriceResponse)
getApiV3AvgPriceWithConfiguration
  config
  symbol =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetApiV3AvgPriceResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3AvgPriceResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetApiV3AvgPriceResponseBody200
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3AvgPriceResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/api/v3/avgPrice") [Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbol) (Data.Text.pack "form") GHC.Types.False])

-- | > GET /api/v3/avgPrice
--
-- The same as 'getApiV3AvgPrice' but returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3AvgPriceRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | symbol: Trading symbol, e.g. BNBUSDT
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3AvgPriceRaw symbol = GHC.Base.id (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/api/v3/avgPrice") [Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbol) (Data.Text.pack "form") GHC.Types.False])

-- | > GET /api/v3/avgPrice
--
-- The same as 'getApiV3AvgPrice' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3AvgPriceWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | symbol: Trading symbol, e.g. BNBUSDT
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3AvgPriceWithConfigurationRaw
  config
  symbol = GHC.Base.id (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/api/v3/avgPrice") [Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbol) (Data.Text.pack "form") GHC.Types.False])
