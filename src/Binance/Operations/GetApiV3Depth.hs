{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getApiV3Depth
module Binance.Operations.GetApiV3Depth where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /api/v3/depth
--
-- | Limit               | Weight(IP)  |
-- |---------------------|-------------|
-- | 1-100               | 1           |
-- | 101-500             | 5           |
-- | 501-1000            | 10          |
-- | 1001-5000           | 50          |
getApiV3Depth ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3DepthParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetApiV3DepthResponse)
getApiV3Depth parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetApiV3DepthResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3DepthResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetApiV3DepthResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApiV3DepthResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/depth")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3DepthParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3DepthParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/api\/v3\/depth.GET.parameters@ in the specification.
data GetApiV3DepthParameters = GetApiV3DepthParameters
  { -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- If limit > 5000, then the response will truncate to 5000
    --
    -- Constraints:
    --
    -- * Maxium  of 5000.0
    getApiV3DepthParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    getApiV3DepthParametersQuerySymbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3DepthParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getApiV3DepthParametersQueryLimit obj) : ["querySymbol" Data.Aeson.Types.ToJSON..= getApiV3DepthParametersQuerySymbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getApiV3DepthParametersQueryLimit obj) : ["querySymbol" Data.Aeson.Types.ToJSON..= getApiV3DepthParametersQuerySymbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3DepthParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3DepthParameters" (\obj -> (GHC.Base.pure GetApiV3DepthParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySymbol"))

-- | Create a new 'GetApiV3DepthParameters' with all required fields.
mkGetApiV3DepthParameters ::
  -- | 'getApiV3DepthParametersQuerySymbol'
  Data.Text.Internal.Text ->
  GetApiV3DepthParameters
mkGetApiV3DepthParameters getApiV3DepthParametersQuerySymbol =
  GetApiV3DepthParameters
    { getApiV3DepthParametersQueryLimit = GHC.Maybe.Nothing,
      getApiV3DepthParametersQuerySymbol = getApiV3DepthParametersQuerySymbol
    }

-- | Represents a response of the operation 'getApiV3Depth'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApiV3DepthResponseError' is used.
data GetApiV3DepthResponse
  = -- | Means either no matching case available or a parse error
    GetApiV3DepthResponseError GHC.Base.String
  | -- | Order book
    GetApiV3DepthResponse200 GetApiV3DepthResponseBody200
  | -- | Bad Request
    GetApiV3DepthResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/api\/v3\/depth.GET.responses.200.content.application\/json.schema@ in the specification.
data GetApiV3DepthResponseBody200 = GetApiV3DepthResponseBody200
  { -- | asks
    getApiV3DepthResponseBody200Asks :: ([[Data.Text.Internal.Text]]),
    -- | bids
    getApiV3DepthResponseBody200Bids :: ([[Data.Text.Internal.Text]]),
    -- | lastUpdateId
    getApiV3DepthResponseBody200LastUpdateId :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApiV3DepthResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asks" Data.Aeson.Types.ToJSON..= getApiV3DepthResponseBody200Asks obj] : ["bids" Data.Aeson.Types.ToJSON..= getApiV3DepthResponseBody200Bids obj] : ["lastUpdateId" Data.Aeson.Types.ToJSON..= getApiV3DepthResponseBody200LastUpdateId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asks" Data.Aeson.Types.ToJSON..= getApiV3DepthResponseBody200Asks obj] : ["bids" Data.Aeson.Types.ToJSON..= getApiV3DepthResponseBody200Bids obj] : ["lastUpdateId" Data.Aeson.Types.ToJSON..= getApiV3DepthResponseBody200LastUpdateId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetApiV3DepthResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApiV3DepthResponseBody200" (\obj -> ((GHC.Base.pure GetApiV3DepthResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bids")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lastUpdateId"))

-- | Create a new 'GetApiV3DepthResponseBody200' with all required fields.
mkGetApiV3DepthResponseBody200 ::
  -- | 'getApiV3DepthResponseBody200Asks'
  [[Data.Text.Internal.Text]] ->
  -- | 'getApiV3DepthResponseBody200Bids'
  [[Data.Text.Internal.Text]] ->
  -- | 'getApiV3DepthResponseBody200LastUpdateId'
  GHC.Int.Int64 ->
  GetApiV3DepthResponseBody200
mkGetApiV3DepthResponseBody200 getApiV3DepthResponseBody200Asks getApiV3DepthResponseBody200Bids getApiV3DepthResponseBody200LastUpdateId =
  GetApiV3DepthResponseBody200
    { getApiV3DepthResponseBody200Asks = getApiV3DepthResponseBody200Asks,
      getApiV3DepthResponseBody200Bids = getApiV3DepthResponseBody200Bids,
      getApiV3DepthResponseBody200LastUpdateId = getApiV3DepthResponseBody200LastUpdateId
    }

-- | > GET /api/v3/depth
--
-- The same as 'getApiV3Depth' but accepts an explicit configuration.
getApiV3DepthWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3DepthParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetApiV3DepthResponse)
getApiV3DepthWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetApiV3DepthResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3DepthResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetApiV3DepthResponseBody200
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetApiV3DepthResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/depth")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3DepthParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3DepthParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /api/v3/depth
--
-- The same as 'getApiV3Depth' but returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3DepthRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3DepthParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3DepthRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/api/v3/depth")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3DepthParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3DepthParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /api/v3/depth
--
-- The same as 'getApiV3Depth' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getApiV3DepthWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApiV3DepthParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getApiV3DepthWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/api/v3/depth")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getApiV3DepthParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApiV3DepthParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False
          ]
      )
