{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BswapPoolConfigure
module Binance.Operations.GetSapiV1BswapPoolConfigure where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/bswap/poolConfigure
--
-- Weight(IP): 150
getSapiV1BswapPoolConfigure ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapPoolConfigureParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BswapPoolConfigureResponse)
getSapiV1BswapPoolConfigure parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BswapPoolConfigureResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapPoolConfigureResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1BswapPoolConfigureResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapPoolConfigureResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapPoolConfigureResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/poolConfigure")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapPoolConfigureParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapPoolConfigureParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapPoolConfigureParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapPoolConfigureParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/poolConfigure.GET.parameters@ in the specification.
data GetSapiV1BswapPoolConfigureParameters = GetSapiV1BswapPoolConfigureParameters
  { -- | queryPoolId: Represents the parameter named \'poolId\'
    getSapiV1BswapPoolConfigureParametersQueryPoolId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1BswapPoolConfigureParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1BswapPoolConfigureParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapPoolConfigureParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapPoolConfigureParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPoolId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapPoolConfigureParametersQueryPoolId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapPoolConfigureParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPoolId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapPoolConfigureParametersQueryPoolId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapPoolConfigureParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapPoolConfigureParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapPoolConfigureParameters" (\obj -> (((GHC.Base.pure GetSapiV1BswapPoolConfigureParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPoolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1BswapPoolConfigureParameters' with all required fields.
mkGetSapiV1BswapPoolConfigureParameters ::
  -- | 'getSapiV1BswapPoolConfigureParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapPoolConfigureParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1BswapPoolConfigureParameters
mkGetSapiV1BswapPoolConfigureParameters getSapiV1BswapPoolConfigureParametersQuerySignature getSapiV1BswapPoolConfigureParametersQueryTimestamp =
  GetSapiV1BswapPoolConfigureParameters
    { getSapiV1BswapPoolConfigureParametersQueryPoolId = GHC.Maybe.Nothing,
      getSapiV1BswapPoolConfigureParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1BswapPoolConfigureParametersQuerySignature = getSapiV1BswapPoolConfigureParametersQuerySignature,
      getSapiV1BswapPoolConfigureParametersQueryTimestamp = getSapiV1BswapPoolConfigureParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1BswapPoolConfigure'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BswapPoolConfigureResponseError' is used.
data GetSapiV1BswapPoolConfigureResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BswapPoolConfigureResponseError GHC.Base.String
  | -- | Pool Information
    GetSapiV1BswapPoolConfigureResponse200 ([GetSapiV1BswapPoolConfigureResponseBody200])
  | -- | Bad Request
    GetSapiV1BswapPoolConfigureResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1BswapPoolConfigureResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/poolConfigure.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1BswapPoolConfigureResponseBody200 = GetSapiV1BswapPoolConfigureResponseBody200
  { -- | assetConfigure
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigure :: GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure,
    -- | liquidity
    getSapiV1BswapPoolConfigureResponseBody200Liquidity :: GetSapiV1BswapPoolConfigureResponseBody200Liquidity,
    -- | poolId
    getSapiV1BswapPoolConfigureResponseBody200PoolId :: GHC.Int.Int64,
    -- | poolNmae
    getSapiV1BswapPoolConfigureResponseBody200PoolNmae :: Data.Text.Internal.Text,
    -- | updateTime
    getSapiV1BswapPoolConfigureResponseBody200UpdateTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapPoolConfigureResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assetConfigure" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigure obj] : ["liquidity" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200Liquidity obj] : ["poolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200PoolId obj] : ["poolNmae" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200PoolNmae obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200UpdateTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assetConfigure" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigure obj] : ["liquidity" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200Liquidity obj] : ["poolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200PoolId obj] : ["poolNmae" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200PoolNmae obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200UpdateTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapPoolConfigureResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapPoolConfigureResponseBody200" (\obj -> ((((GHC.Base.pure GetSapiV1BswapPoolConfigureResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assetConfigure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "liquidity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolNmae")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updateTime"))

-- | Create a new 'GetSapiV1BswapPoolConfigureResponseBody200' with all required fields.
mkGetSapiV1BswapPoolConfigureResponseBody200 ::
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigure'
  GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200Liquidity'
  GetSapiV1BswapPoolConfigureResponseBody200Liquidity ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200PoolId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200PoolNmae'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200UpdateTime'
  GHC.Int.Int64 ->
  GetSapiV1BswapPoolConfigureResponseBody200
mkGetSapiV1BswapPoolConfigureResponseBody200 getSapiV1BswapPoolConfigureResponseBody200AssetConfigure getSapiV1BswapPoolConfigureResponseBody200Liquidity getSapiV1BswapPoolConfigureResponseBody200PoolId getSapiV1BswapPoolConfigureResponseBody200PoolNmae getSapiV1BswapPoolConfigureResponseBody200UpdateTime =
  GetSapiV1BswapPoolConfigureResponseBody200
    { getSapiV1BswapPoolConfigureResponseBody200AssetConfigure = getSapiV1BswapPoolConfigureResponseBody200AssetConfigure,
      getSapiV1BswapPoolConfigureResponseBody200Liquidity = getSapiV1BswapPoolConfigureResponseBody200Liquidity,
      getSapiV1BswapPoolConfigureResponseBody200PoolId = getSapiV1BswapPoolConfigureResponseBody200PoolId,
      getSapiV1BswapPoolConfigureResponseBody200PoolNmae = getSapiV1BswapPoolConfigureResponseBody200PoolNmae,
      getSapiV1BswapPoolConfigureResponseBody200UpdateTime = getSapiV1BswapPoolConfigureResponseBody200UpdateTime
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/poolConfigure.GET.responses.200.content.application\/json.schema.items.properties.assetConfigure@ in the specification.
data GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure = GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure
  { -- | BUSD
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD :: GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD,
    -- | USDT
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT :: GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure" (\obj -> (GHC.Base.pure GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "BUSD")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "USDT"))

-- | Create a new 'GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure' with all required fields.
mkGetSapiV1BswapPoolConfigureResponseBody200AssetConfigure ::
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD'
  GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT'
  GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT ->
  GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure
mkGetSapiV1BswapPoolConfigureResponseBody200AssetConfigure getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT =
  GetSapiV1BswapPoolConfigureResponseBody200AssetConfigure
    { getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD,
      getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/poolConfigure.GET.responses.200.content.application\/json.schema.items.properties.assetConfigure.properties.BUSD@ in the specification.
data GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD = GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD
  { -- | maxAdd
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxAdd :: GHC.Int.Int64,
    -- | maxSwap
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxSwap :: GHC.Int.Int64,
    -- | minAdd
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinAdd :: GHC.Int.Int64,
    -- | minSwap
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinSwap :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["maxAdd" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxAdd obj] : ["maxSwap" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxSwap obj] : ["minAdd" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinAdd obj] : ["minSwap" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinSwap obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["maxAdd" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxAdd obj] : ["maxSwap" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxSwap obj] : ["minAdd" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinAdd obj] : ["minSwap" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinSwap obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD" (\obj -> (((GHC.Base.pure GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "maxAdd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "maxSwap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "minAdd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "minSwap"))

-- | Create a new 'GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD' with all required fields.
mkGetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD ::
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxAdd'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxSwap'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinAdd'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinSwap'
  GHC.Int.Int64 ->
  GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD
mkGetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxAdd getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxSwap getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinAdd getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinSwap =
  GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSD
    { getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxAdd = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxAdd,
      getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxSwap = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMaxSwap,
      getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinAdd = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinAdd,
      getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinSwap = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureBUSDMinSwap
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/poolConfigure.GET.responses.200.content.application\/json.schema.items.properties.assetConfigure.properties.USDT@ in the specification.
data GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT = GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT
  { -- | maxAdd
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxAdd :: GHC.Int.Int64,
    -- | maxSwap
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxSwap :: GHC.Int.Int64,
    -- | minAdd
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinAdd :: GHC.Int.Int64,
    -- | minSwap
    getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinSwap :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["maxAdd" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxAdd obj] : ["maxSwap" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxSwap obj] : ["minAdd" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinAdd obj] : ["minSwap" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinSwap obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["maxAdd" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxAdd obj] : ["maxSwap" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxSwap obj] : ["minAdd" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinAdd obj] : ["minSwap" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinSwap obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT" (\obj -> (((GHC.Base.pure GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "maxAdd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "maxSwap")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "minAdd")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "minSwap"))

-- | Create a new 'GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT' with all required fields.
mkGetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT ::
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxAdd'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxSwap'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinAdd'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinSwap'
  GHC.Int.Int64 ->
  GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT
mkGetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxAdd getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxSwap getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinAdd getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinSwap =
  GetSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDT
    { getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxAdd = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxAdd,
      getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxSwap = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMaxSwap,
      getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinAdd = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinAdd,
      getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinSwap = getSapiV1BswapPoolConfigureResponseBody200AssetConfigureUSDTMinSwap
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/poolConfigure.GET.responses.200.content.application\/json.schema.items.properties.liquidity@ in the specification.
data GetSapiV1BswapPoolConfigureResponseBody200Liquidity = GetSapiV1BswapPoolConfigureResponseBody200Liquidity
  { -- | constantA: \"NA\" if pool is an innovation pool
    getSapiV1BswapPoolConfigureResponseBody200LiquidityConstantA :: GHC.Int.Int64,
    -- | minRedeemShare
    getSapiV1BswapPoolConfigureResponseBody200LiquidityMinRedeemShare :: GHC.Types.Double,
    -- | slippageTolerance: The swap proceeds only when the slippage is within the set range
    getSapiV1BswapPoolConfigureResponseBody200LiquiditySlippageTolerance :: GHC.Types.Double
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapPoolConfigureResponseBody200Liquidity where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["constantA" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200LiquidityConstantA obj] : ["minRedeemShare" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200LiquidityMinRedeemShare obj] : ["slippageTolerance" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200LiquiditySlippageTolerance obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["constantA" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200LiquidityConstantA obj] : ["minRedeemShare" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200LiquidityMinRedeemShare obj] : ["slippageTolerance" Data.Aeson.Types.ToJSON..= getSapiV1BswapPoolConfigureResponseBody200LiquiditySlippageTolerance obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapPoolConfigureResponseBody200Liquidity where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapPoolConfigureResponseBody200Liquidity" (\obj -> ((GHC.Base.pure GetSapiV1BswapPoolConfigureResponseBody200Liquidity GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "constantA")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "minRedeemShare")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slippageTolerance"))

-- | Create a new 'GetSapiV1BswapPoolConfigureResponseBody200Liquidity' with all required fields.
mkGetSapiV1BswapPoolConfigureResponseBody200Liquidity ::
  -- | 'getSapiV1BswapPoolConfigureResponseBody200LiquidityConstantA'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200LiquidityMinRedeemShare'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapPoolConfigureResponseBody200LiquiditySlippageTolerance'
  GHC.Types.Double ->
  GetSapiV1BswapPoolConfigureResponseBody200Liquidity
mkGetSapiV1BswapPoolConfigureResponseBody200Liquidity getSapiV1BswapPoolConfigureResponseBody200LiquidityConstantA getSapiV1BswapPoolConfigureResponseBody200LiquidityMinRedeemShare getSapiV1BswapPoolConfigureResponseBody200LiquiditySlippageTolerance =
  GetSapiV1BswapPoolConfigureResponseBody200Liquidity
    { getSapiV1BswapPoolConfigureResponseBody200LiquidityConstantA = getSapiV1BswapPoolConfigureResponseBody200LiquidityConstantA,
      getSapiV1BswapPoolConfigureResponseBody200LiquidityMinRedeemShare = getSapiV1BswapPoolConfigureResponseBody200LiquidityMinRedeemShare,
      getSapiV1BswapPoolConfigureResponseBody200LiquiditySlippageTolerance = getSapiV1BswapPoolConfigureResponseBody200LiquiditySlippageTolerance
    }

-- | > GET /sapi/v1/bswap/poolConfigure
--
-- The same as 'getSapiV1BswapPoolConfigure' but accepts an explicit configuration.
getSapiV1BswapPoolConfigureWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapPoolConfigureParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BswapPoolConfigureResponse)
getSapiV1BswapPoolConfigureWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BswapPoolConfigureResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapPoolConfigureResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1BswapPoolConfigureResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapPoolConfigureResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapPoolConfigureResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/poolConfigure")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapPoolConfigureParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapPoolConfigureParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapPoolConfigureParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapPoolConfigureParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/bswap/poolConfigure
--
-- The same as 'getSapiV1BswapPoolConfigure' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapPoolConfigureRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapPoolConfigureParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapPoolConfigureRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/poolConfigure")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapPoolConfigureParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapPoolConfigureParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapPoolConfigureParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapPoolConfigureParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/bswap/poolConfigure
--
-- The same as 'getSapiV1BswapPoolConfigure' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapPoolConfigureWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapPoolConfigureParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapPoolConfigureWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/poolConfigure")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapPoolConfigureParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapPoolConfigureParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapPoolConfigureParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapPoolConfigureParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
