{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1AssetConvertTransfer
module Binance.Operations.PostSapiV1AssetConvertTransfer where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/asset/convert-transfer
--
-- Convert transfer, convert between BUSD and stablecoins.
-- If the clientId has been used before, will not do the convert transfer, the original transfer will be returned.
--
-- Weight(UID): 5
postSapiV1AssetConvertTransfer ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetConvertTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1AssetConvertTransferResponse)
postSapiV1AssetConvertTransfer parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1AssetConvertTransferResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetConvertTransferResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1AssetConvertTransferResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetConvertTransferResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetConvertTransferResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/asset/convert-transfer")
        [ Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryClientTranId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "targetAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryTargetAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetConvertTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/convert-transfer.POST.parameters@ in the specification.
data PostSapiV1AssetConvertTransferParameters = PostSapiV1AssetConvertTransferParameters
  { -- | queryAmount: Represents the parameter named \'amount\'
    postSapiV1AssetConvertTransferParametersQueryAmount :: GHC.Types.Double,
    -- | queryAsset: Represents the parameter named \'asset\'
    postSapiV1AssetConvertTransferParametersQueryAsset :: Data.Text.Internal.Text,
    -- | queryClientTranId: Represents the parameter named \'clientTranId\'
    --
    -- The unique flag, the min length is 20
    postSapiV1AssetConvertTransferParametersQueryClientTranId :: Data.Text.Internal.Text,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1AssetConvertTransferParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1AssetConvertTransferParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTargetAsset: Represents the parameter named \'targetAsset\'
    --
    -- Target asset you want to convert
    postSapiV1AssetConvertTransferParametersQueryTargetAsset :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1AssetConvertTransferParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetConvertTransferParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryAmount obj] : ["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryAsset obj] : ["queryClientTranId" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryClientTranId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetConvertTransferParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQuerySignature obj] : ["queryTargetAsset" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryTargetAsset obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryAmount obj] : ["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryAsset obj] : ["queryClientTranId" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryClientTranId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetConvertTransferParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQuerySignature obj] : ["queryTargetAsset" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryTargetAsset obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetConvertTransferParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetConvertTransferParameters" (\obj -> ((((((GHC.Base.pure PostSapiV1AssetConvertTransferParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryClientTranId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTargetAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1AssetConvertTransferParameters' with all required fields.
mkPostSapiV1AssetConvertTransferParameters ::
  -- | 'postSapiV1AssetConvertTransferParametersQueryAmount'
  GHC.Types.Double ->
  -- | 'postSapiV1AssetConvertTransferParametersQueryAsset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetConvertTransferParametersQueryClientTranId'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetConvertTransferParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetConvertTransferParametersQueryTargetAsset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetConvertTransferParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1AssetConvertTransferParameters
mkPostSapiV1AssetConvertTransferParameters postSapiV1AssetConvertTransferParametersQueryAmount postSapiV1AssetConvertTransferParametersQueryAsset postSapiV1AssetConvertTransferParametersQueryClientTranId postSapiV1AssetConvertTransferParametersQuerySignature postSapiV1AssetConvertTransferParametersQueryTargetAsset postSapiV1AssetConvertTransferParametersQueryTimestamp =
  PostSapiV1AssetConvertTransferParameters
    { postSapiV1AssetConvertTransferParametersQueryAmount = postSapiV1AssetConvertTransferParametersQueryAmount,
      postSapiV1AssetConvertTransferParametersQueryAsset = postSapiV1AssetConvertTransferParametersQueryAsset,
      postSapiV1AssetConvertTransferParametersQueryClientTranId = postSapiV1AssetConvertTransferParametersQueryClientTranId,
      postSapiV1AssetConvertTransferParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1AssetConvertTransferParametersQuerySignature = postSapiV1AssetConvertTransferParametersQuerySignature,
      postSapiV1AssetConvertTransferParametersQueryTargetAsset = postSapiV1AssetConvertTransferParametersQueryTargetAsset,
      postSapiV1AssetConvertTransferParametersQueryTimestamp = postSapiV1AssetConvertTransferParametersQueryTimestamp
    }

-- | Represents a response of the operation 'postSapiV1AssetConvertTransfer'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1AssetConvertTransferResponseError' is used.
data PostSapiV1AssetConvertTransferResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1AssetConvertTransferResponseError GHC.Base.String
  | -- | Conversion Information
    PostSapiV1AssetConvertTransferResponse200 PostSapiV1AssetConvertTransferResponseBody200
  | -- | Bad Request
    PostSapiV1AssetConvertTransferResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1AssetConvertTransferResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/convert-transfer.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1AssetConvertTransferResponseBody200 = PostSapiV1AssetConvertTransferResponseBody200
  { -- | status
    postSapiV1AssetConvertTransferResponseBody200Status :: Data.Text.Internal.Text,
    -- | tranId
    postSapiV1AssetConvertTransferResponseBody200TranId :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetConvertTransferResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferResponseBody200Status obj] : ["tranId" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferResponseBody200TranId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["status" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferResponseBody200Status obj] : ["tranId" Data.Aeson.Types.ToJSON..= postSapiV1AssetConvertTransferResponseBody200TranId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetConvertTransferResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetConvertTransferResponseBody200" (\obj -> (GHC.Base.pure PostSapiV1AssetConvertTransferResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tranId"))

-- | Create a new 'PostSapiV1AssetConvertTransferResponseBody200' with all required fields.
mkPostSapiV1AssetConvertTransferResponseBody200 ::
  -- | 'postSapiV1AssetConvertTransferResponseBody200Status'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetConvertTransferResponseBody200TranId'
  GHC.Int.Int64 ->
  PostSapiV1AssetConvertTransferResponseBody200
mkPostSapiV1AssetConvertTransferResponseBody200 postSapiV1AssetConvertTransferResponseBody200Status postSapiV1AssetConvertTransferResponseBody200TranId =
  PostSapiV1AssetConvertTransferResponseBody200
    { postSapiV1AssetConvertTransferResponseBody200Status = postSapiV1AssetConvertTransferResponseBody200Status,
      postSapiV1AssetConvertTransferResponseBody200TranId = postSapiV1AssetConvertTransferResponseBody200TranId
    }

-- | > POST /sapi/v1/asset/convert-transfer
--
-- The same as 'postSapiV1AssetConvertTransfer' but accepts an explicit configuration.
postSapiV1AssetConvertTransferWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetConvertTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1AssetConvertTransferResponse)
postSapiV1AssetConvertTransferWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1AssetConvertTransferResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetConvertTransferResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1AssetConvertTransferResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetConvertTransferResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetConvertTransferResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/asset/convert-transfer")
          [ Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryClientTranId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "targetAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryTargetAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetConvertTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/asset/convert-transfer
--
-- The same as 'postSapiV1AssetConvertTransfer' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AssetConvertTransferRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetConvertTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AssetConvertTransferRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/asset/convert-transfer")
        [ Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryClientTranId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "targetAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryTargetAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetConvertTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/asset/convert-transfer
--
-- The same as 'postSapiV1AssetConvertTransfer' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AssetConvertTransferWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetConvertTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AssetConvertTransferWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/asset/convert-transfer")
          [ Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryClientTranId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "targetAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryTargetAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetConvertTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetConvertTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
