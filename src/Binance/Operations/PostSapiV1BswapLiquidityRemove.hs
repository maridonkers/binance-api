{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1BswapLiquidityRemove
module Binance.Operations.PostSapiV1BswapLiquidityRemove where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/bswap/liquidityRemove
--
-- Remove liquidity from a pool, \`type\` include \`SINGLE\` and \`COMBINATION\`, asset is mandatory for single asset removal
--
-- Weight(UID): 1000 (Additional: 3 times one second)
postSapiV1BswapLiquidityRemove ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapLiquidityRemoveParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1BswapLiquidityRemoveResponse)
postSapiV1BswapLiquidityRemove parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1BswapLiquidityRemoveResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BswapLiquidityRemoveResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1BswapLiquidityRemoveResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BswapLiquidityRemoveResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BswapLiquidityRemoveResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/bswap/liquidityRemove")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityRemoveParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "shareAmount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryShareAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityRemoveParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidityRemove.POST.parameters@ in the specification.
data PostSapiV1BswapLiquidityRemoveParameters = PostSapiV1BswapLiquidityRemoveParameters
  { -- | queryAsset: Represents the parameter named \'asset\'
    --
    -- Mandatory for single asset removal
    postSapiV1BswapLiquidityRemoveParametersQueryAsset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPoolId: Represents the parameter named \'poolId\'
    postSapiV1BswapLiquidityRemoveParametersQueryPoolId :: GHC.Int.Int64,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1BswapLiquidityRemoveParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryShareAmount: Represents the parameter named \'shareAmount\'
    postSapiV1BswapLiquidityRemoveParametersQueryShareAmount :: GHC.Types.Double,
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1BswapLiquidityRemoveParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1BswapLiquidityRemoveParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryType: Represents the parameter named \'type\'
    --
    -- * \`SINGLE\` - for single asset removal
    -- * \`COMBINATION\` - for combination of all coins removal
    postSapiV1BswapLiquidityRemoveParametersQueryType :: PostSapiV1BswapLiquidityRemoveParametersQueryType
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BswapLiquidityRemoveParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapLiquidityRemoveParametersQueryAsset obj) : ["queryPoolId" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQueryPoolId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapLiquidityRemoveParametersQueryRecvWindow obj) : ["queryShareAmount" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQueryShareAmount obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQueryTimestamp obj] : ["queryType" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQueryType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapLiquidityRemoveParametersQueryAsset obj) : ["queryPoolId" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQueryPoolId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapLiquidityRemoveParametersQueryRecvWindow obj) : ["queryShareAmount" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQueryShareAmount obj] : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQueryTimestamp obj] : ["queryType" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveParametersQueryType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BswapLiquidityRemoveParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BswapLiquidityRemoveParameters" (\obj -> ((((((GHC.Base.pure PostSapiV1BswapLiquidityRemoveParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryPoolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryShareAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryType"))

-- | Create a new 'PostSapiV1BswapLiquidityRemoveParameters' with all required fields.
mkPostSapiV1BswapLiquidityRemoveParameters ::
  -- | 'postSapiV1BswapLiquidityRemoveParametersQueryPoolId'
  GHC.Int.Int64 ->
  -- | 'postSapiV1BswapLiquidityRemoveParametersQueryShareAmount'
  GHC.Types.Double ->
  -- | 'postSapiV1BswapLiquidityRemoveParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BswapLiquidityRemoveParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'postSapiV1BswapLiquidityRemoveParametersQueryType'
  PostSapiV1BswapLiquidityRemoveParametersQueryType ->
  PostSapiV1BswapLiquidityRemoveParameters
mkPostSapiV1BswapLiquidityRemoveParameters postSapiV1BswapLiquidityRemoveParametersQueryPoolId postSapiV1BswapLiquidityRemoveParametersQueryShareAmount postSapiV1BswapLiquidityRemoveParametersQuerySignature postSapiV1BswapLiquidityRemoveParametersQueryTimestamp postSapiV1BswapLiquidityRemoveParametersQueryType =
  PostSapiV1BswapLiquidityRemoveParameters
    { postSapiV1BswapLiquidityRemoveParametersQueryAsset = GHC.Maybe.Nothing,
      postSapiV1BswapLiquidityRemoveParametersQueryPoolId = postSapiV1BswapLiquidityRemoveParametersQueryPoolId,
      postSapiV1BswapLiquidityRemoveParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1BswapLiquidityRemoveParametersQueryShareAmount = postSapiV1BswapLiquidityRemoveParametersQueryShareAmount,
      postSapiV1BswapLiquidityRemoveParametersQuerySignature = postSapiV1BswapLiquidityRemoveParametersQuerySignature,
      postSapiV1BswapLiquidityRemoveParametersQueryTimestamp = postSapiV1BswapLiquidityRemoveParametersQueryTimestamp,
      postSapiV1BswapLiquidityRemoveParametersQueryType = postSapiV1BswapLiquidityRemoveParametersQueryType
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/bswap\/liquidityRemove.POST.parameters.properties.queryType@ in the specification.
--
-- Represents the parameter named \'type\'
--
-- * \`SINGLE\` - for single asset removal
-- * \`COMBINATION\` - for combination of all coins removal
data PostSapiV1BswapLiquidityRemoveParametersQueryType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1BswapLiquidityRemoveParametersQueryTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1BswapLiquidityRemoveParametersQueryTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"SINGLE"@
    PostSapiV1BswapLiquidityRemoveParametersQueryTypeEnumSINGLE
  | -- | Represents the JSON value @"COMBINATION"@
    PostSapiV1BswapLiquidityRemoveParametersQueryTypeEnumCOMBINATION
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BswapLiquidityRemoveParametersQueryType where
  toJSON (PostSapiV1BswapLiquidityRemoveParametersQueryTypeOther val) = val
  toJSON (PostSapiV1BswapLiquidityRemoveParametersQueryTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1BswapLiquidityRemoveParametersQueryTypeEnumSINGLE) = "SINGLE"
  toJSON (PostSapiV1BswapLiquidityRemoveParametersQueryTypeEnumCOMBINATION) = "COMBINATION"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BswapLiquidityRemoveParametersQueryType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "SINGLE" -> PostSapiV1BswapLiquidityRemoveParametersQueryTypeEnumSINGLE
            | val GHC.Classes.== "COMBINATION" -> PostSapiV1BswapLiquidityRemoveParametersQueryTypeEnumCOMBINATION
            | GHC.Base.otherwise -> PostSapiV1BswapLiquidityRemoveParametersQueryTypeOther val
      )

-- | Represents a response of the operation 'postSapiV1BswapLiquidityRemove'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1BswapLiquidityRemoveResponseError' is used.
data PostSapiV1BswapLiquidityRemoveResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1BswapLiquidityRemoveResponseError GHC.Base.String
  | -- | Operation Id
    PostSapiV1BswapLiquidityRemoveResponse200 PostSapiV1BswapLiquidityRemoveResponseBody200
  | -- | Bad Request
    PostSapiV1BswapLiquidityRemoveResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1BswapLiquidityRemoveResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidityRemove.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1BswapLiquidityRemoveResponseBody200 = PostSapiV1BswapLiquidityRemoveResponseBody200
  { -- | operationId
    postSapiV1BswapLiquidityRemoveResponseBody200OperationId :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BswapLiquidityRemoveResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["operationId" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveResponseBody200OperationId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["operationId" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityRemoveResponseBody200OperationId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BswapLiquidityRemoveResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BswapLiquidityRemoveResponseBody200" (\obj -> GHC.Base.pure PostSapiV1BswapLiquidityRemoveResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "operationId"))

-- | Create a new 'PostSapiV1BswapLiquidityRemoveResponseBody200' with all required fields.
mkPostSapiV1BswapLiquidityRemoveResponseBody200 ::
  -- | 'postSapiV1BswapLiquidityRemoveResponseBody200OperationId'
  GHC.Int.Int64 ->
  PostSapiV1BswapLiquidityRemoveResponseBody200
mkPostSapiV1BswapLiquidityRemoveResponseBody200 postSapiV1BswapLiquidityRemoveResponseBody200OperationId = PostSapiV1BswapLiquidityRemoveResponseBody200 {postSapiV1BswapLiquidityRemoveResponseBody200OperationId = postSapiV1BswapLiquidityRemoveResponseBody200OperationId}

-- | > POST /sapi/v1/bswap/liquidityRemove
--
-- The same as 'postSapiV1BswapLiquidityRemove' but accepts an explicit configuration.
postSapiV1BswapLiquidityRemoveWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapLiquidityRemoveParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1BswapLiquidityRemoveResponse)
postSapiV1BswapLiquidityRemoveWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1BswapLiquidityRemoveResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BswapLiquidityRemoveResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1BswapLiquidityRemoveResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BswapLiquidityRemoveResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BswapLiquidityRemoveResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/bswap/liquidityRemove")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityRemoveParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "shareAmount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryShareAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityRemoveParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/bswap/liquidityRemove
--
-- The same as 'postSapiV1BswapLiquidityRemove' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BswapLiquidityRemoveRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapLiquidityRemoveParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BswapLiquidityRemoveRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/bswap/liquidityRemove")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityRemoveParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "shareAmount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryShareAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityRemoveParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/bswap/liquidityRemove
--
-- The same as 'postSapiV1BswapLiquidityRemove' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BswapLiquidityRemoveWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapLiquidityRemoveParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BswapLiquidityRemoveWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/bswap/liquidityRemove")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityRemoveParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "shareAmount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryShareAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityRemoveParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityRemoveParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
