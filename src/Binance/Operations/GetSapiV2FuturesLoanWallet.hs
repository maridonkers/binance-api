{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV2FuturesLoanWallet
module Binance.Operations.GetSapiV2FuturesLoanWallet where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v2/futures/loan/wallet
--
-- Weight(IP): 1
getSapiV2FuturesLoanWallet ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV2FuturesLoanWalletParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV2FuturesLoanWalletResponse)
getSapiV2FuturesLoanWallet parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV2FuturesLoanWalletResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV2FuturesLoanWalletResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV2FuturesLoanWalletResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV2FuturesLoanWalletResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV2FuturesLoanWalletResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v2/futures/loan/wallet")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV2FuturesLoanWalletParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV2FuturesLoanWalletParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV2FuturesLoanWalletParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v2\/futures\/loan\/wallet.GET.parameters@ in the specification.
data GetSapiV2FuturesLoanWalletParameters = GetSapiV2FuturesLoanWalletParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV2FuturesLoanWalletParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV2FuturesLoanWalletParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV2FuturesLoanWalletParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV2FuturesLoanWalletParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV2FuturesLoanWalletParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV2FuturesLoanWalletParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV2FuturesLoanWalletParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV2FuturesLoanWalletParameters" (\obj -> ((GHC.Base.pure GetSapiV2FuturesLoanWalletParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV2FuturesLoanWalletParameters' with all required fields.
mkGetSapiV2FuturesLoanWalletParameters ::
  -- | 'getSapiV2FuturesLoanWalletParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV2FuturesLoanWalletParameters
mkGetSapiV2FuturesLoanWalletParameters getSapiV2FuturesLoanWalletParametersQuerySignature getSapiV2FuturesLoanWalletParametersQueryTimestamp =
  GetSapiV2FuturesLoanWalletParameters
    { getSapiV2FuturesLoanWalletParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV2FuturesLoanWalletParametersQuerySignature = getSapiV2FuturesLoanWalletParametersQuerySignature,
      getSapiV2FuturesLoanWalletParametersQueryTimestamp = getSapiV2FuturesLoanWalletParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV2FuturesLoanWallet'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV2FuturesLoanWalletResponseError' is used.
data GetSapiV2FuturesLoanWalletResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV2FuturesLoanWalletResponseError GHC.Base.String
  | -- | Cross-Collateral Wallet Information
    GetSapiV2FuturesLoanWalletResponse200 GetSapiV2FuturesLoanWalletResponseBody200
  | -- | Bad Request
    GetSapiV2FuturesLoanWalletResponse400 Error
  | -- | Unauthorized Request
    GetSapiV2FuturesLoanWalletResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v2\/futures\/loan\/wallet.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV2FuturesLoanWalletResponseBody200 = GetSapiV2FuturesLoanWalletResponseBody200
  { -- | asset
    getSapiV2FuturesLoanWalletResponseBody200Asset :: Data.Text.Internal.Text,
    -- | crossCollaterals
    getSapiV2FuturesLoanWalletResponseBody200CrossCollaterals :: ([GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals]),
    -- | interestFreeLimit
    getSapiV2FuturesLoanWalletResponseBody200InterestFreeLimit :: Data.Text.Internal.Text,
    -- | totalBorrowed
    getSapiV2FuturesLoanWalletResponseBody200TotalBorrowed :: Data.Text.Internal.Text,
    -- | totalCrossCollateral
    getSapiV2FuturesLoanWalletResponseBody200TotalCrossCollateral :: Data.Text.Internal.Text,
    -- | totalInterest
    getSapiV2FuturesLoanWalletResponseBody200TotalInterest :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV2FuturesLoanWalletResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200Asset obj] : ["crossCollaterals" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollaterals obj] : ["interestFreeLimit" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200InterestFreeLimit obj] : ["totalBorrowed" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200TotalBorrowed obj] : ["totalCrossCollateral" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200TotalCrossCollateral obj] : ["totalInterest" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200TotalInterest obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200Asset obj] : ["crossCollaterals" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollaterals obj] : ["interestFreeLimit" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200InterestFreeLimit obj] : ["totalBorrowed" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200TotalBorrowed obj] : ["totalCrossCollateral" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200TotalCrossCollateral obj] : ["totalInterest" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200TotalInterest obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV2FuturesLoanWalletResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV2FuturesLoanWalletResponseBody200" (\obj -> (((((GHC.Base.pure GetSapiV2FuturesLoanWalletResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "crossCollaterals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interestFreeLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalBorrowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalCrossCollateral")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalInterest"))

-- | Create a new 'GetSapiV2FuturesLoanWalletResponseBody200' with all required fields.
mkGetSapiV2FuturesLoanWalletResponseBody200 ::
  -- | 'getSapiV2FuturesLoanWalletResponseBody200Asset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200CrossCollaterals'
  [GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals] ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200InterestFreeLimit'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200TotalBorrowed'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200TotalCrossCollateral'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200TotalInterest'
  Data.Text.Internal.Text ->
  GetSapiV2FuturesLoanWalletResponseBody200
mkGetSapiV2FuturesLoanWalletResponseBody200 getSapiV2FuturesLoanWalletResponseBody200Asset getSapiV2FuturesLoanWalletResponseBody200CrossCollaterals getSapiV2FuturesLoanWalletResponseBody200InterestFreeLimit getSapiV2FuturesLoanWalletResponseBody200TotalBorrowed getSapiV2FuturesLoanWalletResponseBody200TotalCrossCollateral getSapiV2FuturesLoanWalletResponseBody200TotalInterest =
  GetSapiV2FuturesLoanWalletResponseBody200
    { getSapiV2FuturesLoanWalletResponseBody200Asset = getSapiV2FuturesLoanWalletResponseBody200Asset,
      getSapiV2FuturesLoanWalletResponseBody200CrossCollaterals = getSapiV2FuturesLoanWalletResponseBody200CrossCollaterals,
      getSapiV2FuturesLoanWalletResponseBody200InterestFreeLimit = getSapiV2FuturesLoanWalletResponseBody200InterestFreeLimit,
      getSapiV2FuturesLoanWalletResponseBody200TotalBorrowed = getSapiV2FuturesLoanWalletResponseBody200TotalBorrowed,
      getSapiV2FuturesLoanWalletResponseBody200TotalCrossCollateral = getSapiV2FuturesLoanWalletResponseBody200TotalCrossCollateral,
      getSapiV2FuturesLoanWalletResponseBody200TotalInterest = getSapiV2FuturesLoanWalletResponseBody200TotalInterest
    }

-- | Defines the object schema located at @paths.\/sapi\/v2\/futures\/loan\/wallet.GET.responses.200.content.application\/json.schema.properties.crossCollaterals.items@ in the specification.
data GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals = GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals
  { -- | collateralCoin
    getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCollateralCoin :: Data.Text.Internal.Text,
    -- | currentCollateralRate
    getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCurrentCollateralRate :: Data.Text.Internal.Text,
    -- | interest
    getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterest :: Data.Text.Internal.Text,
    -- | interestFreeLimitUsed
    getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterestFreeLimitUsed :: Data.Text.Internal.Text,
    -- | loanAmount
    getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanAmount :: Data.Text.Internal.Text,
    -- | loanCoin
    getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanCoin :: Data.Text.Internal.Text,
    -- | locked
    getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLocked :: Data.Text.Internal.Text,
    -- | principalForInterest
    getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsPrincipalForInterest :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["collateralCoin" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCollateralCoin obj] : ["currentCollateralRate" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCurrentCollateralRate obj] : ["interest" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterest obj] : ["interestFreeLimitUsed" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterestFreeLimitUsed obj] : ["loanAmount" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanAmount obj] : ["loanCoin" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanCoin obj] : ["locked" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLocked obj] : ["principalForInterest" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsPrincipalForInterest obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["collateralCoin" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCollateralCoin obj] : ["currentCollateralRate" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCurrentCollateralRate obj] : ["interest" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterest obj] : ["interestFreeLimitUsed" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterestFreeLimitUsed obj] : ["loanAmount" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanAmount obj] : ["loanCoin" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanCoin obj] : ["locked" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLocked obj] : ["principalForInterest" Data.Aeson.Types.ToJSON..= getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsPrincipalForInterest obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals" (\obj -> (((((((GHC.Base.pure GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "collateralCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currentCollateralRate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interest")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interestFreeLimitUsed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "loanAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "loanCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "locked")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "principalForInterest"))

-- | Create a new 'GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals' with all required fields.
mkGetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals ::
  -- | 'getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCollateralCoin'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCurrentCollateralRate'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterest'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterestFreeLimitUsed'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanCoin'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLocked'
  Data.Text.Internal.Text ->
  -- | 'getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsPrincipalForInterest'
  Data.Text.Internal.Text ->
  GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals
mkGetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCollateralCoin getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCurrentCollateralRate getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterest getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterestFreeLimitUsed getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanAmount getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanCoin getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLocked getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsPrincipalForInterest =
  GetSapiV2FuturesLoanWalletResponseBody200CrossCollaterals
    { getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCollateralCoin = getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCollateralCoin,
      getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCurrentCollateralRate = getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsCurrentCollateralRate,
      getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterest = getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterest,
      getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterestFreeLimitUsed = getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsInterestFreeLimitUsed,
      getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanAmount = getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanAmount,
      getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanCoin = getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLoanCoin,
      getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLocked = getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsLocked,
      getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsPrincipalForInterest = getSapiV2FuturesLoanWalletResponseBody200CrossCollateralsPrincipalForInterest
    }

-- | > GET /sapi/v2/futures/loan/wallet
--
-- The same as 'getSapiV2FuturesLoanWallet' but accepts an explicit configuration.
getSapiV2FuturesLoanWalletWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV2FuturesLoanWalletParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV2FuturesLoanWalletResponse)
getSapiV2FuturesLoanWalletWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV2FuturesLoanWalletResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV2FuturesLoanWalletResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV2FuturesLoanWalletResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV2FuturesLoanWalletResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV2FuturesLoanWalletResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v2/futures/loan/wallet")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV2FuturesLoanWalletParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV2FuturesLoanWalletParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV2FuturesLoanWalletParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v2/futures/loan/wallet
--
-- The same as 'getSapiV2FuturesLoanWallet' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV2FuturesLoanWalletRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV2FuturesLoanWalletParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV2FuturesLoanWalletRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v2/futures/loan/wallet")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV2FuturesLoanWalletParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV2FuturesLoanWalletParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV2FuturesLoanWalletParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v2/futures/loan/wallet
--
-- The same as 'getSapiV2FuturesLoanWallet' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV2FuturesLoanWalletWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV2FuturesLoanWalletParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV2FuturesLoanWalletWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v2/futures/loan/wallet")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV2FuturesLoanWalletParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV2FuturesLoanWalletParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV2FuturesLoanWalletParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
