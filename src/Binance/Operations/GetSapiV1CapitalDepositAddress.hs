{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1CapitalDepositAddress
module Binance.Operations.GetSapiV1CapitalDepositAddress where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/capital/deposit/address
--
-- Fetch deposit address with network.
--
-- - If network is not send, return with default network of the coin.
-- - You can get network and isDefault in networkList in the response of Get \/sapi\/v1\/capital\/config\/getall (HMAC SHA256).
--
-- Weight(IP): 10
getSapiV1CapitalDepositAddress ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1CapitalDepositAddressParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1CapitalDepositAddressResponse)
getSapiV1CapitalDepositAddress parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1CapitalDepositAddressResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1CapitalDepositAddressResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1CapitalDepositAddressResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1CapitalDepositAddressResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1CapitalDepositAddressResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/capital/deposit/address")
        [ Binance.Common.QueryParameter (Data.Text.pack "coin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQueryCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "network") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1CapitalDepositAddressParametersQueryNetwork parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1CapitalDepositAddressParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/capital\/deposit\/address.GET.parameters@ in the specification.
data GetSapiV1CapitalDepositAddressParameters = GetSapiV1CapitalDepositAddressParameters
  { -- | queryCoin: Represents the parameter named \'coin\'
    --
    -- Coin name
    getSapiV1CapitalDepositAddressParametersQueryCoin :: Data.Text.Internal.Text,
    -- | queryNetwork: Represents the parameter named \'network\'
    getSapiV1CapitalDepositAddressParametersQueryNetwork :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1CapitalDepositAddressParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1CapitalDepositAddressParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1CapitalDepositAddressParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1CapitalDepositAddressParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryCoin" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressParametersQueryCoin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNetwork" Data.Aeson.Types.ToJSON..=)) (getSapiV1CapitalDepositAddressParametersQueryNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1CapitalDepositAddressParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryCoin" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressParametersQueryCoin obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryNetwork" Data.Aeson.Types.ToJSON..=)) (getSapiV1CapitalDepositAddressParametersQueryNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1CapitalDepositAddressParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1CapitalDepositAddressParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1CapitalDepositAddressParameters" (\obj -> ((((GHC.Base.pure GetSapiV1CapitalDepositAddressParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryCoin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryNetwork")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1CapitalDepositAddressParameters' with all required fields.
mkGetSapiV1CapitalDepositAddressParameters ::
  -- | 'getSapiV1CapitalDepositAddressParametersQueryCoin'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1CapitalDepositAddressParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1CapitalDepositAddressParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1CapitalDepositAddressParameters
mkGetSapiV1CapitalDepositAddressParameters getSapiV1CapitalDepositAddressParametersQueryCoin getSapiV1CapitalDepositAddressParametersQuerySignature getSapiV1CapitalDepositAddressParametersQueryTimestamp =
  GetSapiV1CapitalDepositAddressParameters
    { getSapiV1CapitalDepositAddressParametersQueryCoin = getSapiV1CapitalDepositAddressParametersQueryCoin,
      getSapiV1CapitalDepositAddressParametersQueryNetwork = GHC.Maybe.Nothing,
      getSapiV1CapitalDepositAddressParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1CapitalDepositAddressParametersQuerySignature = getSapiV1CapitalDepositAddressParametersQuerySignature,
      getSapiV1CapitalDepositAddressParametersQueryTimestamp = getSapiV1CapitalDepositAddressParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1CapitalDepositAddress'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1CapitalDepositAddressResponseError' is used.
data GetSapiV1CapitalDepositAddressResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1CapitalDepositAddressResponseError GHC.Base.String
  | -- | Deposit address info
    GetSapiV1CapitalDepositAddressResponse200 GetSapiV1CapitalDepositAddressResponseBody200
  | -- | Bad Request
    GetSapiV1CapitalDepositAddressResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1CapitalDepositAddressResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/capital\/deposit\/address.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1CapitalDepositAddressResponseBody200 = GetSapiV1CapitalDepositAddressResponseBody200
  { -- | address
    getSapiV1CapitalDepositAddressResponseBody200Address :: Data.Text.Internal.Text,
    -- | coin
    getSapiV1CapitalDepositAddressResponseBody200Coin :: Data.Text.Internal.Text,
    -- | tag
    getSapiV1CapitalDepositAddressResponseBody200Tag :: Data.Text.Internal.Text,
    -- | url
    getSapiV1CapitalDepositAddressResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1CapitalDepositAddressResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressResponseBody200Address obj] : ["coin" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressResponseBody200Coin obj] : ["tag" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressResponseBody200Tag obj] : ["url" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressResponseBody200Url obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["address" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressResponseBody200Address obj] : ["coin" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressResponseBody200Coin obj] : ["tag" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressResponseBody200Tag obj] : ["url" Data.Aeson.Types.ToJSON..= getSapiV1CapitalDepositAddressResponseBody200Url obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1CapitalDepositAddressResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1CapitalDepositAddressResponseBody200" (\obj -> (((GHC.Base.pure GetSapiV1CapitalDepositAddressResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "coin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tag")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetSapiV1CapitalDepositAddressResponseBody200' with all required fields.
mkGetSapiV1CapitalDepositAddressResponseBody200 ::
  -- | 'getSapiV1CapitalDepositAddressResponseBody200Address'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1CapitalDepositAddressResponseBody200Coin'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1CapitalDepositAddressResponseBody200Tag'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1CapitalDepositAddressResponseBody200Url'
  Data.Text.Internal.Text ->
  GetSapiV1CapitalDepositAddressResponseBody200
mkGetSapiV1CapitalDepositAddressResponseBody200 getSapiV1CapitalDepositAddressResponseBody200Address getSapiV1CapitalDepositAddressResponseBody200Coin getSapiV1CapitalDepositAddressResponseBody200Tag getSapiV1CapitalDepositAddressResponseBody200Url =
  GetSapiV1CapitalDepositAddressResponseBody200
    { getSapiV1CapitalDepositAddressResponseBody200Address = getSapiV1CapitalDepositAddressResponseBody200Address,
      getSapiV1CapitalDepositAddressResponseBody200Coin = getSapiV1CapitalDepositAddressResponseBody200Coin,
      getSapiV1CapitalDepositAddressResponseBody200Tag = getSapiV1CapitalDepositAddressResponseBody200Tag,
      getSapiV1CapitalDepositAddressResponseBody200Url = getSapiV1CapitalDepositAddressResponseBody200Url
    }

-- | > GET /sapi/v1/capital/deposit/address
--
-- The same as 'getSapiV1CapitalDepositAddress' but accepts an explicit configuration.
getSapiV1CapitalDepositAddressWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1CapitalDepositAddressParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1CapitalDepositAddressResponse)
getSapiV1CapitalDepositAddressWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1CapitalDepositAddressResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1CapitalDepositAddressResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1CapitalDepositAddressResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1CapitalDepositAddressResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1CapitalDepositAddressResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/capital/deposit/address")
          [ Binance.Common.QueryParameter (Data.Text.pack "coin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQueryCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "network") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1CapitalDepositAddressParametersQueryNetwork parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1CapitalDepositAddressParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/capital/deposit/address
--
-- The same as 'getSapiV1CapitalDepositAddress' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1CapitalDepositAddressRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1CapitalDepositAddressParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1CapitalDepositAddressRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/capital/deposit/address")
        [ Binance.Common.QueryParameter (Data.Text.pack "coin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQueryCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "network") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1CapitalDepositAddressParametersQueryNetwork parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1CapitalDepositAddressParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/capital/deposit/address
--
-- The same as 'getSapiV1CapitalDepositAddress' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1CapitalDepositAddressWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1CapitalDepositAddressParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1CapitalDepositAddressWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/capital/deposit/address")
          [ Binance.Common.QueryParameter (Data.Text.pack "coin") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQueryCoin parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "network") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1CapitalDepositAddressParametersQueryNetwork parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1CapitalDepositAddressParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1CapitalDepositAddressParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
