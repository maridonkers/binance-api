{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BswapLiquidity
module Binance.Operations.GetSapiV1BswapLiquidity where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/bswap/liquidity
--
-- Get liquidity information and user share of a pool.
--
-- Weight(IP):
-- - \`1\` for one pool;
-- - \`10\` when the poolId parameter is omitted;
getSapiV1BswapLiquidity ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapLiquidityParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BswapLiquidityResponse)
getSapiV1BswapLiquidity parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BswapLiquidityResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapLiquidityResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1BswapLiquidityResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapLiquidityResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapLiquidityResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/liquidity")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidity.GET.parameters@ in the specification.
data GetSapiV1BswapLiquidityParameters = GetSapiV1BswapLiquidityParameters
  { -- | queryPoolId: Represents the parameter named \'poolId\'
    getSapiV1BswapLiquidityParametersQueryPoolId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1BswapLiquidityParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1BswapLiquidityParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapLiquidityParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapLiquidityParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPoolId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityParametersQueryPoolId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPoolId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityParametersQueryPoolId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapLiquidityParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapLiquidityParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapLiquidityParameters" (\obj -> (((GHC.Base.pure GetSapiV1BswapLiquidityParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPoolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1BswapLiquidityParameters' with all required fields.
mkGetSapiV1BswapLiquidityParameters ::
  -- | 'getSapiV1BswapLiquidityParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapLiquidityParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1BswapLiquidityParameters
mkGetSapiV1BswapLiquidityParameters getSapiV1BswapLiquidityParametersQuerySignature getSapiV1BswapLiquidityParametersQueryTimestamp =
  GetSapiV1BswapLiquidityParameters
    { getSapiV1BswapLiquidityParametersQueryPoolId = GHC.Maybe.Nothing,
      getSapiV1BswapLiquidityParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1BswapLiquidityParametersQuerySignature = getSapiV1BswapLiquidityParametersQuerySignature,
      getSapiV1BswapLiquidityParametersQueryTimestamp = getSapiV1BswapLiquidityParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1BswapLiquidity'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BswapLiquidityResponseError' is used.
data GetSapiV1BswapLiquidityResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BswapLiquidityResponseError GHC.Base.String
  | -- | Pool Liquidation information
    GetSapiV1BswapLiquidityResponse200 ([GetSapiV1BswapLiquidityResponseBody200])
  | -- | Bad Request
    GetSapiV1BswapLiquidityResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1BswapLiquidityResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidity.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1BswapLiquidityResponseBody200 = GetSapiV1BswapLiquidityResponseBody200
  { -- | liquidity
    getSapiV1BswapLiquidityResponseBody200Liquidity :: GetSapiV1BswapLiquidityResponseBody200Liquidity,
    -- | poolId
    getSapiV1BswapLiquidityResponseBody200PoolId :: GHC.Int.Int64,
    -- | poolNmae
    getSapiV1BswapLiquidityResponseBody200PoolNmae :: Data.Text.Internal.Text,
    -- | share
    getSapiV1BswapLiquidityResponseBody200Share :: GetSapiV1BswapLiquidityResponseBody200Share,
    -- | updateTime
    getSapiV1BswapLiquidityResponseBody200UpdateTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapLiquidityResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["liquidity" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200Liquidity obj] : ["poolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200PoolId obj] : ["poolNmae" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200PoolNmae obj] : ["share" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200Share obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200UpdateTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["liquidity" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200Liquidity obj] : ["poolId" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200PoolId obj] : ["poolNmae" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200PoolNmae obj] : ["share" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200Share obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200UpdateTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapLiquidityResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapLiquidityResponseBody200" (\obj -> ((((GHC.Base.pure GetSapiV1BswapLiquidityResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "liquidity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolNmae")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "share")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updateTime"))

-- | Create a new 'GetSapiV1BswapLiquidityResponseBody200' with all required fields.
mkGetSapiV1BswapLiquidityResponseBody200 ::
  -- | 'getSapiV1BswapLiquidityResponseBody200Liquidity'
  GetSapiV1BswapLiquidityResponseBody200Liquidity ->
  -- | 'getSapiV1BswapLiquidityResponseBody200PoolId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapLiquidityResponseBody200PoolNmae'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapLiquidityResponseBody200Share'
  GetSapiV1BswapLiquidityResponseBody200Share ->
  -- | 'getSapiV1BswapLiquidityResponseBody200UpdateTime'
  GHC.Int.Int64 ->
  GetSapiV1BswapLiquidityResponseBody200
mkGetSapiV1BswapLiquidityResponseBody200 getSapiV1BswapLiquidityResponseBody200Liquidity getSapiV1BswapLiquidityResponseBody200PoolId getSapiV1BswapLiquidityResponseBody200PoolNmae getSapiV1BswapLiquidityResponseBody200Share getSapiV1BswapLiquidityResponseBody200UpdateTime =
  GetSapiV1BswapLiquidityResponseBody200
    { getSapiV1BswapLiquidityResponseBody200Liquidity = getSapiV1BswapLiquidityResponseBody200Liquidity,
      getSapiV1BswapLiquidityResponseBody200PoolId = getSapiV1BswapLiquidityResponseBody200PoolId,
      getSapiV1BswapLiquidityResponseBody200PoolNmae = getSapiV1BswapLiquidityResponseBody200PoolNmae,
      getSapiV1BswapLiquidityResponseBody200Share = getSapiV1BswapLiquidityResponseBody200Share,
      getSapiV1BswapLiquidityResponseBody200UpdateTime = getSapiV1BswapLiquidityResponseBody200UpdateTime
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidity.GET.responses.200.content.application\/json.schema.items.properties.liquidity@ in the specification.
data GetSapiV1BswapLiquidityResponseBody200Liquidity = GetSapiV1BswapLiquidityResponseBody200Liquidity
  { -- | BUSD
    getSapiV1BswapLiquidityResponseBody200LiquidityBUSD :: GHC.Types.Double,
    -- | USDT
    getSapiV1BswapLiquidityResponseBody200LiquidityUSDT :: GHC.Types.Double
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapLiquidityResponseBody200Liquidity where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200LiquidityBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200LiquidityUSDT obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200LiquidityBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200LiquidityUSDT obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapLiquidityResponseBody200Liquidity where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapLiquidityResponseBody200Liquidity" (\obj -> (GHC.Base.pure GetSapiV1BswapLiquidityResponseBody200Liquidity GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "BUSD")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "USDT"))

-- | Create a new 'GetSapiV1BswapLiquidityResponseBody200Liquidity' with all required fields.
mkGetSapiV1BswapLiquidityResponseBody200Liquidity ::
  -- | 'getSapiV1BswapLiquidityResponseBody200LiquidityBUSD'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapLiquidityResponseBody200LiquidityUSDT'
  GHC.Types.Double ->
  GetSapiV1BswapLiquidityResponseBody200Liquidity
mkGetSapiV1BswapLiquidityResponseBody200Liquidity getSapiV1BswapLiquidityResponseBody200LiquidityBUSD getSapiV1BswapLiquidityResponseBody200LiquidityUSDT =
  GetSapiV1BswapLiquidityResponseBody200Liquidity
    { getSapiV1BswapLiquidityResponseBody200LiquidityBUSD = getSapiV1BswapLiquidityResponseBody200LiquidityBUSD,
      getSapiV1BswapLiquidityResponseBody200LiquidityUSDT = getSapiV1BswapLiquidityResponseBody200LiquidityUSDT
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidity.GET.responses.200.content.application\/json.schema.items.properties.share@ in the specification.
data GetSapiV1BswapLiquidityResponseBody200Share = GetSapiV1BswapLiquidityResponseBody200Share
  { -- | asset
    getSapiV1BswapLiquidityResponseBody200ShareAsset :: GetSapiV1BswapLiquidityResponseBody200ShareAsset,
    -- | shareAmount
    getSapiV1BswapLiquidityResponseBody200ShareShareAmount :: GHC.Types.Double,
    -- | sharePercentage
    getSapiV1BswapLiquidityResponseBody200ShareSharePercentage :: GHC.Types.Double
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapLiquidityResponseBody200Share where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareAsset obj] : ["shareAmount" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareShareAmount obj] : ["sharePercentage" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareSharePercentage obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["asset" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareAsset obj] : ["shareAmount" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareShareAmount obj] : ["sharePercentage" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareSharePercentage obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapLiquidityResponseBody200Share where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapLiquidityResponseBody200Share" (\obj -> ((GHC.Base.pure GetSapiV1BswapLiquidityResponseBody200Share GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "shareAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sharePercentage"))

-- | Create a new 'GetSapiV1BswapLiquidityResponseBody200Share' with all required fields.
mkGetSapiV1BswapLiquidityResponseBody200Share ::
  -- | 'getSapiV1BswapLiquidityResponseBody200ShareAsset'
  GetSapiV1BswapLiquidityResponseBody200ShareAsset ->
  -- | 'getSapiV1BswapLiquidityResponseBody200ShareShareAmount'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapLiquidityResponseBody200ShareSharePercentage'
  GHC.Types.Double ->
  GetSapiV1BswapLiquidityResponseBody200Share
mkGetSapiV1BswapLiquidityResponseBody200Share getSapiV1BswapLiquidityResponseBody200ShareAsset getSapiV1BswapLiquidityResponseBody200ShareShareAmount getSapiV1BswapLiquidityResponseBody200ShareSharePercentage =
  GetSapiV1BswapLiquidityResponseBody200Share
    { getSapiV1BswapLiquidityResponseBody200ShareAsset = getSapiV1BswapLiquidityResponseBody200ShareAsset,
      getSapiV1BswapLiquidityResponseBody200ShareShareAmount = getSapiV1BswapLiquidityResponseBody200ShareShareAmount,
      getSapiV1BswapLiquidityResponseBody200ShareSharePercentage = getSapiV1BswapLiquidityResponseBody200ShareSharePercentage
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidity.GET.responses.200.content.application\/json.schema.items.properties.share.properties.asset@ in the specification.
data GetSapiV1BswapLiquidityResponseBody200ShareAsset = GetSapiV1BswapLiquidityResponseBody200ShareAsset
  { -- | BUSD
    getSapiV1BswapLiquidityResponseBody200ShareAssetBUSD :: GHC.Types.Double,
    -- | USDT
    getSapiV1BswapLiquidityResponseBody200ShareAssetUSDT :: GHC.Types.Double
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapLiquidityResponseBody200ShareAsset where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareAssetBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareAssetUSDT obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareAssetBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapLiquidityResponseBody200ShareAssetUSDT obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapLiquidityResponseBody200ShareAsset where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapLiquidityResponseBody200ShareAsset" (\obj -> (GHC.Base.pure GetSapiV1BswapLiquidityResponseBody200ShareAsset GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "BUSD")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "USDT"))

-- | Create a new 'GetSapiV1BswapLiquidityResponseBody200ShareAsset' with all required fields.
mkGetSapiV1BswapLiquidityResponseBody200ShareAsset ::
  -- | 'getSapiV1BswapLiquidityResponseBody200ShareAssetBUSD'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapLiquidityResponseBody200ShareAssetUSDT'
  GHC.Types.Double ->
  GetSapiV1BswapLiquidityResponseBody200ShareAsset
mkGetSapiV1BswapLiquidityResponseBody200ShareAsset getSapiV1BswapLiquidityResponseBody200ShareAssetBUSD getSapiV1BswapLiquidityResponseBody200ShareAssetUSDT =
  GetSapiV1BswapLiquidityResponseBody200ShareAsset
    { getSapiV1BswapLiquidityResponseBody200ShareAssetBUSD = getSapiV1BswapLiquidityResponseBody200ShareAssetBUSD,
      getSapiV1BswapLiquidityResponseBody200ShareAssetUSDT = getSapiV1BswapLiquidityResponseBody200ShareAssetUSDT
    }

-- | > GET /sapi/v1/bswap/liquidity
--
-- The same as 'getSapiV1BswapLiquidity' but accepts an explicit configuration.
getSapiV1BswapLiquidityWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapLiquidityParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BswapLiquidityResponse)
getSapiV1BswapLiquidityWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BswapLiquidityResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapLiquidityResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1BswapLiquidityResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapLiquidityResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapLiquidityResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/liquidity")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/bswap/liquidity
--
-- The same as 'getSapiV1BswapLiquidity' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapLiquidityRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapLiquidityParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapLiquidityRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/liquidity")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/bswap/liquidity
--
-- The same as 'getSapiV1BswapLiquidity' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapLiquidityWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapLiquidityParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapLiquidityWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/liquidity")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityParametersQueryPoolId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapLiquidityParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapLiquidityParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
