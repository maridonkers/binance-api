{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BlvtSubscribeRecord
module Binance.Operations.GetSapiV1BlvtSubscribeRecord where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/blvt/subscribe/record
--
-- - Only the data of the latest 90 days is available
--
-- Weight(IP): 1
getSapiV1BlvtSubscribeRecord ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BlvtSubscribeRecordParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BlvtSubscribeRecordResponse)
getSapiV1BlvtSubscribeRecord parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BlvtSubscribeRecordResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BlvtSubscribeRecordResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1BlvtSubscribeRecordResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BlvtSubscribeRecordResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BlvtSubscribeRecordResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/blvt/subscribe/record")
        [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryTokenName parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "id") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BlvtSubscribeRecordParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BlvtSubscribeRecordParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/blvt\/subscribe\/record.GET.parameters@ in the specification.
data GetSapiV1BlvtSubscribeRecordParameters = GetSapiV1BlvtSubscribeRecordParameters
  { -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1BlvtSubscribeRecordParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryId: Represents the parameter named \'id\'
    getSapiV1BlvtSubscribeRecordParametersQueryId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- Default 500; max 1000.
    getSapiV1BlvtSubscribeRecordParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1BlvtSubscribeRecordParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1BlvtSubscribeRecordParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1BlvtSubscribeRecordParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1BlvtSubscribeRecordParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryTokenName: Represents the parameter named \'tokenName\'
    --
    -- BTCDOWN, BTCUP
    getSapiV1BlvtSubscribeRecordParametersQueryTokenName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BlvtSubscribeRecordParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTokenName" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryTokenName obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTokenName" Data.Aeson.Types.ToJSON..=)) (getSapiV1BlvtSubscribeRecordParametersQueryTokenName obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BlvtSubscribeRecordParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BlvtSubscribeRecordParameters" (\obj -> (((((((GHC.Base.pure GetSapiV1BlvtSubscribeRecordParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTokenName"))

-- | Create a new 'GetSapiV1BlvtSubscribeRecordParameters' with all required fields.
mkGetSapiV1BlvtSubscribeRecordParameters ::
  -- | 'getSapiV1BlvtSubscribeRecordParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtSubscribeRecordParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1BlvtSubscribeRecordParameters
mkGetSapiV1BlvtSubscribeRecordParameters getSapiV1BlvtSubscribeRecordParametersQuerySignature getSapiV1BlvtSubscribeRecordParametersQueryTimestamp =
  GetSapiV1BlvtSubscribeRecordParameters
    { getSapiV1BlvtSubscribeRecordParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1BlvtSubscribeRecordParametersQueryId = GHC.Maybe.Nothing,
      getSapiV1BlvtSubscribeRecordParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1BlvtSubscribeRecordParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1BlvtSubscribeRecordParametersQuerySignature = getSapiV1BlvtSubscribeRecordParametersQuerySignature,
      getSapiV1BlvtSubscribeRecordParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1BlvtSubscribeRecordParametersQueryTimestamp = getSapiV1BlvtSubscribeRecordParametersQueryTimestamp,
      getSapiV1BlvtSubscribeRecordParametersQueryTokenName = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getSapiV1BlvtSubscribeRecord'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BlvtSubscribeRecordResponseError' is used.
data GetSapiV1BlvtSubscribeRecordResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BlvtSubscribeRecordResponseError GHC.Base.String
  | -- | List of subscription record
    GetSapiV1BlvtSubscribeRecordResponse200 GetSapiV1BlvtSubscribeRecordResponseBody200
  | -- | Bad Request
    GetSapiV1BlvtSubscribeRecordResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1BlvtSubscribeRecordResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/blvt\/subscribe\/record.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1BlvtSubscribeRecordResponseBody200 = GetSapiV1BlvtSubscribeRecordResponseBody200
  { -- | amount: Subscription amount
    getSapiV1BlvtSubscribeRecordResponseBody200Amount :: Data.Text.Internal.Text,
    -- | fee: Subscription fee in usdt
    getSapiV1BlvtSubscribeRecordResponseBody200Fee :: Data.Text.Internal.Text,
    -- | id
    getSapiV1BlvtSubscribeRecordResponseBody200Id :: GHC.Types.Double,
    -- | nav: NAV price of subscription
    getSapiV1BlvtSubscribeRecordResponseBody200Nav :: Data.Text.Internal.Text,
    -- | timestamp
    getSapiV1BlvtSubscribeRecordResponseBody200Timestamp :: GHC.Int.Int64,
    -- | tokenName
    getSapiV1BlvtSubscribeRecordResponseBody200TokenName :: Data.Text.Internal.Text,
    -- | totalCharge: Subscription cost in usdt
    getSapiV1BlvtSubscribeRecordResponseBody200TotalCharge :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BlvtSubscribeRecordResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Amount obj] : ["fee" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Fee obj] : ["id" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Id obj] : ["nav" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Nav obj] : ["timestamp" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Timestamp obj] : ["tokenName" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200TokenName obj] : ["totalCharge" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200TotalCharge obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Amount obj] : ["fee" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Fee obj] : ["id" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Id obj] : ["nav" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Nav obj] : ["timestamp" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200Timestamp obj] : ["tokenName" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200TokenName obj] : ["totalCharge" Data.Aeson.Types.ToJSON..= getSapiV1BlvtSubscribeRecordResponseBody200TotalCharge obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BlvtSubscribeRecordResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BlvtSubscribeRecordResponseBody200" (\obj -> ((((((GHC.Base.pure GetSapiV1BlvtSubscribeRecordResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "nav")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tokenName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalCharge"))

-- | Create a new 'GetSapiV1BlvtSubscribeRecordResponseBody200' with all required fields.
mkGetSapiV1BlvtSubscribeRecordResponseBody200 ::
  -- | 'getSapiV1BlvtSubscribeRecordResponseBody200Amount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtSubscribeRecordResponseBody200Fee'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtSubscribeRecordResponseBody200Id'
  GHC.Types.Double ->
  -- | 'getSapiV1BlvtSubscribeRecordResponseBody200Nav'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtSubscribeRecordResponseBody200Timestamp'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BlvtSubscribeRecordResponseBody200TokenName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BlvtSubscribeRecordResponseBody200TotalCharge'
  Data.Text.Internal.Text ->
  GetSapiV1BlvtSubscribeRecordResponseBody200
mkGetSapiV1BlvtSubscribeRecordResponseBody200 getSapiV1BlvtSubscribeRecordResponseBody200Amount getSapiV1BlvtSubscribeRecordResponseBody200Fee getSapiV1BlvtSubscribeRecordResponseBody200Id getSapiV1BlvtSubscribeRecordResponseBody200Nav getSapiV1BlvtSubscribeRecordResponseBody200Timestamp getSapiV1BlvtSubscribeRecordResponseBody200TokenName getSapiV1BlvtSubscribeRecordResponseBody200TotalCharge =
  GetSapiV1BlvtSubscribeRecordResponseBody200
    { getSapiV1BlvtSubscribeRecordResponseBody200Amount = getSapiV1BlvtSubscribeRecordResponseBody200Amount,
      getSapiV1BlvtSubscribeRecordResponseBody200Fee = getSapiV1BlvtSubscribeRecordResponseBody200Fee,
      getSapiV1BlvtSubscribeRecordResponseBody200Id = getSapiV1BlvtSubscribeRecordResponseBody200Id,
      getSapiV1BlvtSubscribeRecordResponseBody200Nav = getSapiV1BlvtSubscribeRecordResponseBody200Nav,
      getSapiV1BlvtSubscribeRecordResponseBody200Timestamp = getSapiV1BlvtSubscribeRecordResponseBody200Timestamp,
      getSapiV1BlvtSubscribeRecordResponseBody200TokenName = getSapiV1BlvtSubscribeRecordResponseBody200TokenName,
      getSapiV1BlvtSubscribeRecordResponseBody200TotalCharge = getSapiV1BlvtSubscribeRecordResponseBody200TotalCharge
    }

-- | > GET /sapi/v1/blvt/subscribe/record
--
-- The same as 'getSapiV1BlvtSubscribeRecord' but accepts an explicit configuration.
getSapiV1BlvtSubscribeRecordWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BlvtSubscribeRecordParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BlvtSubscribeRecordResponse)
getSapiV1BlvtSubscribeRecordWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BlvtSubscribeRecordResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BlvtSubscribeRecordResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1BlvtSubscribeRecordResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BlvtSubscribeRecordResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BlvtSubscribeRecordResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/blvt/subscribe/record")
          [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryTokenName parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "id") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BlvtSubscribeRecordParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BlvtSubscribeRecordParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/blvt/subscribe/record
--
-- The same as 'getSapiV1BlvtSubscribeRecord' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BlvtSubscribeRecordRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BlvtSubscribeRecordParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BlvtSubscribeRecordRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/blvt/subscribe/record")
        [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryTokenName parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "id") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BlvtSubscribeRecordParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BlvtSubscribeRecordParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/blvt/subscribe/record
--
-- The same as 'getSapiV1BlvtSubscribeRecord' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BlvtSubscribeRecordWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BlvtSubscribeRecordParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BlvtSubscribeRecordWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/blvt/subscribe/record")
          [ Binance.Common.QueryParameter (Data.Text.pack "tokenName") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryTokenName parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "id") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BlvtSubscribeRecordParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BlvtSubscribeRecordParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BlvtSubscribeRecordParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
