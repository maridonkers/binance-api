{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1AssetDust
module Binance.Operations.PostSapiV1AssetDust where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/asset/dust
--
-- Convert dust assets to BNB.
--
-- Weight(UID): 10
postSapiV1AssetDust ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetDustParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1AssetDustResponse)
postSapiV1AssetDust parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1AssetDustResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetDustResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1AssetDustResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetDustResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1AssetDustResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/asset/dust")
        [ Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetDustParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/dust.POST.parameters@ in the specification.
data PostSapiV1AssetDustParameters = PostSapiV1AssetDustParameters
  { -- | queryAsset: Represents the parameter named \'asset\'
    --
    -- The asset being converted. For example, asset=BTC&asset=USDT
    postSapiV1AssetDustParametersQueryAsset :: ([Data.Text.Internal.Text]),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1AssetDustParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1AssetDustParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1AssetDustParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetDustParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustParametersQueryAsset obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetDustParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustParametersQueryAsset obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1AssetDustParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetDustParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetDustParameters" (\obj -> (((GHC.Base.pure PostSapiV1AssetDustParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1AssetDustParameters' with all required fields.
mkPostSapiV1AssetDustParameters ::
  -- | 'postSapiV1AssetDustParametersQueryAsset'
  [Data.Text.Internal.Text] ->
  -- | 'postSapiV1AssetDustParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1AssetDustParameters
mkPostSapiV1AssetDustParameters postSapiV1AssetDustParametersQueryAsset postSapiV1AssetDustParametersQuerySignature postSapiV1AssetDustParametersQueryTimestamp =
  PostSapiV1AssetDustParameters
    { postSapiV1AssetDustParametersQueryAsset = postSapiV1AssetDustParametersQueryAsset,
      postSapiV1AssetDustParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1AssetDustParametersQuerySignature = postSapiV1AssetDustParametersQuerySignature,
      postSapiV1AssetDustParametersQueryTimestamp = postSapiV1AssetDustParametersQueryTimestamp
    }

-- | Represents a response of the operation 'postSapiV1AssetDust'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1AssetDustResponseError' is used.
data PostSapiV1AssetDustResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1AssetDustResponseError GHC.Base.String
  | -- | Dust log records
    PostSapiV1AssetDustResponse200 PostSapiV1AssetDustResponseBody200
  | -- | Bad Request
    PostSapiV1AssetDustResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1AssetDustResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/dust.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1AssetDustResponseBody200 = PostSapiV1AssetDustResponseBody200
  { -- | totalServiceCharge
    postSapiV1AssetDustResponseBody200TotalServiceCharge :: Data.Text.Internal.Text,
    -- | totalTransfered
    postSapiV1AssetDustResponseBody200TotalTransfered :: Data.Text.Internal.Text,
    -- | transferResult
    postSapiV1AssetDustResponseBody200TransferResult :: ([PostSapiV1AssetDustResponseBody200TransferResult])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetDustResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["totalServiceCharge" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TotalServiceCharge obj] : ["totalTransfered" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TotalTransfered obj] : ["transferResult" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResult obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["totalServiceCharge" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TotalServiceCharge obj] : ["totalTransfered" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TotalTransfered obj] : ["transferResult" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResult obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetDustResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetDustResponseBody200" (\obj -> ((GHC.Base.pure PostSapiV1AssetDustResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalServiceCharge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalTransfered")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transferResult"))

-- | Create a new 'PostSapiV1AssetDustResponseBody200' with all required fields.
mkPostSapiV1AssetDustResponseBody200 ::
  -- | 'postSapiV1AssetDustResponseBody200TotalServiceCharge'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustResponseBody200TotalTransfered'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustResponseBody200TransferResult'
  [PostSapiV1AssetDustResponseBody200TransferResult] ->
  PostSapiV1AssetDustResponseBody200
mkPostSapiV1AssetDustResponseBody200 postSapiV1AssetDustResponseBody200TotalServiceCharge postSapiV1AssetDustResponseBody200TotalTransfered postSapiV1AssetDustResponseBody200TransferResult =
  PostSapiV1AssetDustResponseBody200
    { postSapiV1AssetDustResponseBody200TotalServiceCharge = postSapiV1AssetDustResponseBody200TotalServiceCharge,
      postSapiV1AssetDustResponseBody200TotalTransfered = postSapiV1AssetDustResponseBody200TotalTransfered,
      postSapiV1AssetDustResponseBody200TransferResult = postSapiV1AssetDustResponseBody200TransferResult
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/asset\/dust.POST.responses.200.content.application\/json.schema.properties.transferResult.items@ in the specification.
data PostSapiV1AssetDustResponseBody200TransferResult = PostSapiV1AssetDustResponseBody200TransferResult
  { -- | amount
    postSapiV1AssetDustResponseBody200TransferResultAmount :: Data.Text.Internal.Text,
    -- | fromAsset
    postSapiV1AssetDustResponseBody200TransferResultFromAsset :: Data.Text.Internal.Text,
    -- | operateTime
    postSapiV1AssetDustResponseBody200TransferResultOperateTime :: GHC.Int.Int64,
    -- | serviceChargeAmount
    postSapiV1AssetDustResponseBody200TransferResultServiceChargeAmount :: Data.Text.Internal.Text,
    -- | tranId
    postSapiV1AssetDustResponseBody200TransferResultTranId :: GHC.Int.Int64,
    -- | transferedAmount
    postSapiV1AssetDustResponseBody200TransferResultTransferedAmount :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1AssetDustResponseBody200TransferResult where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultAmount obj] : ["fromAsset" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultFromAsset obj] : ["operateTime" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultOperateTime obj] : ["serviceChargeAmount" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultServiceChargeAmount obj] : ["tranId" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultTranId obj] : ["transferedAmount" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultTransferedAmount obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultAmount obj] : ["fromAsset" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultFromAsset obj] : ["operateTime" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultOperateTime obj] : ["serviceChargeAmount" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultServiceChargeAmount obj] : ["tranId" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultTranId obj] : ["transferedAmount" Data.Aeson.Types.ToJSON..= postSapiV1AssetDustResponseBody200TransferResultTransferedAmount obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1AssetDustResponseBody200TransferResult where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1AssetDustResponseBody200TransferResult" (\obj -> (((((GHC.Base.pure PostSapiV1AssetDustResponseBody200TransferResult GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fromAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "operateTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "serviceChargeAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tranId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transferedAmount"))

-- | Create a new 'PostSapiV1AssetDustResponseBody200TransferResult' with all required fields.
mkPostSapiV1AssetDustResponseBody200TransferResult ::
  -- | 'postSapiV1AssetDustResponseBody200TransferResultAmount'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustResponseBody200TransferResultFromAsset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustResponseBody200TransferResultOperateTime'
  GHC.Int.Int64 ->
  -- | 'postSapiV1AssetDustResponseBody200TransferResultServiceChargeAmount'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1AssetDustResponseBody200TransferResultTranId'
  GHC.Int.Int64 ->
  -- | 'postSapiV1AssetDustResponseBody200TransferResultTransferedAmount'
  Data.Text.Internal.Text ->
  PostSapiV1AssetDustResponseBody200TransferResult
mkPostSapiV1AssetDustResponseBody200TransferResult postSapiV1AssetDustResponseBody200TransferResultAmount postSapiV1AssetDustResponseBody200TransferResultFromAsset postSapiV1AssetDustResponseBody200TransferResultOperateTime postSapiV1AssetDustResponseBody200TransferResultServiceChargeAmount postSapiV1AssetDustResponseBody200TransferResultTranId postSapiV1AssetDustResponseBody200TransferResultTransferedAmount =
  PostSapiV1AssetDustResponseBody200TransferResult
    { postSapiV1AssetDustResponseBody200TransferResultAmount = postSapiV1AssetDustResponseBody200TransferResultAmount,
      postSapiV1AssetDustResponseBody200TransferResultFromAsset = postSapiV1AssetDustResponseBody200TransferResultFromAsset,
      postSapiV1AssetDustResponseBody200TransferResultOperateTime = postSapiV1AssetDustResponseBody200TransferResultOperateTime,
      postSapiV1AssetDustResponseBody200TransferResultServiceChargeAmount = postSapiV1AssetDustResponseBody200TransferResultServiceChargeAmount,
      postSapiV1AssetDustResponseBody200TransferResultTranId = postSapiV1AssetDustResponseBody200TransferResultTranId,
      postSapiV1AssetDustResponseBody200TransferResultTransferedAmount = postSapiV1AssetDustResponseBody200TransferResultTransferedAmount
    }

-- | > POST /sapi/v1/asset/dust
--
-- The same as 'postSapiV1AssetDust' but accepts an explicit configuration.
postSapiV1AssetDustWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetDustParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1AssetDustResponse)
postSapiV1AssetDustWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1AssetDustResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetDustResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1AssetDustResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetDustResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1AssetDustResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/asset/dust")
          [ Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetDustParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/asset/dust
--
-- The same as 'postSapiV1AssetDust' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AssetDustRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetDustParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AssetDustRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/asset/dust")
        [ Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetDustParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/asset/dust
--
-- The same as 'postSapiV1AssetDust' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1AssetDustWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1AssetDustParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1AssetDustWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/asset/dust")
          [ Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1AssetDustParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1AssetDustParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
