{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BswapQuote
module Binance.Operations.GetSapiV1BswapQuote where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/bswap/quote
--
-- Request a quote for swap quote asset (selling asset) for base asset (buying asset), essentially price\/exchange rates.
--
-- quoteQty is quantity of quote asset (to sell).
--
-- Please be noted the quote is for reference only, the actual price will change as the liquidity changes, it\'s recommended to swap immediate after request a quote for slippage prevention.
--
-- Weight(UID): 150
getSapiV1BswapQuote ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapQuoteParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BswapQuoteResponse)
getSapiV1BswapQuote parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BswapQuoteResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapQuoteResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1BswapQuoteResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapQuoteResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapQuoteResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/quote")
        [ Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryBaseAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapQuoteParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/quote.GET.parameters@ in the specification.
data GetSapiV1BswapQuoteParameters = GetSapiV1BswapQuoteParameters
  { -- | queryBaseAsset: Represents the parameter named \'baseAsset\'
    getSapiV1BswapQuoteParametersQueryBaseAsset :: Data.Text.Internal.Text,
    -- | queryQuoteAsset: Represents the parameter named \'quoteAsset\'
    getSapiV1BswapQuoteParametersQueryQuoteAsset :: Data.Text.Internal.Text,
    -- | queryQuoteQty: Represents the parameter named \'quoteQty\'
    getSapiV1BswapQuoteParametersQueryQuoteQty :: GHC.Types.Double,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1BswapQuoteParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1BswapQuoteParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapQuoteParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapQuoteParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryBaseAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQueryBaseAsset obj] : ["queryQuoteAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQueryQuoteAsset obj] : ["queryQuoteQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQueryQuoteQty obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapQuoteParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryBaseAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQueryBaseAsset obj] : ["queryQuoteAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQueryQuoteAsset obj] : ["queryQuoteQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQueryQuoteQty obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapQuoteParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapQuoteParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapQuoteParameters" (\obj -> (((((GHC.Base.pure GetSapiV1BswapQuoteParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryBaseAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuoteAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1BswapQuoteParameters' with all required fields.
mkGetSapiV1BswapQuoteParameters ::
  -- | 'getSapiV1BswapQuoteParametersQueryBaseAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapQuoteParametersQueryQuoteAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapQuoteParametersQueryQuoteQty'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapQuoteParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapQuoteParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1BswapQuoteParameters
mkGetSapiV1BswapQuoteParameters getSapiV1BswapQuoteParametersQueryBaseAsset getSapiV1BswapQuoteParametersQueryQuoteAsset getSapiV1BswapQuoteParametersQueryQuoteQty getSapiV1BswapQuoteParametersQuerySignature getSapiV1BswapQuoteParametersQueryTimestamp =
  GetSapiV1BswapQuoteParameters
    { getSapiV1BswapQuoteParametersQueryBaseAsset = getSapiV1BswapQuoteParametersQueryBaseAsset,
      getSapiV1BswapQuoteParametersQueryQuoteAsset = getSapiV1BswapQuoteParametersQueryQuoteAsset,
      getSapiV1BswapQuoteParametersQueryQuoteQty = getSapiV1BswapQuoteParametersQueryQuoteQty,
      getSapiV1BswapQuoteParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1BswapQuoteParametersQuerySignature = getSapiV1BswapQuoteParametersQuerySignature,
      getSapiV1BswapQuoteParametersQueryTimestamp = getSapiV1BswapQuoteParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1BswapQuote'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BswapQuoteResponseError' is used.
data GetSapiV1BswapQuoteResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BswapQuoteResponseError GHC.Base.String
  | -- | Quote Info
    GetSapiV1BswapQuoteResponse200 GetSapiV1BswapQuoteResponseBody200
  | -- | Bad Request
    GetSapiV1BswapQuoteResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1BswapQuoteResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/quote.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1BswapQuoteResponseBody200 = GetSapiV1BswapQuoteResponseBody200
  { -- | baseAsset
    getSapiV1BswapQuoteResponseBody200BaseAsset :: Data.Text.Internal.Text,
    -- | baseQty
    getSapiV1BswapQuoteResponseBody200BaseQty :: GHC.Types.Double,
    -- | fee
    getSapiV1BswapQuoteResponseBody200Fee :: GHC.Types.Double,
    -- | price
    getSapiV1BswapQuoteResponseBody200Price :: GHC.Types.Double,
    -- | quoteAsset
    getSapiV1BswapQuoteResponseBody200QuoteAsset :: Data.Text.Internal.Text,
    -- | quoteQty
    getSapiV1BswapQuoteResponseBody200QuoteQty :: GHC.Types.Double,
    -- | slippage
    getSapiV1BswapQuoteResponseBody200Slippage :: GHC.Types.Double
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapQuoteResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["baseAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200BaseAsset obj] : ["baseQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200BaseQty obj] : ["fee" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200Fee obj] : ["price" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200Price obj] : ["quoteAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200QuoteAsset obj] : ["quoteQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200QuoteQty obj] : ["slippage" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200Slippage obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["baseAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200BaseAsset obj] : ["baseQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200BaseQty obj] : ["fee" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200Fee obj] : ["price" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200Price obj] : ["quoteAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200QuoteAsset obj] : ["quoteQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200QuoteQty obj] : ["slippage" Data.Aeson.Types.ToJSON..= getSapiV1BswapQuoteResponseBody200Slippage obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapQuoteResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapQuoteResponseBody200" (\obj -> ((((((GHC.Base.pure GetSapiV1BswapQuoteResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "baseAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "baseQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slippage"))

-- | Create a new 'GetSapiV1BswapQuoteResponseBody200' with all required fields.
mkGetSapiV1BswapQuoteResponseBody200 ::
  -- | 'getSapiV1BswapQuoteResponseBody200BaseAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapQuoteResponseBody200BaseQty'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapQuoteResponseBody200Fee'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapQuoteResponseBody200Price'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapQuoteResponseBody200QuoteAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapQuoteResponseBody200QuoteQty'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapQuoteResponseBody200Slippage'
  GHC.Types.Double ->
  GetSapiV1BswapQuoteResponseBody200
mkGetSapiV1BswapQuoteResponseBody200 getSapiV1BswapQuoteResponseBody200BaseAsset getSapiV1BswapQuoteResponseBody200BaseQty getSapiV1BswapQuoteResponseBody200Fee getSapiV1BswapQuoteResponseBody200Price getSapiV1BswapQuoteResponseBody200QuoteAsset getSapiV1BswapQuoteResponseBody200QuoteQty getSapiV1BswapQuoteResponseBody200Slippage =
  GetSapiV1BswapQuoteResponseBody200
    { getSapiV1BswapQuoteResponseBody200BaseAsset = getSapiV1BswapQuoteResponseBody200BaseAsset,
      getSapiV1BswapQuoteResponseBody200BaseQty = getSapiV1BswapQuoteResponseBody200BaseQty,
      getSapiV1BswapQuoteResponseBody200Fee = getSapiV1BswapQuoteResponseBody200Fee,
      getSapiV1BswapQuoteResponseBody200Price = getSapiV1BswapQuoteResponseBody200Price,
      getSapiV1BswapQuoteResponseBody200QuoteAsset = getSapiV1BswapQuoteResponseBody200QuoteAsset,
      getSapiV1BswapQuoteResponseBody200QuoteQty = getSapiV1BswapQuoteResponseBody200QuoteQty,
      getSapiV1BswapQuoteResponseBody200Slippage = getSapiV1BswapQuoteResponseBody200Slippage
    }

-- | > GET /sapi/v1/bswap/quote
--
-- The same as 'getSapiV1BswapQuote' but accepts an explicit configuration.
getSapiV1BswapQuoteWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapQuoteParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BswapQuoteResponse)
getSapiV1BswapQuoteWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BswapQuoteResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapQuoteResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1BswapQuoteResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapQuoteResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapQuoteResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/quote")
          [ Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryBaseAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapQuoteParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/bswap/quote
--
-- The same as 'getSapiV1BswapQuote' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapQuoteRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapQuoteParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapQuoteRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/quote")
        [ Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryBaseAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapQuoteParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/bswap/quote
--
-- The same as 'getSapiV1BswapQuote' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapQuoteWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapQuoteParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapQuoteWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/quote")
          [ Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryQuoteAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryBaseAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteQty") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryQuoteQty parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapQuoteParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapQuoteParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
