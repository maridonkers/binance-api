{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1RebateTaxQuery
module Binance.Operations.GetSapiV1RebateTaxQuery where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/rebate/taxQuery
--
-- - The max interval between startTime and endTime is 90 days.
-- - If startTime and endTime are not sent, the recent 7 days\' data will be returned.
-- - The earliest startTime is supported on June 10, 2020
--
-- Weight(UID): 3000
getSapiV1RebateTaxQuery ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1RebateTaxQueryParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1RebateTaxQueryResponse)
getSapiV1RebateTaxQuery parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1RebateTaxQueryResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1RebateTaxQueryResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1RebateTaxQueryResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1RebateTaxQueryResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1RebateTaxQueryResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/rebate/taxQuery")
        [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1RebateTaxQueryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1RebateTaxQueryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/rebate\/taxQuery.GET.parameters@ in the specification.
data GetSapiV1RebateTaxQueryParameters = GetSapiV1RebateTaxQueryParameters
  { -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1RebateTaxQueryParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- default 1
    getSapiV1RebateTaxQueryParametersQueryPage :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1RebateTaxQueryParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1RebateTaxQueryParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1RebateTaxQueryParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1RebateTaxQueryParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1RebateTaxQueryParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1RebateTaxQueryParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1RebateTaxQueryParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1RebateTaxQueryParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1RebateTaxQueryParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1RebateTaxQueryParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1RebateTaxQueryParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1RebateTaxQueryParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1RebateTaxQueryParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1RebateTaxQueryParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1RebateTaxQueryParameters" (\obj -> (((((GHC.Base.pure GetSapiV1RebateTaxQueryParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1RebateTaxQueryParameters' with all required fields.
mkGetSapiV1RebateTaxQueryParameters ::
  -- | 'getSapiV1RebateTaxQueryParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1RebateTaxQueryParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1RebateTaxQueryParameters
mkGetSapiV1RebateTaxQueryParameters getSapiV1RebateTaxQueryParametersQuerySignature getSapiV1RebateTaxQueryParametersQueryTimestamp =
  GetSapiV1RebateTaxQueryParameters
    { getSapiV1RebateTaxQueryParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1RebateTaxQueryParametersQueryPage = GHC.Maybe.Nothing,
      getSapiV1RebateTaxQueryParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1RebateTaxQueryParametersQuerySignature = getSapiV1RebateTaxQueryParametersQuerySignature,
      getSapiV1RebateTaxQueryParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1RebateTaxQueryParametersQueryTimestamp = getSapiV1RebateTaxQueryParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1RebateTaxQuery'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1RebateTaxQueryResponseError' is used.
data GetSapiV1RebateTaxQueryResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1RebateTaxQueryResponseError GHC.Base.String
  | -- | Rebate History
    GetSapiV1RebateTaxQueryResponse200 GetSapiV1RebateTaxQueryResponseBody200
  | -- | Bad Request
    GetSapiV1RebateTaxQueryResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1RebateTaxQueryResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/rebate\/taxQuery.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1RebateTaxQueryResponseBody200 = GetSapiV1RebateTaxQueryResponseBody200
  { -- | code
    getSapiV1RebateTaxQueryResponseBody200Code :: Data.Text.Internal.Text,
    -- | data
    getSapiV1RebateTaxQueryResponseBody200Data :: GetSapiV1RebateTaxQueryResponseBody200Data,
    -- | status
    getSapiV1RebateTaxQueryResponseBody200Status :: Data.Text.Internal.Text,
    -- | type
    getSapiV1RebateTaxQueryResponseBody200Type :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1RebateTaxQueryResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200Data obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200Status obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200Type obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200Data obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200Status obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200Type obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1RebateTaxQueryResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1RebateTaxQueryResponseBody200" (\obj -> (((GHC.Base.pure GetSapiV1RebateTaxQueryResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'GetSapiV1RebateTaxQueryResponseBody200' with all required fields.
mkGetSapiV1RebateTaxQueryResponseBody200 ::
  -- | 'getSapiV1RebateTaxQueryResponseBody200Code'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1RebateTaxQueryResponseBody200Data'
  GetSapiV1RebateTaxQueryResponseBody200Data ->
  -- | 'getSapiV1RebateTaxQueryResponseBody200Status'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1RebateTaxQueryResponseBody200Type'
  Data.Text.Internal.Text ->
  GetSapiV1RebateTaxQueryResponseBody200
mkGetSapiV1RebateTaxQueryResponseBody200 getSapiV1RebateTaxQueryResponseBody200Code getSapiV1RebateTaxQueryResponseBody200Data getSapiV1RebateTaxQueryResponseBody200Status getSapiV1RebateTaxQueryResponseBody200Type =
  GetSapiV1RebateTaxQueryResponseBody200
    { getSapiV1RebateTaxQueryResponseBody200Code = getSapiV1RebateTaxQueryResponseBody200Code,
      getSapiV1RebateTaxQueryResponseBody200Data = getSapiV1RebateTaxQueryResponseBody200Data,
      getSapiV1RebateTaxQueryResponseBody200Status = getSapiV1RebateTaxQueryResponseBody200Status,
      getSapiV1RebateTaxQueryResponseBody200Type = getSapiV1RebateTaxQueryResponseBody200Type
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/rebate\/taxQuery.GET.responses.200.content.application\/json.schema.properties.data@ in the specification.
data GetSapiV1RebateTaxQueryResponseBody200Data = GetSapiV1RebateTaxQueryResponseBody200Data
  { -- | data
    getSapiV1RebateTaxQueryResponseBody200DataData :: ([GetSapiV1RebateTaxQueryResponseBody200DataData]),
    -- | page
    getSapiV1RebateTaxQueryResponseBody200DataPage :: GHC.Int.Int32,
    -- | totalPageNum
    getSapiV1RebateTaxQueryResponseBody200DataTotalPageNum :: GHC.Int.Int32,
    -- | totalRecords
    getSapiV1RebateTaxQueryResponseBody200DataTotalRecords :: GHC.Int.Int32
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1RebateTaxQueryResponseBody200Data where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataData obj] : ["page" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataPage obj] : ["totalPageNum" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataTotalPageNum obj] : ["totalRecords" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataTotalRecords obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataData obj] : ["page" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataPage obj] : ["totalPageNum" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataTotalPageNum obj] : ["totalRecords" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataTotalRecords obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1RebateTaxQueryResponseBody200Data where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1RebateTaxQueryResponseBody200Data" (\obj -> (((GHC.Base.pure GetSapiV1RebateTaxQueryResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalPageNum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalRecords"))

-- | Create a new 'GetSapiV1RebateTaxQueryResponseBody200Data' with all required fields.
mkGetSapiV1RebateTaxQueryResponseBody200Data ::
  -- | 'getSapiV1RebateTaxQueryResponseBody200DataData'
  [GetSapiV1RebateTaxQueryResponseBody200DataData] ->
  -- | 'getSapiV1RebateTaxQueryResponseBody200DataPage'
  GHC.Int.Int32 ->
  -- | 'getSapiV1RebateTaxQueryResponseBody200DataTotalPageNum'
  GHC.Int.Int32 ->
  -- | 'getSapiV1RebateTaxQueryResponseBody200DataTotalRecords'
  GHC.Int.Int32 ->
  GetSapiV1RebateTaxQueryResponseBody200Data
mkGetSapiV1RebateTaxQueryResponseBody200Data getSapiV1RebateTaxQueryResponseBody200DataData getSapiV1RebateTaxQueryResponseBody200DataPage getSapiV1RebateTaxQueryResponseBody200DataTotalPageNum getSapiV1RebateTaxQueryResponseBody200DataTotalRecords =
  GetSapiV1RebateTaxQueryResponseBody200Data
    { getSapiV1RebateTaxQueryResponseBody200DataData = getSapiV1RebateTaxQueryResponseBody200DataData,
      getSapiV1RebateTaxQueryResponseBody200DataPage = getSapiV1RebateTaxQueryResponseBody200DataPage,
      getSapiV1RebateTaxQueryResponseBody200DataTotalPageNum = getSapiV1RebateTaxQueryResponseBody200DataTotalPageNum,
      getSapiV1RebateTaxQueryResponseBody200DataTotalRecords = getSapiV1RebateTaxQueryResponseBody200DataTotalRecords
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/rebate\/taxQuery.GET.responses.200.content.application\/json.schema.properties.data.properties.data.items@ in the specification.
data GetSapiV1RebateTaxQueryResponseBody200DataData = GetSapiV1RebateTaxQueryResponseBody200DataData
  { -- | amount
    getSapiV1RebateTaxQueryResponseBody200DataDataAmount :: Data.Text.Internal.Text,
    -- | asset
    getSapiV1RebateTaxQueryResponseBody200DataDataAsset :: Data.Text.Internal.Text,
    -- | type: rebate type：1 is commission rebate，2 is referral kickback
    getSapiV1RebateTaxQueryResponseBody200DataDataType :: GHC.Int.Int32,
    -- | updateTime
    getSapiV1RebateTaxQueryResponseBody200DataDataUpdateTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1RebateTaxQueryResponseBody200DataData where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataDataAmount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataDataAsset obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataDataType obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataDataUpdateTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataDataAmount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataDataAsset obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataDataType obj] : ["updateTime" Data.Aeson.Types.ToJSON..= getSapiV1RebateTaxQueryResponseBody200DataDataUpdateTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1RebateTaxQueryResponseBody200DataData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1RebateTaxQueryResponseBody200DataData" (\obj -> (((GHC.Base.pure GetSapiV1RebateTaxQueryResponseBody200DataData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updateTime"))

-- | Create a new 'GetSapiV1RebateTaxQueryResponseBody200DataData' with all required fields.
mkGetSapiV1RebateTaxQueryResponseBody200DataData ::
  -- | 'getSapiV1RebateTaxQueryResponseBody200DataDataAmount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1RebateTaxQueryResponseBody200DataDataAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1RebateTaxQueryResponseBody200DataDataType'
  GHC.Int.Int32 ->
  -- | 'getSapiV1RebateTaxQueryResponseBody200DataDataUpdateTime'
  GHC.Int.Int64 ->
  GetSapiV1RebateTaxQueryResponseBody200DataData
mkGetSapiV1RebateTaxQueryResponseBody200DataData getSapiV1RebateTaxQueryResponseBody200DataDataAmount getSapiV1RebateTaxQueryResponseBody200DataDataAsset getSapiV1RebateTaxQueryResponseBody200DataDataType getSapiV1RebateTaxQueryResponseBody200DataDataUpdateTime =
  GetSapiV1RebateTaxQueryResponseBody200DataData
    { getSapiV1RebateTaxQueryResponseBody200DataDataAmount = getSapiV1RebateTaxQueryResponseBody200DataDataAmount,
      getSapiV1RebateTaxQueryResponseBody200DataDataAsset = getSapiV1RebateTaxQueryResponseBody200DataDataAsset,
      getSapiV1RebateTaxQueryResponseBody200DataDataType = getSapiV1RebateTaxQueryResponseBody200DataDataType,
      getSapiV1RebateTaxQueryResponseBody200DataDataUpdateTime = getSapiV1RebateTaxQueryResponseBody200DataDataUpdateTime
    }

-- | > GET /sapi/v1/rebate/taxQuery
--
-- The same as 'getSapiV1RebateTaxQuery' but accepts an explicit configuration.
getSapiV1RebateTaxQueryWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1RebateTaxQueryParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1RebateTaxQueryResponse)
getSapiV1RebateTaxQueryWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1RebateTaxQueryResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1RebateTaxQueryResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1RebateTaxQueryResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1RebateTaxQueryResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1RebateTaxQueryResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/rebate/taxQuery")
          [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1RebateTaxQueryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1RebateTaxQueryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/rebate/taxQuery
--
-- The same as 'getSapiV1RebateTaxQuery' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1RebateTaxQueryRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1RebateTaxQueryParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1RebateTaxQueryRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/rebate/taxQuery")
        [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1RebateTaxQueryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1RebateTaxQueryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/rebate/taxQuery
--
-- The same as 'getSapiV1RebateTaxQuery' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1RebateTaxQueryWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1RebateTaxQueryParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1RebateTaxQueryWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/rebate/taxQuery")
          [ Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1RebateTaxQueryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1RebateTaxQueryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1RebateTaxQueryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
