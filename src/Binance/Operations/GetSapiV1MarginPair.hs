{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MarginPair
module Binance.Operations.GetSapiV1MarginPair where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/margin/pair
--
-- Weight(IP): 10
getSapiV1MarginPair ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | symbol: Trading symbol, e.g. BNBUSDT
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MarginPairResponse)
getSapiV1MarginPair symbol =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginPairResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginPairResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1MarginPairResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginPairResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/pair") [Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbol) (Data.Text.pack "form") GHC.Types.False])

-- | Represents a response of the operation 'getSapiV1MarginPair'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MarginPairResponseError' is used.
data GetSapiV1MarginPairResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MarginPairResponseError GHC.Base.String
  | -- | Margin pair details
    GetSapiV1MarginPairResponse200 GetSapiV1MarginPairResponseBody200
  | -- | Bad Request
    GetSapiV1MarginPairResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/pair.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1MarginPairResponseBody200 = GetSapiV1MarginPairResponseBody200
  { -- | base
    getSapiV1MarginPairResponseBody200Base :: Data.Text.Internal.Text,
    -- | id
    getSapiV1MarginPairResponseBody200Id :: GHC.Int.Int64,
    -- | isBuyAllowed
    getSapiV1MarginPairResponseBody200IsBuyAllowed :: GHC.Types.Bool,
    -- | isMarginTrade
    getSapiV1MarginPairResponseBody200IsMarginTrade :: GHC.Types.Bool,
    -- | isSellAllowed
    getSapiV1MarginPairResponseBody200IsSellAllowed :: GHC.Types.Bool,
    -- | quote
    getSapiV1MarginPairResponseBody200Quote :: Data.Text.Internal.Text,
    -- | symbol
    getSapiV1MarginPairResponseBody200Symbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginPairResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["base" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200Base obj] : ["id" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200Id obj] : ["isBuyAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200IsBuyAllowed obj] : ["isMarginTrade" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200IsMarginTrade obj] : ["isSellAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200IsSellAllowed obj] : ["quote" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200Quote obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200Symbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["base" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200Base obj] : ["id" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200Id obj] : ["isBuyAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200IsBuyAllowed obj] : ["isMarginTrade" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200IsMarginTrade obj] : ["isSellAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200IsSellAllowed obj] : ["quote" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200Quote obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginPairResponseBody200Symbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginPairResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginPairResponseBody200" (\obj -> ((((((GHC.Base.pure GetSapiV1MarginPairResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "base")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBuyAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMarginTrade")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isSellAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quote")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'GetSapiV1MarginPairResponseBody200' with all required fields.
mkGetSapiV1MarginPairResponseBody200 ::
  -- | 'getSapiV1MarginPairResponseBody200Base'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginPairResponseBody200Id'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MarginPairResponseBody200IsBuyAllowed'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginPairResponseBody200IsMarginTrade'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginPairResponseBody200IsSellAllowed'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginPairResponseBody200Quote'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginPairResponseBody200Symbol'
  Data.Text.Internal.Text ->
  GetSapiV1MarginPairResponseBody200
mkGetSapiV1MarginPairResponseBody200 getSapiV1MarginPairResponseBody200Base getSapiV1MarginPairResponseBody200Id getSapiV1MarginPairResponseBody200IsBuyAllowed getSapiV1MarginPairResponseBody200IsMarginTrade getSapiV1MarginPairResponseBody200IsSellAllowed getSapiV1MarginPairResponseBody200Quote getSapiV1MarginPairResponseBody200Symbol =
  GetSapiV1MarginPairResponseBody200
    { getSapiV1MarginPairResponseBody200Base = getSapiV1MarginPairResponseBody200Base,
      getSapiV1MarginPairResponseBody200Id = getSapiV1MarginPairResponseBody200Id,
      getSapiV1MarginPairResponseBody200IsBuyAllowed = getSapiV1MarginPairResponseBody200IsBuyAllowed,
      getSapiV1MarginPairResponseBody200IsMarginTrade = getSapiV1MarginPairResponseBody200IsMarginTrade,
      getSapiV1MarginPairResponseBody200IsSellAllowed = getSapiV1MarginPairResponseBody200IsSellAllowed,
      getSapiV1MarginPairResponseBody200Quote = getSapiV1MarginPairResponseBody200Quote,
      getSapiV1MarginPairResponseBody200Symbol = getSapiV1MarginPairResponseBody200Symbol
    }

-- | > GET /sapi/v1/margin/pair
--
-- The same as 'getSapiV1MarginPair' but accepts an explicit configuration.
getSapiV1MarginPairWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | symbol: Trading symbol, e.g. BNBUSDT
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MarginPairResponse)
getSapiV1MarginPairWithConfiguration
  config
  symbol =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MarginPairResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginPairResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1MarginPairResponseBody200
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginPairResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/pair") [Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbol) (Data.Text.pack "form") GHC.Types.False])

-- | > GET /sapi/v1/margin/pair
--
-- The same as 'getSapiV1MarginPair' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginPairRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | symbol: Trading symbol, e.g. BNBUSDT
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginPairRaw symbol = GHC.Base.id (Binance.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/pair") [Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbol) (Data.Text.pack "form") GHC.Types.False])

-- | > GET /sapi/v1/margin/pair
--
-- The same as 'getSapiV1MarginPair' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginPairWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | symbol: Trading symbol, e.g. BNBUSDT
  Data.Text.Internal.Text ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginPairWithConfigurationRaw
  config
  symbol = GHC.Base.id (Binance.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/sapi/v1/margin/pair") [Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON symbol) (Data.Text.pack "form") GHC.Types.False])
