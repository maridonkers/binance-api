{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BswapUnclaimedRewards
module Binance.Operations.GetSapiV1BswapUnclaimedRewards where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/bswap/unclaimedRewards
--
-- Get unclaimed rewards record.
--
-- Weight(UID): 1000
getSapiV1BswapUnclaimedRewards ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapUnclaimedRewardsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BswapUnclaimedRewardsResponse)
getSapiV1BswapUnclaimedRewards parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BswapUnclaimedRewardsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapUnclaimedRewardsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1BswapUnclaimedRewardsResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapUnclaimedRewardsResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapUnclaimedRewardsResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/unclaimedRewards")
        [ Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapUnclaimedRewardsParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapUnclaimedRewardsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapUnclaimedRewardsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/unclaimedRewards.GET.parameters@ in the specification.
data GetSapiV1BswapUnclaimedRewardsParameters = GetSapiV1BswapUnclaimedRewardsParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1BswapUnclaimedRewardsParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1BswapUnclaimedRewardsParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryType: Represents the parameter named \'type\'
    --
    -- 0: Swap rewards, 1: Liquidity rewards, default to 0
    getSapiV1BswapUnclaimedRewardsParametersQueryType :: (GHC.Maybe.Maybe GHC.Int.Int32)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapUnclaimedRewardsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapUnclaimedRewardsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapUnclaimedRewardsParametersQueryType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapUnclaimedRewardsParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapUnclaimedRewardsParametersQueryType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapUnclaimedRewardsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapUnclaimedRewardsParameters" (\obj -> (((GHC.Base.pure GetSapiV1BswapUnclaimedRewardsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryType"))

-- | Create a new 'GetSapiV1BswapUnclaimedRewardsParameters' with all required fields.
mkGetSapiV1BswapUnclaimedRewardsParameters ::
  -- | 'getSapiV1BswapUnclaimedRewardsParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1BswapUnclaimedRewardsParameters
mkGetSapiV1BswapUnclaimedRewardsParameters getSapiV1BswapUnclaimedRewardsParametersQuerySignature getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp =
  GetSapiV1BswapUnclaimedRewardsParameters
    { getSapiV1BswapUnclaimedRewardsParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1BswapUnclaimedRewardsParametersQuerySignature = getSapiV1BswapUnclaimedRewardsParametersQuerySignature,
      getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp = getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp,
      getSapiV1BswapUnclaimedRewardsParametersQueryType = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getSapiV1BswapUnclaimedRewards'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BswapUnclaimedRewardsResponseError' is used.
data GetSapiV1BswapUnclaimedRewardsResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BswapUnclaimedRewardsResponseError GHC.Base.String
  | -- | Unclaimed rewards record
    GetSapiV1BswapUnclaimedRewardsResponse200 GetSapiV1BswapUnclaimedRewardsResponseBody200
  | -- | Bad Request
    GetSapiV1BswapUnclaimedRewardsResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1BswapUnclaimedRewardsResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/unclaimedRewards.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1BswapUnclaimedRewardsResponseBody200 = GetSapiV1BswapUnclaimedRewardsResponseBody200
  { -- | details
    getSapiV1BswapUnclaimedRewardsResponseBody200Details :: GetSapiV1BswapUnclaimedRewardsResponseBody200Details,
    -- | totalUnclaimedRewards
    getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards :: GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapUnclaimedRewardsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["details" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200Details obj] : ["totalUnclaimedRewards" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["details" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200Details obj] : ["totalUnclaimedRewards" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapUnclaimedRewardsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapUnclaimedRewardsResponseBody200" (\obj -> (GHC.Base.pure GetSapiV1BswapUnclaimedRewardsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalUnclaimedRewards"))

-- | Create a new 'GetSapiV1BswapUnclaimedRewardsResponseBody200' with all required fields.
mkGetSapiV1BswapUnclaimedRewardsResponseBody200 ::
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200Details'
  GetSapiV1BswapUnclaimedRewardsResponseBody200Details ->
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards'
  GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards ->
  GetSapiV1BswapUnclaimedRewardsResponseBody200
mkGetSapiV1BswapUnclaimedRewardsResponseBody200 getSapiV1BswapUnclaimedRewardsResponseBody200Details getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards =
  GetSapiV1BswapUnclaimedRewardsResponseBody200
    { getSapiV1BswapUnclaimedRewardsResponseBody200Details = getSapiV1BswapUnclaimedRewardsResponseBody200Details,
      getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards = getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/unclaimedRewards.GET.responses.200.content.application\/json.schema.properties.details@ in the specification.
data GetSapiV1BswapUnclaimedRewardsResponseBody200Details = GetSapiV1BswapUnclaimedRewardsResponseBody200Details
  { -- | BNB\/BTC
    getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC :: GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC,
    -- | BNB\/USDT
    getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT :: GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapUnclaimedRewardsResponseBody200Details where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["BNB/BTC" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC obj] : ["BNB/USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["BNB/BTC" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC obj] : ["BNB/USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapUnclaimedRewardsResponseBody200Details where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapUnclaimedRewardsResponseBody200Details" (\obj -> (GHC.Base.pure GetSapiV1BswapUnclaimedRewardsResponseBody200Details GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "BNB/BTC")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "BNB/USDT"))

-- | Create a new 'GetSapiV1BswapUnclaimedRewardsResponseBody200Details' with all required fields.
mkGetSapiV1BswapUnclaimedRewardsResponseBody200Details ::
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC'
  GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC ->
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT'
  GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT ->
  GetSapiV1BswapUnclaimedRewardsResponseBody200Details
mkGetSapiV1BswapUnclaimedRewardsResponseBody200Details getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT =
  GetSapiV1BswapUnclaimedRewardsResponseBody200Details
    { getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC = getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC,
      getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT = getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/unclaimedRewards.GET.responses.200.content.application\/json.schema.properties.details.properties.BNB\/BTC@ in the specification.
data GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC = GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC
  { -- | BNB
    getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTCBNB :: GHC.Types.Double
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["BNB" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTCBNB obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["BNB" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTCBNB obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC" (\obj -> GHC.Base.pure GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "BNB"))

-- | Create a new 'GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC' with all required fields.
mkGetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC ::
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTCBNB'
  GHC.Types.Double ->
  GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC
mkGetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTCBNB = GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTC {getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTCBNB = getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBBTCBNB}

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/unclaimedRewards.GET.responses.200.content.application\/json.schema.properties.details.properties.BNB\/USDT@ in the specification.
data GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT = GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT
  { -- | BUSD
    getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTBUSD :: GHC.Types.Float,
    -- | USDT
    getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTUSDT :: GHC.Types.Double
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTUSDT obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTUSDT obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT" (\obj -> (GHC.Base.pure GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "BUSD")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "USDT"))

-- | Create a new 'GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT' with all required fields.
mkGetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT ::
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTBUSD'
  GHC.Types.Float ->
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTUSDT'
  GHC.Types.Double ->
  GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT
mkGetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTBUSD getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTUSDT =
  GetSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDT
    { getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTBUSD = getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTBUSD,
      getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTUSDT = getSapiV1BswapUnclaimedRewardsResponseBody200DetailsBNBUSDTUSDT
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/unclaimedRewards.GET.responses.200.content.application\/json.schema.properties.totalUnclaimedRewards@ in the specification.
data GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards = GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards
  { -- | BNB
    getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBNB :: GHC.Types.Double,
    -- | BUSD
    getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBUSD :: GHC.Types.Float,
    -- | USDT
    getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsUSDT :: GHC.Types.Double
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["BNB" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBNB obj] : ["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsUSDT obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["BNB" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBNB obj] : ["BUSD" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBUSD obj] : ["USDT" Data.Aeson.Types.ToJSON..= getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsUSDT obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards" (\obj -> ((GHC.Base.pure GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "BNB")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "BUSD")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "USDT"))

-- | Create a new 'GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards' with all required fields.
mkGetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards ::
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBNB'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBUSD'
  GHC.Types.Float ->
  -- | 'getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsUSDT'
  GHC.Types.Double ->
  GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards
mkGetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBNB getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBUSD getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsUSDT =
  GetSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewards
    { getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBNB = getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBNB,
      getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBUSD = getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsBUSD,
      getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsUSDT = getSapiV1BswapUnclaimedRewardsResponseBody200TotalUnclaimedRewardsUSDT
    }

-- | > GET /sapi/v1/bswap/unclaimedRewards
--
-- The same as 'getSapiV1BswapUnclaimedRewards' but accepts an explicit configuration.
getSapiV1BswapUnclaimedRewardsWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapUnclaimedRewardsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BswapUnclaimedRewardsResponse)
getSapiV1BswapUnclaimedRewardsWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BswapUnclaimedRewardsResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapUnclaimedRewardsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1BswapUnclaimedRewardsResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapUnclaimedRewardsResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapUnclaimedRewardsResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/unclaimedRewards")
          [ Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapUnclaimedRewardsParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapUnclaimedRewardsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapUnclaimedRewardsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/bswap/unclaimedRewards
--
-- The same as 'getSapiV1BswapUnclaimedRewards' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapUnclaimedRewardsRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapUnclaimedRewardsParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapUnclaimedRewardsRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/unclaimedRewards")
        [ Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapUnclaimedRewardsParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapUnclaimedRewardsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapUnclaimedRewardsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/bswap/unclaimedRewards
--
-- The same as 'getSapiV1BswapUnclaimedRewards' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapUnclaimedRewardsWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapUnclaimedRewardsParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapUnclaimedRewardsWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/unclaimedRewards")
          [ Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapUnclaimedRewardsParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapUnclaimedRewardsParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapUnclaimedRewardsParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapUnclaimedRewardsParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
