{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1LoanIncome
module Binance.Operations.GetSapiV1LoanIncome where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/loan/income
--
-- - If startTime and endTime are not sent, the recent 7-day data will be returned.
-- - The max interval between startTime and endTime is 30 days.
--
-- Weight(UID): 6000
getSapiV1LoanIncome ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1LoanIncomeParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1LoanIncomeResponse)
getSapiV1LoanIncome parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1LoanIncomeResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1LoanIncomeResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1LoanIncomeResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1LoanIncomeResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1LoanIncomeResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/loan/income")
        [ Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1LoanIncomeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1LoanIncomeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/loan\/income.GET.parameters@ in the specification.
data GetSapiV1LoanIncomeParameters = GetSapiV1LoanIncomeParameters
  { -- | queryAsset: Represents the parameter named \'asset\'
    getSapiV1LoanIncomeParametersQueryAsset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1LoanIncomeParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- default 20, max 100
    getSapiV1LoanIncomeParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1LoanIncomeParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1LoanIncomeParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1LoanIncomeParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1LoanIncomeParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryType: Represents the parameter named \'type\'
    --
    -- All types will be returned by default.
    -- * \`borrowIn\`
    -- * \`collateralSpent\`
    -- * \`repayAmount\`
    -- * \`collateralReturn\` - Collateral return after repayment
    -- * \`addCollateral\`
    -- * \`removeCollateral\`
    -- * \`collateralReturnAfterLiquidation\`
    getSapiV1LoanIncomeParametersQueryType :: (GHC.Maybe.Maybe GetSapiV1LoanIncomeParametersQueryType)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1LoanIncomeParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryStartTime obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getSapiV1LoanIncomeParametersQueryType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1LoanIncomeParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1LoanIncomeParameters" (\obj -> (((((((GHC.Base.pure GetSapiV1LoanIncomeParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryType"))

-- | Create a new 'GetSapiV1LoanIncomeParameters' with all required fields.
mkGetSapiV1LoanIncomeParameters ::
  -- | 'getSapiV1LoanIncomeParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1LoanIncomeParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1LoanIncomeParameters
mkGetSapiV1LoanIncomeParameters getSapiV1LoanIncomeParametersQuerySignature getSapiV1LoanIncomeParametersQueryTimestamp =
  GetSapiV1LoanIncomeParameters
    { getSapiV1LoanIncomeParametersQueryAsset = GHC.Maybe.Nothing,
      getSapiV1LoanIncomeParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1LoanIncomeParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1LoanIncomeParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1LoanIncomeParametersQuerySignature = getSapiV1LoanIncomeParametersQuerySignature,
      getSapiV1LoanIncomeParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1LoanIncomeParametersQueryTimestamp = getSapiV1LoanIncomeParametersQueryTimestamp,
      getSapiV1LoanIncomeParametersQueryType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/loan\/income.GET.parameters.properties.queryType@ in the specification.
--
-- Represents the parameter named \'type\'
--
-- All types will be returned by default.
-- * \`borrowIn\`
-- * \`collateralSpent\`
-- * \`repayAmount\`
-- * \`collateralReturn\` - Collateral return after repayment
-- * \`addCollateral\`
-- * \`removeCollateral\`
-- * \`collateralReturnAfterLiquidation\`
data GetSapiV1LoanIncomeParametersQueryType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetSapiV1LoanIncomeParametersQueryTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetSapiV1LoanIncomeParametersQueryTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"borrowIn"@
    GetSapiV1LoanIncomeParametersQueryTypeEnumBorrowIn
  | -- | Represents the JSON value @"collateralSpent"@
    GetSapiV1LoanIncomeParametersQueryTypeEnumCollateralSpent
  | -- | Represents the JSON value @"repayAmount"@
    GetSapiV1LoanIncomeParametersQueryTypeEnumRepayAmount
  | -- | Represents the JSON value @"collateralReturn"@
    GetSapiV1LoanIncomeParametersQueryTypeEnumCollateralReturn
  | -- | Represents the JSON value @"addCollateral"@
    GetSapiV1LoanIncomeParametersQueryTypeEnumAddCollateral
  | -- | Represents the JSON value @"removeCollateral"@
    GetSapiV1LoanIncomeParametersQueryTypeEnumRemoveCollateral
  | -- | Represents the JSON value @"collateralReturnAfterLiquidation"@
    GetSapiV1LoanIncomeParametersQueryTypeEnumCollateralReturnAfterLiquidation
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1LoanIncomeParametersQueryType where
  toJSON (GetSapiV1LoanIncomeParametersQueryTypeOther val) = val
  toJSON (GetSapiV1LoanIncomeParametersQueryTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetSapiV1LoanIncomeParametersQueryTypeEnumBorrowIn) = "borrowIn"
  toJSON (GetSapiV1LoanIncomeParametersQueryTypeEnumCollateralSpent) = "collateralSpent"
  toJSON (GetSapiV1LoanIncomeParametersQueryTypeEnumRepayAmount) = "repayAmount"
  toJSON (GetSapiV1LoanIncomeParametersQueryTypeEnumCollateralReturn) = "collateralReturn"
  toJSON (GetSapiV1LoanIncomeParametersQueryTypeEnumAddCollateral) = "addCollateral"
  toJSON (GetSapiV1LoanIncomeParametersQueryTypeEnumRemoveCollateral) = "removeCollateral"
  toJSON (GetSapiV1LoanIncomeParametersQueryTypeEnumCollateralReturnAfterLiquidation) = "collateralReturnAfterLiquidation"

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1LoanIncomeParametersQueryType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "borrowIn" -> GetSapiV1LoanIncomeParametersQueryTypeEnumBorrowIn
            | val GHC.Classes.== "collateralSpent" -> GetSapiV1LoanIncomeParametersQueryTypeEnumCollateralSpent
            | val GHC.Classes.== "repayAmount" -> GetSapiV1LoanIncomeParametersQueryTypeEnumRepayAmount
            | val GHC.Classes.== "collateralReturn" -> GetSapiV1LoanIncomeParametersQueryTypeEnumCollateralReturn
            | val GHC.Classes.== "addCollateral" -> GetSapiV1LoanIncomeParametersQueryTypeEnumAddCollateral
            | val GHC.Classes.== "removeCollateral" -> GetSapiV1LoanIncomeParametersQueryTypeEnumRemoveCollateral
            | val GHC.Classes.== "collateralReturnAfterLiquidation" -> GetSapiV1LoanIncomeParametersQueryTypeEnumCollateralReturnAfterLiquidation
            | GHC.Base.otherwise -> GetSapiV1LoanIncomeParametersQueryTypeOther val
      )

-- | Represents a response of the operation 'getSapiV1LoanIncome'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1LoanIncomeResponseError' is used.
data GetSapiV1LoanIncomeResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1LoanIncomeResponseError GHC.Base.String
  | -- | Loan History
    GetSapiV1LoanIncomeResponse200 ([GetSapiV1LoanIncomeResponseBody200])
  | -- | Bad Request
    GetSapiV1LoanIncomeResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1LoanIncomeResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/loan\/income.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1LoanIncomeResponseBody200 = GetSapiV1LoanIncomeResponseBody200
  { -- | amount
    getSapiV1LoanIncomeResponseBody200Amount :: Data.Text.Internal.Text,
    -- | asset
    getSapiV1LoanIncomeResponseBody200Asset :: Data.Text.Internal.Text,
    -- | timestamp
    getSapiV1LoanIncomeResponseBody200Timestamp :: GHC.Int.Int64,
    -- | tranId
    getSapiV1LoanIncomeResponseBody200TranId :: Data.Text.Internal.Text,
    -- | type
    getSapiV1LoanIncomeResponseBody200Type :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1LoanIncomeResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200Amount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200Asset obj] : ["timestamp" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200Timestamp obj] : ["tranId" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200TranId obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200Type obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200Amount obj] : ["asset" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200Asset obj] : ["timestamp" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200Timestamp obj] : ["tranId" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200TranId obj] : ["type" Data.Aeson.Types.ToJSON..= getSapiV1LoanIncomeResponseBody200Type obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1LoanIncomeResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1LoanIncomeResponseBody200" (\obj -> ((((GHC.Base.pure GetSapiV1LoanIncomeResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "asset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tranId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'GetSapiV1LoanIncomeResponseBody200' with all required fields.
mkGetSapiV1LoanIncomeResponseBody200 ::
  -- | 'getSapiV1LoanIncomeResponseBody200Amount'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1LoanIncomeResponseBody200Asset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1LoanIncomeResponseBody200Timestamp'
  GHC.Int.Int64 ->
  -- | 'getSapiV1LoanIncomeResponseBody200TranId'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1LoanIncomeResponseBody200Type'
  Data.Text.Internal.Text ->
  GetSapiV1LoanIncomeResponseBody200
mkGetSapiV1LoanIncomeResponseBody200 getSapiV1LoanIncomeResponseBody200Amount getSapiV1LoanIncomeResponseBody200Asset getSapiV1LoanIncomeResponseBody200Timestamp getSapiV1LoanIncomeResponseBody200TranId getSapiV1LoanIncomeResponseBody200Type =
  GetSapiV1LoanIncomeResponseBody200
    { getSapiV1LoanIncomeResponseBody200Amount = getSapiV1LoanIncomeResponseBody200Amount,
      getSapiV1LoanIncomeResponseBody200Asset = getSapiV1LoanIncomeResponseBody200Asset,
      getSapiV1LoanIncomeResponseBody200Timestamp = getSapiV1LoanIncomeResponseBody200Timestamp,
      getSapiV1LoanIncomeResponseBody200TranId = getSapiV1LoanIncomeResponseBody200TranId,
      getSapiV1LoanIncomeResponseBody200Type = getSapiV1LoanIncomeResponseBody200Type
    }

-- | > GET /sapi/v1/loan/income
--
-- The same as 'getSapiV1LoanIncome' but accepts an explicit configuration.
getSapiV1LoanIncomeWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1LoanIncomeParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1LoanIncomeResponse)
getSapiV1LoanIncomeWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1LoanIncomeResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1LoanIncomeResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1LoanIncomeResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1LoanIncomeResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1LoanIncomeResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/loan/income")
          [ Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1LoanIncomeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1LoanIncomeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/loan/income
--
-- The same as 'getSapiV1LoanIncome' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1LoanIncomeRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1LoanIncomeParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1LoanIncomeRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/loan/income")
        [ Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1LoanIncomeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1LoanIncomeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/loan/income
--
-- The same as 'getSapiV1LoanIncome' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1LoanIncomeWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1LoanIncomeParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1LoanIncomeWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/loan/income")
          [ Binance.Common.QueryParameter (Data.Text.pack "asset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1LoanIncomeParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1LoanIncomeParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1LoanIncomeParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
