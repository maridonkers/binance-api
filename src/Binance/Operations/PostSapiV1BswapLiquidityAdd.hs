{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1BswapLiquidityAdd
module Binance.Operations.PostSapiV1BswapLiquidityAdd where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/bswap/liquidityAdd
--
-- Add liquidity to a pool.
--
-- Weight(UID): 1000 (Additional: 3 times one second)
postSapiV1BswapLiquidityAdd ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapLiquidityAddParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1BswapLiquidityAddResponse)
postSapiV1BswapLiquidityAdd parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1BswapLiquidityAddResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BswapLiquidityAddResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1BswapLiquidityAddResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BswapLiquidityAddResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1BswapLiquidityAddResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/bswap/liquidityAdd")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityAddParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityAddParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidityAdd.POST.parameters@ in the specification.
data PostSapiV1BswapLiquidityAddParameters = PostSapiV1BswapLiquidityAddParameters
  { -- | queryAsset: Represents the parameter named \'asset\'
    postSapiV1BswapLiquidityAddParametersQueryAsset :: Data.Text.Internal.Text,
    -- | queryPoolId: Represents the parameter named \'poolId\'
    postSapiV1BswapLiquidityAddParametersQueryPoolId :: GHC.Int.Int64,
    -- | queryQuantity: Represents the parameter named \'quantity\'
    postSapiV1BswapLiquidityAddParametersQueryQuantity :: GHC.Types.Double,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1BswapLiquidityAddParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1BswapLiquidityAddParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1BswapLiquidityAddParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryType: Represents the parameter named \'type\'
    --
    -- * \`Single\` - to add a single token
    -- * \`Combination\` - to add dual tokens
    postSapiV1BswapLiquidityAddParametersQueryType :: (GHC.Maybe.Maybe PostSapiV1BswapLiquidityAddParametersQueryType)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BswapLiquidityAddParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQueryAsset obj] : ["queryPoolId" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQueryPoolId obj] : ["queryQuantity" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQueryQuantity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapLiquidityAddParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapLiquidityAddParametersQueryType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQueryAsset obj] : ["queryPoolId" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQueryPoolId obj] : ["queryQuantity" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQueryQuantity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapLiquidityAddParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddParametersQueryTimestamp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (postSapiV1BswapLiquidityAddParametersQueryType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BswapLiquidityAddParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BswapLiquidityAddParameters" (\obj -> ((((((GHC.Base.pure PostSapiV1BswapLiquidityAddParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryPoolId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryType"))

-- | Create a new 'PostSapiV1BswapLiquidityAddParameters' with all required fields.
mkPostSapiV1BswapLiquidityAddParameters ::
  -- | 'postSapiV1BswapLiquidityAddParametersQueryAsset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BswapLiquidityAddParametersQueryPoolId'
  GHC.Int.Int64 ->
  -- | 'postSapiV1BswapLiquidityAddParametersQueryQuantity'
  GHC.Types.Double ->
  -- | 'postSapiV1BswapLiquidityAddParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1BswapLiquidityAddParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1BswapLiquidityAddParameters
mkPostSapiV1BswapLiquidityAddParameters postSapiV1BswapLiquidityAddParametersQueryAsset postSapiV1BswapLiquidityAddParametersQueryPoolId postSapiV1BswapLiquidityAddParametersQueryQuantity postSapiV1BswapLiquidityAddParametersQuerySignature postSapiV1BswapLiquidityAddParametersQueryTimestamp =
  PostSapiV1BswapLiquidityAddParameters
    { postSapiV1BswapLiquidityAddParametersQueryAsset = postSapiV1BswapLiquidityAddParametersQueryAsset,
      postSapiV1BswapLiquidityAddParametersQueryPoolId = postSapiV1BswapLiquidityAddParametersQueryPoolId,
      postSapiV1BswapLiquidityAddParametersQueryQuantity = postSapiV1BswapLiquidityAddParametersQueryQuantity,
      postSapiV1BswapLiquidityAddParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1BswapLiquidityAddParametersQuerySignature = postSapiV1BswapLiquidityAddParametersQuerySignature,
      postSapiV1BswapLiquidityAddParametersQueryTimestamp = postSapiV1BswapLiquidityAddParametersQueryTimestamp,
      postSapiV1BswapLiquidityAddParametersQueryType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/bswap\/liquidityAdd.POST.parameters.properties.queryType@ in the specification.
--
-- Represents the parameter named \'type\'
--
-- * \`Single\` - to add a single token
-- * \`Combination\` - to add dual tokens
data PostSapiV1BswapLiquidityAddParametersQueryType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1BswapLiquidityAddParametersQueryTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1BswapLiquidityAddParametersQueryTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"Single"@
    PostSapiV1BswapLiquidityAddParametersQueryTypeEnumSingle
  | -- | Represents the JSON value @"Combination"@
    PostSapiV1BswapLiquidityAddParametersQueryTypeEnumCombination
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BswapLiquidityAddParametersQueryType where
  toJSON (PostSapiV1BswapLiquidityAddParametersQueryTypeOther val) = val
  toJSON (PostSapiV1BswapLiquidityAddParametersQueryTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1BswapLiquidityAddParametersQueryTypeEnumSingle) = "Single"
  toJSON (PostSapiV1BswapLiquidityAddParametersQueryTypeEnumCombination) = "Combination"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BswapLiquidityAddParametersQueryType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "Single" -> PostSapiV1BswapLiquidityAddParametersQueryTypeEnumSingle
            | val GHC.Classes.== "Combination" -> PostSapiV1BswapLiquidityAddParametersQueryTypeEnumCombination
            | GHC.Base.otherwise -> PostSapiV1BswapLiquidityAddParametersQueryTypeOther val
      )

-- | Represents a response of the operation 'postSapiV1BswapLiquidityAdd'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1BswapLiquidityAddResponseError' is used.
data PostSapiV1BswapLiquidityAddResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1BswapLiquidityAddResponseError GHC.Base.String
  | -- | Operation Id
    PostSapiV1BswapLiquidityAddResponse200 PostSapiV1BswapLiquidityAddResponseBody200
  | -- | Bad Request
    PostSapiV1BswapLiquidityAddResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1BswapLiquidityAddResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/liquidityAdd.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1BswapLiquidityAddResponseBody200 = PostSapiV1BswapLiquidityAddResponseBody200
  { -- | operationId
    postSapiV1BswapLiquidityAddResponseBody200OperationId :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1BswapLiquidityAddResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["operationId" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddResponseBody200OperationId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["operationId" Data.Aeson.Types.ToJSON..= postSapiV1BswapLiquidityAddResponseBody200OperationId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1BswapLiquidityAddResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1BswapLiquidityAddResponseBody200" (\obj -> GHC.Base.pure PostSapiV1BswapLiquidityAddResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "operationId"))

-- | Create a new 'PostSapiV1BswapLiquidityAddResponseBody200' with all required fields.
mkPostSapiV1BswapLiquidityAddResponseBody200 ::
  -- | 'postSapiV1BswapLiquidityAddResponseBody200OperationId'
  GHC.Int.Int64 ->
  PostSapiV1BswapLiquidityAddResponseBody200
mkPostSapiV1BswapLiquidityAddResponseBody200 postSapiV1BswapLiquidityAddResponseBody200OperationId = PostSapiV1BswapLiquidityAddResponseBody200 {postSapiV1BswapLiquidityAddResponseBody200OperationId = postSapiV1BswapLiquidityAddResponseBody200OperationId}

-- | > POST /sapi/v1/bswap/liquidityAdd
--
-- The same as 'postSapiV1BswapLiquidityAdd' but accepts an explicit configuration.
postSapiV1BswapLiquidityAddWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapLiquidityAddParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1BswapLiquidityAddResponse)
postSapiV1BswapLiquidityAddWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1BswapLiquidityAddResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BswapLiquidityAddResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1BswapLiquidityAddResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BswapLiquidityAddResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1BswapLiquidityAddResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/bswap/liquidityAdd")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityAddParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityAddParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/bswap/liquidityAdd
--
-- The same as 'postSapiV1BswapLiquidityAdd' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BswapLiquidityAddRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapLiquidityAddParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BswapLiquidityAddRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/bswap/liquidityAdd")
        [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityAddParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityAddParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/bswap/liquidityAdd
--
-- The same as 'postSapiV1BswapLiquidityAdd' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1BswapLiquidityAddWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1BswapLiquidityAddParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1BswapLiquidityAddWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/bswap/liquidityAdd")
          [ Binance.Common.QueryParameter (Data.Text.pack "poolId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryPoolId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityAddParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quantity") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryQuantity parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1BswapLiquidityAddParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1BswapLiquidityAddParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
