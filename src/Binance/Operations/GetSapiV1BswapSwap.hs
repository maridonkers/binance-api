{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1BswapSwap
module Binance.Operations.GetSapiV1BswapSwap where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/bswap/swap
--
-- Get swap history.
--
-- Weight(UID): 3000
getSapiV1BswapSwap ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapSwapParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1BswapSwapResponse)
getSapiV1BswapSwap parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1BswapSwapResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapSwapResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ([GetSapiV1BswapSwapResponseBody200])
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapSwapResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1BswapSwapResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/swap")
        [ Binance.Common.QueryParameter (Data.Text.pack "swapId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQuerySwapId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryQuoteAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryBaseAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapSwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapSwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/swap.GET.parameters@ in the specification.
data GetSapiV1BswapSwapParameters = GetSapiV1BswapSwapParameters
  { -- | queryBaseAsset: Represents the parameter named \'baseAsset\'
    getSapiV1BswapSwapParametersQueryBaseAsset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEndTime: Represents the parameter named \'endTime\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapSwapParametersQueryEndTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- default 3, max 100
    getSapiV1BswapSwapParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryQuoteAsset: Represents the parameter named \'quoteAsset\'
    getSapiV1BswapSwapParametersQueryQuoteAsset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1BswapSwapParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1BswapSwapParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryStartTime: Represents the parameter named \'startTime\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapSwapParametersQueryStartTime :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryStatus: Represents the parameter named \'status\'
    --
    -- * \`0\` - pending for swap
    -- * \`1\` - success
    -- * \`2\` - failed
    getSapiV1BswapSwapParametersQueryStatus :: (GHC.Maybe.Maybe GetSapiV1BswapSwapParametersQueryStatus),
    -- | querySwapId: Represents the parameter named \'swapId\'
    getSapiV1BswapSwapParametersQuerySwapId :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1BswapSwapParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapSwapParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBaseAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryBaseAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuoteAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryQuoteAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryStartTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySwapId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQuerySwapId obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBaseAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryBaseAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEndTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryEndTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryQuoteAsset" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryQuoteAsset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStartTime" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryStartTime obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQueryStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySwapId" Data.Aeson.Types.ToJSON..=)) (getSapiV1BswapSwapParametersQuerySwapId obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapSwapParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapSwapParameters" (\obj -> (((((((((GHC.Base.pure GetSapiV1BswapSwapParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBaseAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEndTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryQuoteAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStartTime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySwapId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1BswapSwapParameters' with all required fields.
mkGetSapiV1BswapSwapParameters ::
  -- | 'getSapiV1BswapSwapParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapSwapParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1BswapSwapParameters
mkGetSapiV1BswapSwapParameters getSapiV1BswapSwapParametersQuerySignature getSapiV1BswapSwapParametersQueryTimestamp =
  GetSapiV1BswapSwapParameters
    { getSapiV1BswapSwapParametersQueryBaseAsset = GHC.Maybe.Nothing,
      getSapiV1BswapSwapParametersQueryEndTime = GHC.Maybe.Nothing,
      getSapiV1BswapSwapParametersQueryLimit = GHC.Maybe.Nothing,
      getSapiV1BswapSwapParametersQueryQuoteAsset = GHC.Maybe.Nothing,
      getSapiV1BswapSwapParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1BswapSwapParametersQuerySignature = getSapiV1BswapSwapParametersQuerySignature,
      getSapiV1BswapSwapParametersQueryStartTime = GHC.Maybe.Nothing,
      getSapiV1BswapSwapParametersQueryStatus = GHC.Maybe.Nothing,
      getSapiV1BswapSwapParametersQuerySwapId = GHC.Maybe.Nothing,
      getSapiV1BswapSwapParametersQueryTimestamp = getSapiV1BswapSwapParametersQueryTimestamp
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/bswap\/swap.GET.parameters.properties.queryStatus@ in the specification.
--
-- Represents the parameter named \'status\'
--
-- * \`0\` - pending for swap
-- * \`1\` - success
-- * \`2\` - failed
data GetSapiV1BswapSwapParametersQueryStatus
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetSapiV1BswapSwapParametersQueryStatusOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetSapiV1BswapSwapParametersQueryStatusTyped GHC.Int.Int32
  | -- | Represents the JSON value @0@
    GetSapiV1BswapSwapParametersQueryStatusEnum0
  | -- | Represents the JSON value @1@
    GetSapiV1BswapSwapParametersQueryStatusEnum1
  | -- | Represents the JSON value @2@
    GetSapiV1BswapSwapParametersQueryStatusEnum2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapSwapParametersQueryStatus where
  toJSON (GetSapiV1BswapSwapParametersQueryStatusOther val) = val
  toJSON (GetSapiV1BswapSwapParametersQueryStatusTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetSapiV1BswapSwapParametersQueryStatusEnum0) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 0 0)
  toJSON (GetSapiV1BswapSwapParametersQueryStatusEnum1) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 1 0)
  toJSON (GetSapiV1BswapSwapParametersQueryStatusEnum2) = Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 2 0)

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapSwapParametersQueryStatus where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 0 0) -> GetSapiV1BswapSwapParametersQueryStatusEnum0
            | val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 1 0) -> GetSapiV1BswapSwapParametersQueryStatusEnum1
            | val GHC.Classes.== Data.Aeson.Types.Internal.Number (Data.Scientific.scientific 2 0) -> GetSapiV1BswapSwapParametersQueryStatusEnum2
            | GHC.Base.otherwise -> GetSapiV1BswapSwapParametersQueryStatusOther val
      )

-- | Represents a response of the operation 'getSapiV1BswapSwap'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1BswapSwapResponseError' is used.
data GetSapiV1BswapSwapResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1BswapSwapResponseError GHC.Base.String
  | -- | Swap History
    GetSapiV1BswapSwapResponse200 ([GetSapiV1BswapSwapResponseBody200])
  | -- | Bad Request
    GetSapiV1BswapSwapResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1BswapSwapResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/bswap\/swap.GET.responses.200.content.application\/json.schema.items@ in the specification.
data GetSapiV1BswapSwapResponseBody200 = GetSapiV1BswapSwapResponseBody200
  { -- | baseAsset
    getSapiV1BswapSwapResponseBody200BaseAsset :: Data.Text.Internal.Text,
    -- | baseQty
    getSapiV1BswapSwapResponseBody200BaseQty :: GHC.Types.Double,
    -- | fee
    getSapiV1BswapSwapResponseBody200Fee :: GHC.Types.Double,
    -- | price
    getSapiV1BswapSwapResponseBody200Price :: GHC.Types.Double,
    -- | quoteAsset
    getSapiV1BswapSwapResponseBody200QuoteAsset :: Data.Text.Internal.Text,
    -- | quoteQty
    getSapiV1BswapSwapResponseBody200QuoteQty :: GHC.Types.Double,
    -- | status: 0: pending, 1: success, 2: failed
    getSapiV1BswapSwapResponseBody200Status :: GHC.Int.Int32,
    -- | swapId
    getSapiV1BswapSwapResponseBody200SwapId :: GHC.Int.Int64,
    -- | swapTime
    getSapiV1BswapSwapResponseBody200SwapTime :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1BswapSwapResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["baseAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200BaseAsset obj] : ["baseQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200BaseQty obj] : ["fee" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200Fee obj] : ["price" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200Price obj] : ["quoteAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200QuoteAsset obj] : ["quoteQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200QuoteQty obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200Status obj] : ["swapId" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200SwapId obj] : ["swapTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200SwapTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["baseAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200BaseAsset obj] : ["baseQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200BaseQty obj] : ["fee" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200Fee obj] : ["price" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200Price obj] : ["quoteAsset" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200QuoteAsset obj] : ["quoteQty" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200QuoteQty obj] : ["status" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200Status obj] : ["swapId" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200SwapId obj] : ["swapTime" Data.Aeson.Types.ToJSON..= getSapiV1BswapSwapResponseBody200SwapTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1BswapSwapResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1BswapSwapResponseBody200" (\obj -> ((((((((GHC.Base.pure GetSapiV1BswapSwapResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "baseAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "baseQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quoteQty")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "swapId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "swapTime"))

-- | Create a new 'GetSapiV1BswapSwapResponseBody200' with all required fields.
mkGetSapiV1BswapSwapResponseBody200 ::
  -- | 'getSapiV1BswapSwapResponseBody200BaseAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapSwapResponseBody200BaseQty'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapSwapResponseBody200Fee'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapSwapResponseBody200Price'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapSwapResponseBody200QuoteAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1BswapSwapResponseBody200QuoteQty'
  GHC.Types.Double ->
  -- | 'getSapiV1BswapSwapResponseBody200Status'
  GHC.Int.Int32 ->
  -- | 'getSapiV1BswapSwapResponseBody200SwapId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1BswapSwapResponseBody200SwapTime'
  GHC.Int.Int64 ->
  GetSapiV1BswapSwapResponseBody200
mkGetSapiV1BswapSwapResponseBody200 getSapiV1BswapSwapResponseBody200BaseAsset getSapiV1BswapSwapResponseBody200BaseQty getSapiV1BswapSwapResponseBody200Fee getSapiV1BswapSwapResponseBody200Price getSapiV1BswapSwapResponseBody200QuoteAsset getSapiV1BswapSwapResponseBody200QuoteQty getSapiV1BswapSwapResponseBody200Status getSapiV1BswapSwapResponseBody200SwapId getSapiV1BswapSwapResponseBody200SwapTime =
  GetSapiV1BswapSwapResponseBody200
    { getSapiV1BswapSwapResponseBody200BaseAsset = getSapiV1BswapSwapResponseBody200BaseAsset,
      getSapiV1BswapSwapResponseBody200BaseQty = getSapiV1BswapSwapResponseBody200BaseQty,
      getSapiV1BswapSwapResponseBody200Fee = getSapiV1BswapSwapResponseBody200Fee,
      getSapiV1BswapSwapResponseBody200Price = getSapiV1BswapSwapResponseBody200Price,
      getSapiV1BswapSwapResponseBody200QuoteAsset = getSapiV1BswapSwapResponseBody200QuoteAsset,
      getSapiV1BswapSwapResponseBody200QuoteQty = getSapiV1BswapSwapResponseBody200QuoteQty,
      getSapiV1BswapSwapResponseBody200Status = getSapiV1BswapSwapResponseBody200Status,
      getSapiV1BswapSwapResponseBody200SwapId = getSapiV1BswapSwapResponseBody200SwapId,
      getSapiV1BswapSwapResponseBody200SwapTime = getSapiV1BswapSwapResponseBody200SwapTime
    }

-- | > GET /sapi/v1/bswap/swap
--
-- The same as 'getSapiV1BswapSwap' but accepts an explicit configuration.
getSapiV1BswapSwapWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapSwapParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1BswapSwapResponse)
getSapiV1BswapSwapWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1BswapSwapResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapSwapResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ([GetSapiV1BswapSwapResponseBody200])
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapSwapResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1BswapSwapResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/swap")
          [ Binance.Common.QueryParameter (Data.Text.pack "swapId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQuerySwapId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryQuoteAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryBaseAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapSwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapSwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/bswap/swap
--
-- The same as 'getSapiV1BswapSwap' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapSwapRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapSwapParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapSwapRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/bswap/swap")
        [ Binance.Common.QueryParameter (Data.Text.pack "swapId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQuerySwapId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryQuoteAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryBaseAsset parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapSwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapSwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/bswap/swap
--
-- The same as 'getSapiV1BswapSwap' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1BswapSwapWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1BswapSwapParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1BswapSwapWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/bswap/swap")
          [ Binance.Common.QueryParameter (Data.Text.pack "swapId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQuerySwapId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "startTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryStartTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "endTime") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryEndTime parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "quoteAsset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryQuoteAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "baseAsset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryBaseAsset parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1BswapSwapParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapSwapParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1BswapSwapParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
