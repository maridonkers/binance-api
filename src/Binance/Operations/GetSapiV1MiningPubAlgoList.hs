{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MiningPubAlgoList
module Binance.Operations.GetSapiV1MiningPubAlgoList where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/mining/pub/algoList
--
-- Weight(IP): 1
getSapiV1MiningPubAlgoList ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPubAlgoListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MiningPubAlgoListResponse)
getSapiV1MiningPubAlgoList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MiningPubAlgoListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPubAlgoListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1MiningPubAlgoListResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MiningPubAlgoListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/mining/pub/algoList")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPubAlgoListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubAlgoListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubAlgoListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/pub\/algoList.GET.parameters@ in the specification.
data GetSapiV1MiningPubAlgoListParameters = GetSapiV1MiningPubAlgoListParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1MiningPubAlgoListParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1MiningPubAlgoListParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1MiningPubAlgoListParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPubAlgoListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPubAlgoListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MiningPubAlgoListParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPubAlgoListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPubAlgoListParameters" (\obj -> ((GHC.Base.pure GetSapiV1MiningPubAlgoListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1MiningPubAlgoListParameters' with all required fields.
mkGetSapiV1MiningPubAlgoListParameters ::
  -- | 'getSapiV1MiningPubAlgoListParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPubAlgoListParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1MiningPubAlgoListParameters
mkGetSapiV1MiningPubAlgoListParameters getSapiV1MiningPubAlgoListParametersQuerySignature getSapiV1MiningPubAlgoListParametersQueryTimestamp =
  GetSapiV1MiningPubAlgoListParameters
    { getSapiV1MiningPubAlgoListParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1MiningPubAlgoListParametersQuerySignature = getSapiV1MiningPubAlgoListParametersQuerySignature,
      getSapiV1MiningPubAlgoListParametersQueryTimestamp = getSapiV1MiningPubAlgoListParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1MiningPubAlgoList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MiningPubAlgoListResponseError' is used.
data GetSapiV1MiningPubAlgoListResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MiningPubAlgoListResponseError GHC.Base.String
  | -- | Algorithm information
    GetSapiV1MiningPubAlgoListResponse200 GetSapiV1MiningPubAlgoListResponseBody200
  | -- | Bad Request
    GetSapiV1MiningPubAlgoListResponse400 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/pub\/algoList.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1MiningPubAlgoListResponseBody200 = GetSapiV1MiningPubAlgoListResponseBody200
  { -- | code
    getSapiV1MiningPubAlgoListResponseBody200Code :: GHC.Int.Int64,
    -- | data
    getSapiV1MiningPubAlgoListResponseBody200Data :: ([GetSapiV1MiningPubAlgoListResponseBody200Data]),
    -- | msg
    getSapiV1MiningPubAlgoListResponseBody200Msg :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPubAlgoListResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200Data obj] : ["msg" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200Msg obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["code" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200Code obj] : ["data" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200Data obj] : ["msg" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200Msg obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPubAlgoListResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPubAlgoListResponseBody200" (\obj -> ((GHC.Base.pure GetSapiV1MiningPubAlgoListResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "msg"))

-- | Create a new 'GetSapiV1MiningPubAlgoListResponseBody200' with all required fields.
mkGetSapiV1MiningPubAlgoListResponseBody200 ::
  -- | 'getSapiV1MiningPubAlgoListResponseBody200Code'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPubAlgoListResponseBody200Data'
  [GetSapiV1MiningPubAlgoListResponseBody200Data] ->
  -- | 'getSapiV1MiningPubAlgoListResponseBody200Msg'
  Data.Text.Internal.Text ->
  GetSapiV1MiningPubAlgoListResponseBody200
mkGetSapiV1MiningPubAlgoListResponseBody200 getSapiV1MiningPubAlgoListResponseBody200Code getSapiV1MiningPubAlgoListResponseBody200Data getSapiV1MiningPubAlgoListResponseBody200Msg =
  GetSapiV1MiningPubAlgoListResponseBody200
    { getSapiV1MiningPubAlgoListResponseBody200Code = getSapiV1MiningPubAlgoListResponseBody200Code,
      getSapiV1MiningPubAlgoListResponseBody200Data = getSapiV1MiningPubAlgoListResponseBody200Data,
      getSapiV1MiningPubAlgoListResponseBody200Msg = getSapiV1MiningPubAlgoListResponseBody200Msg
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/mining\/pub\/algoList.GET.responses.200.content.application\/json.schema.properties.data.items@ in the specification.
data GetSapiV1MiningPubAlgoListResponseBody200Data = GetSapiV1MiningPubAlgoListResponseBody200Data
  { -- | algoId
    getSapiV1MiningPubAlgoListResponseBody200DataAlgoId :: GHC.Int.Int64,
    -- | algoName
    getSapiV1MiningPubAlgoListResponseBody200DataAlgoName :: Data.Text.Internal.Text,
    -- | poolIndex
    getSapiV1MiningPubAlgoListResponseBody200DataPoolIndex :: GHC.Int.Int64,
    -- | unit
    getSapiV1MiningPubAlgoListResponseBody200DataUnit :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MiningPubAlgoListResponseBody200Data where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["algoId" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200DataAlgoId obj] : ["algoName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200DataAlgoName obj] : ["poolIndex" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200DataPoolIndex obj] : ["unit" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200DataUnit obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["algoId" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200DataAlgoId obj] : ["algoName" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200DataAlgoName obj] : ["poolIndex" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200DataPoolIndex obj] : ["unit" Data.Aeson.Types.ToJSON..= getSapiV1MiningPubAlgoListResponseBody200DataUnit obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MiningPubAlgoListResponseBody200Data where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MiningPubAlgoListResponseBody200Data" (\obj -> (((GHC.Base.pure GetSapiV1MiningPubAlgoListResponseBody200Data GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "algoId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "algoName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "poolIndex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unit"))

-- | Create a new 'GetSapiV1MiningPubAlgoListResponseBody200Data' with all required fields.
mkGetSapiV1MiningPubAlgoListResponseBody200Data ::
  -- | 'getSapiV1MiningPubAlgoListResponseBody200DataAlgoId'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPubAlgoListResponseBody200DataAlgoName'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MiningPubAlgoListResponseBody200DataPoolIndex'
  GHC.Int.Int64 ->
  -- | 'getSapiV1MiningPubAlgoListResponseBody200DataUnit'
  Data.Text.Internal.Text ->
  GetSapiV1MiningPubAlgoListResponseBody200Data
mkGetSapiV1MiningPubAlgoListResponseBody200Data getSapiV1MiningPubAlgoListResponseBody200DataAlgoId getSapiV1MiningPubAlgoListResponseBody200DataAlgoName getSapiV1MiningPubAlgoListResponseBody200DataPoolIndex getSapiV1MiningPubAlgoListResponseBody200DataUnit =
  GetSapiV1MiningPubAlgoListResponseBody200Data
    { getSapiV1MiningPubAlgoListResponseBody200DataAlgoId = getSapiV1MiningPubAlgoListResponseBody200DataAlgoId,
      getSapiV1MiningPubAlgoListResponseBody200DataAlgoName = getSapiV1MiningPubAlgoListResponseBody200DataAlgoName,
      getSapiV1MiningPubAlgoListResponseBody200DataPoolIndex = getSapiV1MiningPubAlgoListResponseBody200DataPoolIndex,
      getSapiV1MiningPubAlgoListResponseBody200DataUnit = getSapiV1MiningPubAlgoListResponseBody200DataUnit
    }

-- | > GET /sapi/v1/mining/pub/algoList
--
-- The same as 'getSapiV1MiningPubAlgoList' but accepts an explicit configuration.
getSapiV1MiningPubAlgoListWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPubAlgoListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MiningPubAlgoListResponse)
getSapiV1MiningPubAlgoListWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_3 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MiningPubAlgoListResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_4 -> Network.HTTP.Types.Status.statusCode status_4 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPubAlgoListResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1MiningPubAlgoListResponseBody200
                                                        )
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MiningPubAlgoListResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_3
            )
            response_3
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/mining/pub/algoList")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPubAlgoListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubAlgoListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubAlgoListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/mining/pub/algoList
--
-- The same as 'getSapiV1MiningPubAlgoList' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MiningPubAlgoListRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPubAlgoListParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MiningPubAlgoListRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/mining/pub/algoList")
        [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPubAlgoListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubAlgoListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubAlgoListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/mining/pub/algoList
--
-- The same as 'getSapiV1MiningPubAlgoList' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MiningPubAlgoListWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MiningPubAlgoListParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MiningPubAlgoListWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/mining/pub/algoList")
          [ Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MiningPubAlgoListParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubAlgoListParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MiningPubAlgoListParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
