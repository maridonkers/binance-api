{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1MarginIsolatedPair
module Binance.Operations.GetSapiV1MarginIsolatedPair where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/margin/isolated/pair
--
-- Weight(IP): 10
getSapiV1MarginIsolatedPair ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedPairParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1MarginIsolatedPairResponse)
getSapiV1MarginIsolatedPair parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1MarginIsolatedPairResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginIsolatedPairResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1MarginIsolatedPairResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginIsolatedPairResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1MarginIsolatedPairResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/margin/isolated/pair")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedPairParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/isolated\/pair.GET.parameters@ in the specification.
data GetSapiV1MarginIsolatedPairParameters = GetSapiV1MarginIsolatedPairParameters
  { -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1MarginIsolatedPairParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1MarginIsolatedPairParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Trading symbol, e.g. BNBUSDT
    getSapiV1MarginIsolatedPairParametersQuerySymbol :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1MarginIsolatedPairParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginIsolatedPairParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginIsolatedPairParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1MarginIsolatedPairParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairParametersQuerySignature obj] : ["querySymbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairParametersQuerySymbol obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginIsolatedPairParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginIsolatedPairParameters" (\obj -> (((GHC.Base.pure GetSapiV1MarginIsolatedPairParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1MarginIsolatedPairParameters' with all required fields.
mkGetSapiV1MarginIsolatedPairParameters ::
  -- | 'getSapiV1MarginIsolatedPairParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginIsolatedPairParametersQuerySymbol'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginIsolatedPairParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1MarginIsolatedPairParameters
mkGetSapiV1MarginIsolatedPairParameters getSapiV1MarginIsolatedPairParametersQuerySignature getSapiV1MarginIsolatedPairParametersQuerySymbol getSapiV1MarginIsolatedPairParametersQueryTimestamp =
  GetSapiV1MarginIsolatedPairParameters
    { getSapiV1MarginIsolatedPairParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1MarginIsolatedPairParametersQuerySignature = getSapiV1MarginIsolatedPairParametersQuerySignature,
      getSapiV1MarginIsolatedPairParametersQuerySymbol = getSapiV1MarginIsolatedPairParametersQuerySymbol,
      getSapiV1MarginIsolatedPairParametersQueryTimestamp = getSapiV1MarginIsolatedPairParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1MarginIsolatedPair'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1MarginIsolatedPairResponseError' is used.
data GetSapiV1MarginIsolatedPairResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1MarginIsolatedPairResponseError GHC.Base.String
  | -- | Isolated Margin Symbol
    GetSapiV1MarginIsolatedPairResponse200 GetSapiV1MarginIsolatedPairResponseBody200
  | -- | Bad Request
    GetSapiV1MarginIsolatedPairResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1MarginIsolatedPairResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/margin\/isolated\/pair.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1MarginIsolatedPairResponseBody200 = GetSapiV1MarginIsolatedPairResponseBody200
  { -- | base
    getSapiV1MarginIsolatedPairResponseBody200Base :: Data.Text.Internal.Text,
    -- | isBuyAllowed
    getSapiV1MarginIsolatedPairResponseBody200IsBuyAllowed :: GHC.Types.Bool,
    -- | isMarginTrade
    getSapiV1MarginIsolatedPairResponseBody200IsMarginTrade :: GHC.Types.Bool,
    -- | isSellAllowed
    getSapiV1MarginIsolatedPairResponseBody200IsSellAllowed :: GHC.Types.Bool,
    -- | quote
    getSapiV1MarginIsolatedPairResponseBody200Quote :: Data.Text.Internal.Text,
    -- | symbol
    getSapiV1MarginIsolatedPairResponseBody200Symbol :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1MarginIsolatedPairResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["base" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200Base obj] : ["isBuyAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200IsBuyAllowed obj] : ["isMarginTrade" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200IsMarginTrade obj] : ["isSellAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200IsSellAllowed obj] : ["quote" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200Quote obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200Symbol obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["base" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200Base obj] : ["isBuyAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200IsBuyAllowed obj] : ["isMarginTrade" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200IsMarginTrade obj] : ["isSellAllowed" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200IsSellAllowed obj] : ["quote" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200Quote obj] : ["symbol" Data.Aeson.Types.ToJSON..= getSapiV1MarginIsolatedPairResponseBody200Symbol obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1MarginIsolatedPairResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1MarginIsolatedPairResponseBody200" (\obj -> (((((GHC.Base.pure GetSapiV1MarginIsolatedPairResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "base")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isBuyAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isMarginTrade")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "isSellAllowed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quote")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "symbol"))

-- | Create a new 'GetSapiV1MarginIsolatedPairResponseBody200' with all required fields.
mkGetSapiV1MarginIsolatedPairResponseBody200 ::
  -- | 'getSapiV1MarginIsolatedPairResponseBody200Base'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginIsolatedPairResponseBody200IsBuyAllowed'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginIsolatedPairResponseBody200IsMarginTrade'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginIsolatedPairResponseBody200IsSellAllowed'
  GHC.Types.Bool ->
  -- | 'getSapiV1MarginIsolatedPairResponseBody200Quote'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1MarginIsolatedPairResponseBody200Symbol'
  Data.Text.Internal.Text ->
  GetSapiV1MarginIsolatedPairResponseBody200
mkGetSapiV1MarginIsolatedPairResponseBody200 getSapiV1MarginIsolatedPairResponseBody200Base getSapiV1MarginIsolatedPairResponseBody200IsBuyAllowed getSapiV1MarginIsolatedPairResponseBody200IsMarginTrade getSapiV1MarginIsolatedPairResponseBody200IsSellAllowed getSapiV1MarginIsolatedPairResponseBody200Quote getSapiV1MarginIsolatedPairResponseBody200Symbol =
  GetSapiV1MarginIsolatedPairResponseBody200
    { getSapiV1MarginIsolatedPairResponseBody200Base = getSapiV1MarginIsolatedPairResponseBody200Base,
      getSapiV1MarginIsolatedPairResponseBody200IsBuyAllowed = getSapiV1MarginIsolatedPairResponseBody200IsBuyAllowed,
      getSapiV1MarginIsolatedPairResponseBody200IsMarginTrade = getSapiV1MarginIsolatedPairResponseBody200IsMarginTrade,
      getSapiV1MarginIsolatedPairResponseBody200IsSellAllowed = getSapiV1MarginIsolatedPairResponseBody200IsSellAllowed,
      getSapiV1MarginIsolatedPairResponseBody200Quote = getSapiV1MarginIsolatedPairResponseBody200Quote,
      getSapiV1MarginIsolatedPairResponseBody200Symbol = getSapiV1MarginIsolatedPairResponseBody200Symbol
    }

-- | > GET /sapi/v1/margin/isolated/pair
--
-- The same as 'getSapiV1MarginIsolatedPair' but accepts an explicit configuration.
getSapiV1MarginIsolatedPairWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedPairParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1MarginIsolatedPairResponse)
getSapiV1MarginIsolatedPairWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1MarginIsolatedPairResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginIsolatedPairResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1MarginIsolatedPairResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginIsolatedPairResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1MarginIsolatedPairResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/margin/isolated/pair")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedPairParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/margin/isolated/pair
--
-- The same as 'getSapiV1MarginIsolatedPair' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginIsolatedPairRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedPairParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginIsolatedPairRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/margin/isolated/pair")
        [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedPairParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/margin/isolated/pair
--
-- The same as 'getSapiV1MarginIsolatedPair' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1MarginIsolatedPairWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1MarginIsolatedPairParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1MarginIsolatedPairWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/margin/isolated/pair")
          [ Binance.Common.QueryParameter (Data.Text.pack "symbol") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQuerySymbol parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1MarginIsolatedPairParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1MarginIsolatedPairParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
