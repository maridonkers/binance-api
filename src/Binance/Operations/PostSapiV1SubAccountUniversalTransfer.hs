{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1SubAccountUniversalTransfer
module Binance.Operations.PostSapiV1SubAccountUniversalTransfer where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/sub-account/universalTransfer
--
-- - You need to enable \"internal transfer\" option for the api key which requests this endpoint.
-- - Transfer from master account by default if fromEmail is not sent.
-- - Transfer to master account by default if toEmail is not sent.
-- - Supported transfer scenarios:
--   - Master account SPOT transfer to sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN
--   - Sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN transfer to master account SPOT
--   - Transfer between two sub-account SPOT accounts
--
-- Weight(IP): 1
postSapiV1SubAccountUniversalTransfer ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1SubAccountUniversalTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1SubAccountUniversalTransferResponse)
postSapiV1SubAccountUniversalTransfer parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1SubAccountUniversalTransferResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1SubAccountUniversalTransferResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1SubAccountUniversalTransferResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1SubAccountUniversalTransferResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1SubAccountUniversalTransferResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/sub-account/universalTransfer")
        [ Binance.Common.QueryParameter (Data.Text.pack "fromEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryFromEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "toEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryToEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "fromAccountType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "toAccountType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryToAccountType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryClientTranId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/universalTransfer.POST.parameters@ in the specification.
data PostSapiV1SubAccountUniversalTransferParameters = PostSapiV1SubAccountUniversalTransferParameters
  { -- | queryAmount: Represents the parameter named \'amount\'
    postSapiV1SubAccountUniversalTransferParametersQueryAmount :: GHC.Types.Double,
    -- | queryAsset: Represents the parameter named \'asset\'
    postSapiV1SubAccountUniversalTransferParametersQueryAsset :: Data.Text.Internal.Text,
    -- | queryClientTranId: Represents the parameter named \'clientTranId\'
    postSapiV1SubAccountUniversalTransferParametersQueryClientTranId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryFromAccountType: Represents the parameter named \'fromAccountType\'
    postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType :: PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountType,
    -- | queryFromEmail: Represents the parameter named \'fromEmail\'
    --
    -- Sub-account email
    postSapiV1SubAccountUniversalTransferParametersQueryFromEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1SubAccountUniversalTransferParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1SubAccountUniversalTransferParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySymbol: Represents the parameter named \'symbol\'
    --
    -- Only supported under ISOLATED_MARGIN type
    postSapiV1SubAccountUniversalTransferParametersQuerySymbol :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1SubAccountUniversalTransferParametersQueryTimestamp :: GHC.Int.Int64,
    -- | queryToAccountType: Represents the parameter named \'toAccountType\'
    postSapiV1SubAccountUniversalTransferParametersQueryToAccountType :: PostSapiV1SubAccountUniversalTransferParametersQueryToAccountType,
    -- | queryToEmail: Represents the parameter named \'toEmail\'
    --
    -- Sub-account email
    postSapiV1SubAccountUniversalTransferParametersQueryToEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1SubAccountUniversalTransferParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryAmount obj] : ["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryAsset obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClientTranId" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQueryClientTranId obj) : ["queryFromAccountType" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFromEmail" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQueryFromEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQuerySymbol obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryTimestamp obj] : ["queryToAccountType" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryToAccountType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryToEmail" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQueryToEmail obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryAmount obj] : ["queryAsset" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryAsset obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClientTranId" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQueryClientTranId obj) : ["queryFromAccountType" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFromEmail" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQueryFromEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQuerySymbol obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryTimestamp obj] : ["queryToAccountType" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferParametersQueryToAccountType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryToEmail" Data.Aeson.Types.ToJSON..=)) (postSapiV1SubAccountUniversalTransferParametersQueryToEmail obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1SubAccountUniversalTransferParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1SubAccountUniversalTransferParameters" (\obj -> ((((((((((GHC.Base.pure PostSapiV1SubAccountUniversalTransferParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryClientTranId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryFromAccountType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFromEmail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySymbol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryToAccountType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryToEmail"))

-- | Create a new 'PostSapiV1SubAccountUniversalTransferParameters' with all required fields.
mkPostSapiV1SubAccountUniversalTransferParameters ::
  -- | 'postSapiV1SubAccountUniversalTransferParametersQueryAmount'
  GHC.Types.Double ->
  -- | 'postSapiV1SubAccountUniversalTransferParametersQueryAsset'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType'
  PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountType ->
  -- | 'postSapiV1SubAccountUniversalTransferParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1SubAccountUniversalTransferParametersQueryTimestamp'
  GHC.Int.Int64 ->
  -- | 'postSapiV1SubAccountUniversalTransferParametersQueryToAccountType'
  PostSapiV1SubAccountUniversalTransferParametersQueryToAccountType ->
  PostSapiV1SubAccountUniversalTransferParameters
mkPostSapiV1SubAccountUniversalTransferParameters postSapiV1SubAccountUniversalTransferParametersQueryAmount postSapiV1SubAccountUniversalTransferParametersQueryAsset postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType postSapiV1SubAccountUniversalTransferParametersQuerySignature postSapiV1SubAccountUniversalTransferParametersQueryTimestamp postSapiV1SubAccountUniversalTransferParametersQueryToAccountType =
  PostSapiV1SubAccountUniversalTransferParameters
    { postSapiV1SubAccountUniversalTransferParametersQueryAmount = postSapiV1SubAccountUniversalTransferParametersQueryAmount,
      postSapiV1SubAccountUniversalTransferParametersQueryAsset = postSapiV1SubAccountUniversalTransferParametersQueryAsset,
      postSapiV1SubAccountUniversalTransferParametersQueryClientTranId = GHC.Maybe.Nothing,
      postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType = postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType,
      postSapiV1SubAccountUniversalTransferParametersQueryFromEmail = GHC.Maybe.Nothing,
      postSapiV1SubAccountUniversalTransferParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1SubAccountUniversalTransferParametersQuerySignature = postSapiV1SubAccountUniversalTransferParametersQuerySignature,
      postSapiV1SubAccountUniversalTransferParametersQuerySymbol = GHC.Maybe.Nothing,
      postSapiV1SubAccountUniversalTransferParametersQueryTimestamp = postSapiV1SubAccountUniversalTransferParametersQueryTimestamp,
      postSapiV1SubAccountUniversalTransferParametersQueryToAccountType = postSapiV1SubAccountUniversalTransferParametersQueryToAccountType,
      postSapiV1SubAccountUniversalTransferParametersQueryToEmail = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/sapi\/v1\/sub-account\/universalTransfer.POST.parameters.properties.queryFromAccountType@ in the specification.
--
-- Represents the parameter named \'fromAccountType\'
data PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"SPOT"@
    PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumSPOT
  | -- | Represents the JSON value @"USDT_FUTURE"@
    PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumUSDTFUTURE
  | -- | Represents the JSON value @"COIN_FUTURE"@
    PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumCOINFUTURE
  | -- | Represents the JSON value @"MARGIN"@
    PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumMARGIN
  | -- | Represents the JSON value @"ISOLATED_MARGIN"@
    PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumISOLATEDMARGIN
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountType where
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeOther val) = val
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumSPOT) = "SPOT"
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumUSDTFUTURE) = "USDT_FUTURE"
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumCOINFUTURE) = "COIN_FUTURE"
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumMARGIN) = "MARGIN"
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumISOLATEDMARGIN) = "ISOLATED_MARGIN"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "SPOT" -> PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumSPOT
            | val GHC.Classes.== "USDT_FUTURE" -> PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumUSDTFUTURE
            | val GHC.Classes.== "COIN_FUTURE" -> PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumCOINFUTURE
            | val GHC.Classes.== "MARGIN" -> PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumMARGIN
            | val GHC.Classes.== "ISOLATED_MARGIN" -> PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeEnumISOLATEDMARGIN
            | GHC.Base.otherwise -> PostSapiV1SubAccountUniversalTransferParametersQueryFromAccountTypeOther val
      )

-- | Defines the enum schema located at @paths.\/sapi\/v1\/sub-account\/universalTransfer.POST.parameters.properties.queryToAccountType@ in the specification.
--
-- Represents the parameter named \'toAccountType\'
data PostSapiV1SubAccountUniversalTransferParametersQueryToAccountType
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"SPOT"@
    PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumSPOT
  | -- | Represents the JSON value @"USDT_FUTURE"@
    PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumUSDTFUTURE
  | -- | Represents the JSON value @"COIN_FUTURE"@
    PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumCOINFUTURE
  | -- | Represents the JSON value @"MARGIN"@
    PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumMARGIN
  | -- | Represents the JSON value @"ISOLATED_MARGIN"@
    PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumISOLATEDMARGIN
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1SubAccountUniversalTransferParametersQueryToAccountType where
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeOther val) = val
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumSPOT) = "SPOT"
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumUSDTFUTURE) = "USDT_FUTURE"
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumCOINFUTURE) = "COIN_FUTURE"
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumMARGIN) = "MARGIN"
  toJSON (PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumISOLATEDMARGIN) = "ISOLATED_MARGIN"

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1SubAccountUniversalTransferParametersQueryToAccountType where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "SPOT" -> PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumSPOT
            | val GHC.Classes.== "USDT_FUTURE" -> PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumUSDTFUTURE
            | val GHC.Classes.== "COIN_FUTURE" -> PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumCOINFUTURE
            | val GHC.Classes.== "MARGIN" -> PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumMARGIN
            | val GHC.Classes.== "ISOLATED_MARGIN" -> PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeEnumISOLATEDMARGIN
            | GHC.Base.otherwise -> PostSapiV1SubAccountUniversalTransferParametersQueryToAccountTypeOther val
      )

-- | Represents a response of the operation 'postSapiV1SubAccountUniversalTransfer'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1SubAccountUniversalTransferResponseError' is used.
data PostSapiV1SubAccountUniversalTransferResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1SubAccountUniversalTransferResponseError GHC.Base.String
  | -- | Transfer id
    PostSapiV1SubAccountUniversalTransferResponse200 PostSapiV1SubAccountUniversalTransferResponseBody200
  | -- | Bad Request
    PostSapiV1SubAccountUniversalTransferResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1SubAccountUniversalTransferResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/universalTransfer.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1SubAccountUniversalTransferResponseBody200 = PostSapiV1SubAccountUniversalTransferResponseBody200
  { -- | clientTranId
    postSapiV1SubAccountUniversalTransferResponseBody200ClientTranId :: Data.Text.Internal.Text,
    -- | tranId
    postSapiV1SubAccountUniversalTransferResponseBody200TranId :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1SubAccountUniversalTransferResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["clientTranId" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferResponseBody200ClientTranId obj] : ["tranId" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferResponseBody200TranId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["clientTranId" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferResponseBody200ClientTranId obj] : ["tranId" Data.Aeson.Types.ToJSON..= postSapiV1SubAccountUniversalTransferResponseBody200TranId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1SubAccountUniversalTransferResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1SubAccountUniversalTransferResponseBody200" (\obj -> (GHC.Base.pure PostSapiV1SubAccountUniversalTransferResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "clientTranId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tranId"))

-- | Create a new 'PostSapiV1SubAccountUniversalTransferResponseBody200' with all required fields.
mkPostSapiV1SubAccountUniversalTransferResponseBody200 ::
  -- | 'postSapiV1SubAccountUniversalTransferResponseBody200ClientTranId'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1SubAccountUniversalTransferResponseBody200TranId'
  GHC.Int.Int64 ->
  PostSapiV1SubAccountUniversalTransferResponseBody200
mkPostSapiV1SubAccountUniversalTransferResponseBody200 postSapiV1SubAccountUniversalTransferResponseBody200ClientTranId postSapiV1SubAccountUniversalTransferResponseBody200TranId =
  PostSapiV1SubAccountUniversalTransferResponseBody200
    { postSapiV1SubAccountUniversalTransferResponseBody200ClientTranId = postSapiV1SubAccountUniversalTransferResponseBody200ClientTranId,
      postSapiV1SubAccountUniversalTransferResponseBody200TranId = postSapiV1SubAccountUniversalTransferResponseBody200TranId
    }

-- | > POST /sapi/v1/sub-account/universalTransfer
--
-- The same as 'postSapiV1SubAccountUniversalTransfer' but accepts an explicit configuration.
postSapiV1SubAccountUniversalTransferWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1SubAccountUniversalTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1SubAccountUniversalTransferResponse)
postSapiV1SubAccountUniversalTransferWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1SubAccountUniversalTransferResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1SubAccountUniversalTransferResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1SubAccountUniversalTransferResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1SubAccountUniversalTransferResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1SubAccountUniversalTransferResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/sub-account/universalTransfer")
          [ Binance.Common.QueryParameter (Data.Text.pack "fromEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryFromEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "toEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryToEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "fromAccountType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "toAccountType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryToAccountType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryClientTranId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/sub-account/universalTransfer
--
-- The same as 'postSapiV1SubAccountUniversalTransfer' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1SubAccountUniversalTransferRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1SubAccountUniversalTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1SubAccountUniversalTransferRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/sub-account/universalTransfer")
        [ Binance.Common.QueryParameter (Data.Text.pack "fromEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryFromEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "toEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryToEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "fromAccountType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "toAccountType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryToAccountType parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryClientTranId parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/sub-account/universalTransfer
--
-- The same as 'postSapiV1SubAccountUniversalTransfer' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1SubAccountUniversalTransferWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1SubAccountUniversalTransferParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1SubAccountUniversalTransferWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/sub-account/universalTransfer")
          [ Binance.Common.QueryParameter (Data.Text.pack "fromEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryFromEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "toEmail") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryToEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "fromAccountType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryFromAccountType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "toAccountType") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryToAccountType parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "clientTranId") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryClientTranId parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "symbol") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQuerySymbol parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "asset") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryAsset parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1SubAccountUniversalTransferParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1SubAccountUniversalTransferParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
