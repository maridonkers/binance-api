{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSapiV1SubAccountSpotSummary
module Binance.Operations.GetSapiV1SubAccountSpotSummary where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sapi/v1/sub-account/spotSummary
--
-- Get BTC valued asset summary of subaccounts.
--
-- Weight(IP): 1
getSapiV1SubAccountSpotSummary ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountSpotSummaryParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountSpotSummaryResponse)
getSapiV1SubAccountSpotSummary parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSapiV1SubAccountSpotSummaryResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountSpotSummaryResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSapiV1SubAccountSpotSummaryResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountSpotSummaryResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSapiV1SubAccountSpotSummaryResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/spotSummary")
        [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountSpotSummaryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountSpotSummaryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/spotSummary.GET.parameters@ in the specification.
data GetSapiV1SubAccountSpotSummaryParameters = GetSapiV1SubAccountSpotSummaryParameters
  { -- | queryEmail: Represents the parameter named \'email\'
    --
    -- Sub-account email
    getSapiV1SubAccountSpotSummaryParametersQueryEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- Default 1
    getSapiV1SubAccountSpotSummaryParametersQueryPage :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    getSapiV1SubAccountSpotSummaryParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    getSapiV1SubAccountSpotSummaryParametersQuerySignature :: Data.Text.Internal.Text,
    -- | querySize: Represents the parameter named \'size\'
    --
    -- Default:10 Max:20
    getSapiV1SubAccountSpotSummaryParametersQuerySize :: (GHC.Maybe.Maybe GHC.Int.Int32),
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    getSapiV1SubAccountSpotSummaryParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountSpotSummaryParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountSpotSummaryParametersQueryEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountSpotSummaryParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountSpotSummaryParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySize" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountSpotSummaryParametersQuerySize obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEmail" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountSpotSummaryParametersQueryEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountSpotSummaryParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountSpotSummaryParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryParametersQuerySignature obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySize" Data.Aeson.Types.ToJSON..=)) (getSapiV1SubAccountSpotSummaryParametersQuerySize obj) : ["queryTimestamp" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountSpotSummaryParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountSpotSummaryParameters" (\obj -> (((((GHC.Base.pure GetSapiV1SubAccountSpotSummaryParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEmail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySize")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'GetSapiV1SubAccountSpotSummaryParameters' with all required fields.
mkGetSapiV1SubAccountSpotSummaryParameters ::
  -- | 'getSapiV1SubAccountSpotSummaryParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountSpotSummaryParametersQueryTimestamp'
  GHC.Int.Int64 ->
  GetSapiV1SubAccountSpotSummaryParameters
mkGetSapiV1SubAccountSpotSummaryParameters getSapiV1SubAccountSpotSummaryParametersQuerySignature getSapiV1SubAccountSpotSummaryParametersQueryTimestamp =
  GetSapiV1SubAccountSpotSummaryParameters
    { getSapiV1SubAccountSpotSummaryParametersQueryEmail = GHC.Maybe.Nothing,
      getSapiV1SubAccountSpotSummaryParametersQueryPage = GHC.Maybe.Nothing,
      getSapiV1SubAccountSpotSummaryParametersQueryRecvWindow = GHC.Maybe.Nothing,
      getSapiV1SubAccountSpotSummaryParametersQuerySignature = getSapiV1SubAccountSpotSummaryParametersQuerySignature,
      getSapiV1SubAccountSpotSummaryParametersQuerySize = GHC.Maybe.Nothing,
      getSapiV1SubAccountSpotSummaryParametersQueryTimestamp = getSapiV1SubAccountSpotSummaryParametersQueryTimestamp
    }

-- | Represents a response of the operation 'getSapiV1SubAccountSpotSummary'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSapiV1SubAccountSpotSummaryResponseError' is used.
data GetSapiV1SubAccountSpotSummaryResponse
  = -- | Means either no matching case available or a parse error
    GetSapiV1SubAccountSpotSummaryResponseError GHC.Base.String
  | -- | Summary of Sub-account Spot Assets
    GetSapiV1SubAccountSpotSummaryResponse200 GetSapiV1SubAccountSpotSummaryResponseBody200
  | -- | Bad Request
    GetSapiV1SubAccountSpotSummaryResponse400 Error
  | -- | Unauthorized Request
    GetSapiV1SubAccountSpotSummaryResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/spotSummary.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSapiV1SubAccountSpotSummaryResponseBody200 = GetSapiV1SubAccountSpotSummaryResponseBody200
  { -- | masterAccountTotalAsset
    getSapiV1SubAccountSpotSummaryResponseBody200MasterAccountTotalAsset :: Data.Text.Internal.Text,
    -- | spotSubUserAssetBtcVoList
    getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList :: ([GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList]),
    -- | totalCount
    getSapiV1SubAccountSpotSummaryResponseBody200TotalCount :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountSpotSummaryResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["masterAccountTotalAsset" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200MasterAccountTotalAsset obj] : ["spotSubUserAssetBtcVoList" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList obj] : ["totalCount" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200TotalCount obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["masterAccountTotalAsset" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200MasterAccountTotalAsset obj] : ["spotSubUserAssetBtcVoList" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList obj] : ["totalCount" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200TotalCount obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountSpotSummaryResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountSpotSummaryResponseBody200" (\obj -> ((GHC.Base.pure GetSapiV1SubAccountSpotSummaryResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "masterAccountTotalAsset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "spotSubUserAssetBtcVoList")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalCount"))

-- | Create a new 'GetSapiV1SubAccountSpotSummaryResponseBody200' with all required fields.
mkGetSapiV1SubAccountSpotSummaryResponseBody200 ::
  -- | 'getSapiV1SubAccountSpotSummaryResponseBody200MasterAccountTotalAsset'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList'
  [GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList] ->
  -- | 'getSapiV1SubAccountSpotSummaryResponseBody200TotalCount'
  GHC.Int.Int64 ->
  GetSapiV1SubAccountSpotSummaryResponseBody200
mkGetSapiV1SubAccountSpotSummaryResponseBody200 getSapiV1SubAccountSpotSummaryResponseBody200MasterAccountTotalAsset getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList getSapiV1SubAccountSpotSummaryResponseBody200TotalCount =
  GetSapiV1SubAccountSpotSummaryResponseBody200
    { getSapiV1SubAccountSpotSummaryResponseBody200MasterAccountTotalAsset = getSapiV1SubAccountSpotSummaryResponseBody200MasterAccountTotalAsset,
      getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList = getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList,
      getSapiV1SubAccountSpotSummaryResponseBody200TotalCount = getSapiV1SubAccountSpotSummaryResponseBody200TotalCount
    }

-- | Defines the object schema located at @paths.\/sapi\/v1\/sub-account\/spotSummary.GET.responses.200.content.application\/json.schema.properties.spotSubUserAssetBtcVoList.items@ in the specification.
data GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList = GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList
  { -- | email
    getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListEmail :: Data.Text.Internal.Text,
    -- | totalAsset
    getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListTotalAsset :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["email" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListEmail obj] : ["totalAsset" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListTotalAsset obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["email" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListEmail obj] : ["totalAsset" Data.Aeson.Types.ToJSON..= getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListTotalAsset obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList" (\obj -> (GHC.Base.pure GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "totalAsset"))

-- | Create a new 'GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList' with all required fields.
mkGetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList ::
  -- | 'getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListEmail'
  Data.Text.Internal.Text ->
  -- | 'getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListTotalAsset'
  Data.Text.Internal.Text ->
  GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList
mkGetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListEmail getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListTotalAsset =
  GetSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoList
    { getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListEmail = getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListEmail,
      getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListTotalAsset = getSapiV1SubAccountSpotSummaryResponseBody200SpotSubUserAssetBtcVoListTotalAsset
    }

-- | > GET /sapi/v1/sub-account/spotSummary
--
-- The same as 'getSapiV1SubAccountSpotSummary' but accepts an explicit configuration.
getSapiV1SubAccountSpotSummaryWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountSpotSummaryParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSapiV1SubAccountSpotSummaryResponse)
getSapiV1SubAccountSpotSummaryWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either GetSapiV1SubAccountSpotSummaryResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountSpotSummaryResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetSapiV1SubAccountSpotSummaryResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountSpotSummaryResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSapiV1SubAccountSpotSummaryResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/spotSummary")
          [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountSpotSummaryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountSpotSummaryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > GET /sapi/v1/sub-account/spotSummary
--
-- The same as 'getSapiV1SubAccountSpotSummary' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountSpotSummaryRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountSpotSummaryParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountSpotSummaryRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/sapi/v1/sub-account/spotSummary")
        [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountSpotSummaryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountSpotSummaryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > GET /sapi/v1/sub-account/spotSummary
--
-- The same as 'getSapiV1SubAccountSpotSummary' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSapiV1SubAccountSpotSummaryWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSapiV1SubAccountSpotSummaryParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSapiV1SubAccountSpotSummaryWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/sapi/v1/sub-account/spotSummary")
          [ Binance.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQuerySize parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSapiV1SubAccountSpotSummaryParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountSpotSummaryParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSapiV1SubAccountSpotSummaryParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
