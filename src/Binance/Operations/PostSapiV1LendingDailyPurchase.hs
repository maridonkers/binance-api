{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSapiV1LendingDailyPurchase
module Binance.Operations.PostSapiV1LendingDailyPurchase where

import qualified Binance.Common
import Binance.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sapi/v1/lending/daily/purchase
--
-- Weight(IP): 1
postSapiV1LendingDailyPurchase ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1LendingDailyPurchaseParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response PostSapiV1LendingDailyPurchaseResponse)
postSapiV1LendingDailyPurchase parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSapiV1LendingDailyPurchaseResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1LendingDailyPurchaseResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PostSapiV1LendingDailyPurchaseResponseBody200
                                                      )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1LendingDailyPurchaseResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSapiV1LendingDailyPurchaseResponse401
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/lending/daily/purchase")
        [ Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LendingDailyPurchaseParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sapi\/v1\/lending\/daily\/purchase.POST.parameters@ in the specification.
data PostSapiV1LendingDailyPurchaseParameters = PostSapiV1LendingDailyPurchaseParameters
  { -- | queryAmount: Represents the parameter named \'amount\'
    postSapiV1LendingDailyPurchaseParametersQueryAmount :: GHC.Types.Double,
    -- | queryProductId: Represents the parameter named \'productId\'
    postSapiV1LendingDailyPurchaseParametersQueryProductId :: Data.Text.Internal.Text,
    -- | queryRecvWindow: Represents the parameter named \'recvWindow\'
    --
    -- The value cannot be greater than 60000
    postSapiV1LendingDailyPurchaseParametersQueryRecvWindow :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | querySignature: Represents the parameter named \'signature\'
    --
    -- Signature
    postSapiV1LendingDailyPurchaseParametersQuerySignature :: Data.Text.Internal.Text,
    -- | queryTimestamp: Represents the parameter named \'timestamp\'
    --
    -- UTC timestamp in ms
    postSapiV1LendingDailyPurchaseParametersQueryTimestamp :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1LendingDailyPurchaseParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseParametersQueryAmount obj] : ["queryProductId" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseParametersQueryProductId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1LendingDailyPurchaseParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseParametersQueryTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAmount" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseParametersQueryAmount obj] : ["queryProductId" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseParametersQueryProductId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecvWindow" Data.Aeson.Types.ToJSON..=)) (postSapiV1LendingDailyPurchaseParametersQueryRecvWindow obj) : ["querySignature" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseParametersQuerySignature obj] : ["queryTimestamp" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseParametersQueryTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1LendingDailyPurchaseParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1LendingDailyPurchaseParameters" (\obj -> ((((GHC.Base.pure PostSapiV1LendingDailyPurchaseParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAmount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryProductId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecvWindow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "querySignature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryTimestamp"))

-- | Create a new 'PostSapiV1LendingDailyPurchaseParameters' with all required fields.
mkPostSapiV1LendingDailyPurchaseParameters ::
  -- | 'postSapiV1LendingDailyPurchaseParametersQueryAmount'
  GHC.Types.Double ->
  -- | 'postSapiV1LendingDailyPurchaseParametersQueryProductId'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LendingDailyPurchaseParametersQuerySignature'
  Data.Text.Internal.Text ->
  -- | 'postSapiV1LendingDailyPurchaseParametersQueryTimestamp'
  GHC.Int.Int64 ->
  PostSapiV1LendingDailyPurchaseParameters
mkPostSapiV1LendingDailyPurchaseParameters postSapiV1LendingDailyPurchaseParametersQueryAmount postSapiV1LendingDailyPurchaseParametersQueryProductId postSapiV1LendingDailyPurchaseParametersQuerySignature postSapiV1LendingDailyPurchaseParametersQueryTimestamp =
  PostSapiV1LendingDailyPurchaseParameters
    { postSapiV1LendingDailyPurchaseParametersQueryAmount = postSapiV1LendingDailyPurchaseParametersQueryAmount,
      postSapiV1LendingDailyPurchaseParametersQueryProductId = postSapiV1LendingDailyPurchaseParametersQueryProductId,
      postSapiV1LendingDailyPurchaseParametersQueryRecvWindow = GHC.Maybe.Nothing,
      postSapiV1LendingDailyPurchaseParametersQuerySignature = postSapiV1LendingDailyPurchaseParametersQuerySignature,
      postSapiV1LendingDailyPurchaseParametersQueryTimestamp = postSapiV1LendingDailyPurchaseParametersQueryTimestamp
    }

-- | Represents a response of the operation 'postSapiV1LendingDailyPurchase'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSapiV1LendingDailyPurchaseResponseError' is used.
data PostSapiV1LendingDailyPurchaseResponse
  = -- | Means either no matching case available or a parse error
    PostSapiV1LendingDailyPurchaseResponseError GHC.Base.String
  | -- | Generated Purchase Id
    PostSapiV1LendingDailyPurchaseResponse200 PostSapiV1LendingDailyPurchaseResponseBody200
  | -- | Bad Request
    PostSapiV1LendingDailyPurchaseResponse400 Error
  | -- | Unauthorized Request
    PostSapiV1LendingDailyPurchaseResponse401 Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sapi\/v1\/lending\/daily\/purchase.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSapiV1LendingDailyPurchaseResponseBody200 = PostSapiV1LendingDailyPurchaseResponseBody200
  { -- | purchaseId
    postSapiV1LendingDailyPurchaseResponseBody200PurchaseId :: GHC.Int.Int64
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSapiV1LendingDailyPurchaseResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["purchaseId" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseResponseBody200PurchaseId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["purchaseId" Data.Aeson.Types.ToJSON..= postSapiV1LendingDailyPurchaseResponseBody200PurchaseId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSapiV1LendingDailyPurchaseResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSapiV1LendingDailyPurchaseResponseBody200" (\obj -> GHC.Base.pure PostSapiV1LendingDailyPurchaseResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "purchaseId"))

-- | Create a new 'PostSapiV1LendingDailyPurchaseResponseBody200' with all required fields.
mkPostSapiV1LendingDailyPurchaseResponseBody200 ::
  -- | 'postSapiV1LendingDailyPurchaseResponseBody200PurchaseId'
  GHC.Int.Int64 ->
  PostSapiV1LendingDailyPurchaseResponseBody200
mkPostSapiV1LendingDailyPurchaseResponseBody200 postSapiV1LendingDailyPurchaseResponseBody200PurchaseId = PostSapiV1LendingDailyPurchaseResponseBody200 {postSapiV1LendingDailyPurchaseResponseBody200PurchaseId = postSapiV1LendingDailyPurchaseResponseBody200PurchaseId}

-- | > POST /sapi/v1/lending/daily/purchase
--
-- The same as 'postSapiV1LendingDailyPurchase' but accepts an explicit configuration.
postSapiV1LendingDailyPurchaseWithConfiguration ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1LendingDailyPurchaseParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSapiV1LendingDailyPurchaseResponse)
postSapiV1LendingDailyPurchaseWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_4 ->
          GHC.Base.fmap
            ( Data.Either.either PostSapiV1LendingDailyPurchaseResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_5 -> Network.HTTP.Types.Status.statusCode status_5 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1LendingDailyPurchaseResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PostSapiV1LendingDailyPurchaseResponseBody200
                                                        )
                                   | (\status_6 -> Network.HTTP.Types.Status.statusCode status_6 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1LendingDailyPurchaseResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | (\status_7 -> Network.HTTP.Types.Status.statusCode status_7 GHC.Classes.== 401) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSapiV1LendingDailyPurchaseResponse401
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_4
            )
            response_4
      )
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/lending/daily/purchase")
          [ Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LendingDailyPurchaseParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )

-- | > POST /sapi/v1/lending/daily/purchase
--
-- The same as 'postSapiV1LendingDailyPurchase' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1LendingDailyPurchaseRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1LendingDailyPurchaseParameters ->
  -- | Monadic computation which returns the result of the operation
  Binance.Common.ClientT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1LendingDailyPurchaseRaw parameters =
  GHC.Base.id
    ( Binance.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
        (Data.Text.pack "/sapi/v1/lending/daily/purchase")
        [ Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LendingDailyPurchaseParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
          Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
        ]
    )

-- | > POST /sapi/v1/lending/daily/purchase
--
-- The same as 'postSapiV1LendingDailyPurchase' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSapiV1LendingDailyPurchaseWithConfigurationRaw ::
  forall m.
  Binance.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  Binance.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostSapiV1LendingDailyPurchaseParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSapiV1LendingDailyPurchaseWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( Binance.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST")
          (Data.Text.pack "/sapi/v1/lending/daily/purchase")
          [ Binance.Common.QueryParameter (Data.Text.pack "productId") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryProductId parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "amount") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryAmount parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "recvWindow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> postSapiV1LendingDailyPurchaseParametersQueryRecvWindow parameters) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "timestamp") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQueryTimestamp parameters)) (Data.Text.pack "form") GHC.Types.False,
            Binance.Common.QueryParameter (Data.Text.pack "signature") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (postSapiV1LendingDailyPurchaseParametersQuerySignature parameters)) (Data.Text.pack "form") GHC.Types.False
          ]
      )
